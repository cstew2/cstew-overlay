diff --git a/include/STTypes.h b/include/STTypes.h
index 71dd0eb..6ae703c 100644
--- a/include/STTypes.h
+++ b/include/STTypes.h
@@ -47,13 +47,6 @@ typedef unsigned long   ulong;
 #define SOUNDTOUCH_ALIGN_POINTER_16(x)      ( ( (ulongptr)(x) + 15 ) & ~(ulongptr)15 )
 
 
-#if (defined(__GNUC__) && !defined(ANDROID))
-    // In GCC, include soundtouch_config.h made by config scritps.
-    // Skip this in Android compilation that uses GCC but without configure scripts.
-    #include "soundtouch_config.h"
-#endif
-
-
 namespace soundtouch
 {
     /// Max allowed number of channels
@@ -71,13 +64,6 @@ namespace soundtouch
     /// runtime performance so recommendation is to keep this off.
     // #define USE_MULTICH_ALWAYS
 
-    #if (defined(__SOFTFP__) && defined(ANDROID))
-        // For Android compilation: Force use of Integer samples in case that
-        // compilation uses soft-floating point emulation - soft-fp is way too slow
-        #undef  SOUNDTOUCH_FLOAT_SAMPLES
-        #define SOUNDTOUCH_INTEGER_SAMPLES      1
-    #endif
-
     #if !(SOUNDTOUCH_INTEGER_SAMPLES || SOUNDTOUCH_FLOAT_SAMPLES)
        
         /// Choose either 32bit floating point or 16bit integer sampletype
@@ -99,28 +85,6 @@ namespace soundtouch
      
     #endif
 
-    #if (_M_IX86 || __i386__ || __x86_64__ || _M_X64)
-        /// Define this to allow X86-specific assembler/intrinsic optimizations. 
-        /// Notice that library contains also usual C++ versions of each of these
-        /// these routines, so if you're having difficulties getting the optimized 
-        /// routines compiled for whatever reason, you may disable these optimizations 
-        /// to make the library compile.
-
-        #define SOUNDTOUCH_ALLOW_X86_OPTIMIZATIONS     1
-
-        /// In GNU environment, allow the user to override this setting by
-        /// giving the following switch to the configure script:
-        /// ./configure --disable-x86-optimizations
-        /// ./configure --enable-x86-optimizations=no
-        #ifdef SOUNDTOUCH_DISABLE_X86_OPTIMIZATIONS
-            #undef SOUNDTOUCH_ALLOW_X86_OPTIMIZATIONS
-        #endif
-    #else
-        /// Always disable optimizations when not using a x86 systems.
-        #undef SOUNDTOUCH_ALLOW_X86_OPTIMIZATIONS
-
-    #endif
-
     // If defined, allows the SIMD-optimized routines to skip unevenly aligned
     // memory offsets that can cause performance penalty in some SIMD implementations.
     // Causes slight compromise in sound quality.
@@ -138,13 +102,6 @@ namespace soundtouch
             #error "conflicting sample types defined"
         #endif // SOUNDTOUCH_FLOAT_SAMPLES
 
-        #ifdef SOUNDTOUCH_ALLOW_X86_OPTIMIZATIONS
-            // Allow MMX optimizations (not available in X64 mode)
-            #if (!_M_X64)
-                #define SOUNDTOUCH_ALLOW_MMX   1
-            #endif
-        #endif
-
     #else
 
         // floating point samples
@@ -153,11 +110,6 @@ namespace soundtouch
         // efficient autovectorization
         typedef float LONG_SAMPLETYPE;
 
-        #ifdef SOUNDTOUCH_ALLOW_X86_OPTIMIZATIONS
-            // Allow SSE optimizations
-            #define SOUNDTOUCH_ALLOW_SSE       1
-        #endif
-
     #endif  // SOUNDTOUCH_INTEGER_SAMPLES
 
     #if ((SOUNDTOUCH_ALLOW_SSE) || (__SSE__) || (SOUNDTOUCH_USE_NEON))
diff --git a/include/SoundTouch.h b/include/SoundTouch.h
index 0c22cb5..35a4e00 100644
--- a/include/SoundTouch.h
+++ b/include/SoundTouch.h
@@ -306,6 +306,15 @@ public:
     virtual uint receiveSamples(uint maxSamples   ///< Remove this many samples from the beginning of pipe.
         ) override;
 
+    /// Returns a pointer to the beginning of the output samples.
+    /// This function is provided for accessing the output samples directly.
+    /// Please be careful for not to corrupt the book-keeping!
+    ///
+    /// When using this function to output samples, also remember to 'remove' the
+    /// output samples from the buffer by calling the
+    /// 'receiveSamples(numSamples)' function
+    SAMPLETYPE *bufBegin();
+
     /// Clears all the samples in the object's output and internal processing
     /// buffers.
     virtual void clear() override;
diff --git a/source/SoundTouch/FIRFilter.cpp b/source/SoundTouch/FIRFilter.cpp
index 6656a58..ff66837 100644
--- a/source/SoundTouch/FIRFilter.cpp
+++ b/source/SoundTouch/FIRFilter.cpp
@@ -283,33 +283,16 @@ void * FIRFilter::operator new(size_t)
 
 FIRFilter * FIRFilter::newInstance()
 {
-    uint uExtensions;
-
-    uExtensions = detectCPUextensions();
-    (void)uExtensions;
-
-    // Check if MMX/SSE instruction set extensions supported by CPU
-
 #ifdef SOUNDTOUCH_ALLOW_MMX
-    // MMX routines available only with integer sample types
-    if (uExtensions & SUPPORT_MMX)
-    {
-        return ::new FIRFilterMMX;
-    }
-    else
+    // MMX routines available only with integer sample type
+    return ::new FIRFilterMMX;
 #endif // SOUNDTOUCH_ALLOW_MMX
 
 #ifdef SOUNDTOUCH_ALLOW_SSE
-    if (uExtensions & SUPPORT_SSE)
-    {
-        // SSE support
-        return ::new FIRFilterSSE;
-    }
-    else
+    // SSE support
+    return ::new FIRFilterSSE;
 #endif // SOUNDTOUCH_ALLOW_SSE
 
-    {
-        // ISA optimizations not supported, use plain C version
-        return ::new FIRFilter;
-    }
+    // ISA optimizations not supported, use plain C version
+    return ::new FIRFilter;
 }
diff --git a/source/SoundTouch/SoundTouch.cpp b/source/SoundTouch/SoundTouch.cpp
index cb161f0..3c973cc 100644
--- a/source/SoundTouch/SoundTouch.cpp
+++ b/source/SoundTouch/SoundTouch.cpp
@@ -528,6 +528,17 @@ uint SoundTouch::receiveSamples(uint maxSamples)
     return ret;
 }
 
+// Returns a pointer to the beginning of the currently non-outputted samples.
+// This function is provided for accessing the output samples directly.
+// Please be careful!
+//
+// When using this function to output samples, also remember to 'remove' the
+// outputted samples from the buffer by calling the
+// 'receiveSamples(numSamples)' function
+SAMPLETYPE *SoundTouch::bufBegin()
+{
+    return pTDStretch->getOutput()->ptrBegin();
+}
 
 /// Get ratio between input and output audio durations, useful for calculating
 /// processed output duration: if you'll process a stream of N samples, then 
diff --git a/source/SoundTouch/TDStretch.cpp b/source/SoundTouch/TDStretch.cpp
index f04dde0..73d0867 100644
--- a/source/SoundTouch/TDStretch.cpp
+++ b/source/SoundTouch/TDStretch.cpp
@@ -750,36 +750,19 @@ void * TDStretch::operator new(size_t)
 
 TDStretch * TDStretch::newInstance()
 {
-    uint uExtensions;
-
-    uExtensions = detectCPUextensions();
-    (void)uExtensions;
-
-    // Check if MMX/SSE instruction set extensions supported by CPU
-
 #ifdef SOUNDTOUCH_ALLOW_MMX
     // MMX routines available only with integer sample types
-    if (uExtensions & SUPPORT_MMX)
-    {
-        return ::new TDStretchMMX;
-    }
-    else
+    return ::new TDStretchMMX;
 #endif // SOUNDTOUCH_ALLOW_MMX
 
 
 #ifdef SOUNDTOUCH_ALLOW_SSE
-    if (uExtensions & SUPPORT_SSE)
-    {
-        // SSE support
-        return ::new TDStretchSSE;
-    }
-    else
+    // SSE support
+    return ::new TDStretchSSE;
 #endif // SOUNDTOUCH_ALLOW_SSE
 
-    {
-        // ISA optimizations not supported, use plain C version
-        return ::new TDStretch;
-    }
+    // ISA optimizations not supported, use plain C version
+    return ::new TDStretch;
 }
 
 
diff --git a/source/SoundTouch/cpu_detect.h b/source/SoundTouch/cpu_detect.h
index 0cdc223..c6dc88c 100644
--- a/source/SoundTouch/cpu_detect.h
+++ b/source/SoundTouch/cpu_detect.h
@@ -33,6 +33,7 @@
 //
 ////////////////////////////////////////////////////////////////////////////////
 
+#if 0
 #ifndef _CPU_DETECT_H_
 #define _CPU_DETECT_H_
 
@@ -53,3 +54,4 @@ uint detectCPUextensions(void);
 void disableExtensions(uint wDisableMask);
 
 #endif  // _CPU_DETECT_H_
+#endif
