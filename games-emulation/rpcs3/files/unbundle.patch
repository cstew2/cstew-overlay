diff --git a/3rdparty/CMakeLists.txt b/3rdparty/CMakeLists.txt
index 6edcd672a..c332dfc9e 100644
--- a/3rdparty/CMakeLists.txt
+++ b/3rdparty/CMakeLists.txt
@@ -192,14 +192,16 @@ if(USE_VULKAN)
 		target_link_libraries(3rdparty_vulkan INTERFACE SPIRV Vulkan::Vulkan)
 
 		if(UNIX AND NOT APPLE)
+		    if(USE_WAYLAND)
 			find_package(Wayland)
-			if (WAYLAND_FOUND)
-				target_include_directories(3rdparty_vulkan
-					INTERFACE ${WAYLAND_INCLUDE_DIR})
+			if(WAYLAND_FOUND)
+			    target_include_directories(3rdparty_vulkan
+			        INTERFACE ${WAYLAND_INCLUDE_DIR})
 
 				target_compile_definitions(3rdparty_vulkan
-					INTERFACE -DVK_USE_PLATFORM_WAYLAND_KHR)
+				    INTERFACE -DVK_USE_PLATFORM_WAYLAND_KHR)
 			endif()
+		    endif()  
 		endif()
 
 		set(VULKAN_TARGET 3rdparty_vulkan)
@@ -390,4 +392,6 @@ add_library(3rdparty::wolfssl ALIAS wolfssl)
 add_library(3rdparty::libcurl ALIAS libcurl)
 add_library(3rdparty::soundtouch ALIAS soundtouch)
 add_library(3rdparty::sdl2 ALIAS ${SDL2_TARGET})
-add_library(3rdparty::miniupnpc ALIAS libminiupnpc-static)
+add_library(3rdparty::miniupnpc ALIAS miniupnpc)
+add_library(3rdparty::cubeb ALIAS 3rdparty_cubeb)
+add_library(3rdparty::asmjit ALIAS 3rdparty_asmjit)
diff --git a/3rdparty/SoundTouch/CMakeLists.txt b/3rdparty/SoundTouch/CMakeLists.txt
index acc7d0271..4a8e0bbe0 100644
--- a/3rdparty/SoundTouch/CMakeLists.txt
+++ b/3rdparty/SoundTouch/CMakeLists.txt
@@ -1,36 +1,43 @@
-add_library(soundtouch STATIC EXCLUDE_FROM_ALL
-	soundtouch/source/SoundTouch/AAFilter.cpp
-	soundtouch/source/SoundTouch/FIFOSampleBuffer.cpp
-	soundtouch/source/SoundTouch/FIRFilter.cpp
-	soundtouch/source/SoundTouch/InterpolateCubic.cpp
-	soundtouch/source/SoundTouch/InterpolateLinear.cpp
-	soundtouch/source/SoundTouch/InterpolateShannon.cpp
-	soundtouch/source/SoundTouch/RateTransposer.cpp
-	soundtouch/source/SoundTouch/SoundTouch.cpp
-	soundtouch/source/SoundTouch/sse_optimized.cpp
-	soundtouch/source/SoundTouch/TDStretch.cpp
-)
+if(USE_SYSTEM_SOUNDTOUCH)
+  message("-- RPCS3: using shared soundtouch")
+  add_library(soundtouch INTERFACE)
+  pkg_check_modules(soundtouch REQUIRED IMPORTED_TARGET soundtouch)
+  target_link_libraries(soundtouch INTERFACE PkgConfig::soundtouch)
+else()
+  add_library(soundtouch STATIC EXCLUDE_FROM_ALL
+    soundtouch/source/SoundTouch/AAFilter.cpp
+    soundtouch/source/SoundTouch/FIFOSampleBuffer.cpp
+    soundtouch/source/SoundTouch/FIRFilter.cpp
+    soundtouch/source/SoundTouch/InterpolateCubic.cpp
+    soundtouch/source/SoundTouch/InterpolateLinear.cpp
+    soundtouch/source/SoundTouch/InterpolateShannon.cpp
+    soundtouch/source/SoundTouch/RateTransposer.cpp
+    soundtouch/source/SoundTouch/SoundTouch.cpp
+    soundtouch/source/SoundTouch/sse_optimized.cpp
+    soundtouch/source/SoundTouch/TDStretch.cpp
+  )
 
-target_include_directories(soundtouch PRIVATE
-	soundtouch/source/SoundTouch
-	soundtouch/include)
+  target_include_directories(soundtouch PRIVATE
+    soundtouch/source/SoundTouch
+    soundtouch/include)
 
-target_include_directories(soundtouch INTERFACE
-	$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/soundtouch/include>
-	$<INSTALL_INTERFACE:/soundtouch/include>)
+  target_include_directories(soundtouch INTERFACE
+    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/soundtouch/include>
+    $<INSTALL_INTERFACE:/soundtouch/include>)
 
-set_property(TARGET soundtouch PROPERTY FOLDER "3rdparty/")
+  set_property(TARGET soundtouch PROPERTY FOLDER "3rdparty/")
 
-target_compile_definitions(soundtouch PUBLIC
-	ST_NO_EXCEPTION_HANDLING
-	USE_MULTICH_ALWAYS
-	SOUNDTOUCH_FLOAT_SAMPLES;
-)
+  target_compile_definitions(soundtouch PUBLIC
+    ST_NO_EXCEPTION_HANDLING
+    USE_MULTICH_ALWAYS
+    SOUNDTOUCH_FLOAT_SAMPLES;
+  )
 
-target_compile_options(soundtouch PRIVATE "-w")
+  target_compile_options(soundtouch PRIVATE "-w")
 
-if (CMAKE_SYSTEM_PROCESSOR MATCHES "^(x86|X86|amd64|AMD64|em64t|EM64T)")
-	target_compile_definitions(soundtouch PUBLIC
-		SOUNDTOUCH_ALLOW_SSE
-	)
-endif ()
+  if (CMAKE_SYSTEM_PROCESSOR MATCHES "^(x86|X86|amd64|AMD64|em64t|EM64T)")
+    target_compile_definitions(soundtouch PUBLIC
+      SOUNDTOUCH_ALLOW_SSE
+    )
+  endif ()
+endif()
diff --git a/3rdparty/asmjit/CMakeLists.txt b/3rdparty/asmjit/CMakeLists.txt
index f1236b2f1..71ba8f976 100644
--- a/3rdparty/asmjit/CMakeLists.txt
+++ b/3rdparty/asmjit/CMakeLists.txt
@@ -1,18 +1,26 @@
-set(ASMJIT_EMBED TRUE)
-set(ASMJIT_STATIC TRUE)
-set(ASMJIT_BUILD_X86 TRUE)
-set(ASMJIT_BUILD_ARM FALSE)
-set(ASMJIT_BUILD_TEST FALSE)
-set(ASMJIT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/asmjit" CACHE PATH "Location of 'asmjit'")
+if(USE_SYSTEM_ASMJIT)
+  message(STATUS "RPCS3: Using system asmjit")
+  add_library(3rdparty_asmjit INTERFACE)
+  find_package(asmjit REQUIRED)
+  target_include_directories(3rdparty_asmjit INTERFACE asmjit)
+  target_link_libraries(3rdparty_asmjit INTERFACE asmjit)
+else()
+  set(ASMJIT_EMBED TRUE)
+  set(ASMJIT_STATIC TRUE)
+  set(ASMJIT_BUILD_X86 TRUE)
+  set(ASMJIT_BUILD_ARM FALSE)
+  set(ASMJIT_BUILD_TEST FALSE)
+  set(ASMJIT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/asmjit" CACHE PATH "Location of 'asmjit'")
 
-include("${ASMJIT_DIR}/CMakeLists.txt")
+  include("${ASMJIT_DIR}/CMakeLists.txt")
 
-add_library(asmjit ${ASMJIT_SRC})
-target_include_directories(asmjit PUBLIC ${ASMJIT_DIR}/src)
-target_link_libraries(asmjit PRIVATE ${ASMJIT_DEPS})
+  add_library(asmjit ${ASMJIT_SRC})
+  target_include_directories(asmjit PUBLIC ${ASMJIT_DIR}/src)
+  target_link_libraries(asmjit PRIVATE ${ASMJIT_DEPS})
 
-# ASMJIT should have a option for disabling installing and this wouldnt
-# be required to avoid installing ASMJIT...
+  # ASMJIT should have a option for disabling installing and this wouldnt
+  # be required to avoid installing ASMJIT...
 
-set_property(TARGET asmjit PROPERTY FOLDER "3rdparty/")
-add_library(3rdparty::asmjit ALIAS asmjit)
+  set_property(TARGET asmjit PROPERTY FOLDER "3rdparty/")
+  add_library(3rdparty::asmjit ALIAS asmjit)
+endif()
diff --git a/3rdparty/cubeb/CMakeLists.txt b/3rdparty/cubeb/CMakeLists.txt
index 6d1f231f0..da3297503 100644
--- a/3rdparty/cubeb/CMakeLists.txt
+++ b/3rdparty/cubeb/CMakeLists.txt
@@ -1,23 +1,30 @@
 # Cubeb
+if(USE_SYSTEM_CUBEB)
+  message(STATUS "RPCS3: Using system cubeb")
+  add_library(3rdparty_cubeb INTERFACE)
+  find_package(cubeb REQUIRED)
+  target_include_directories(3rdparty_cubeb INTERFACE cubeb)
+  target_link_libraries(3rdparty_cubeb INTERFACE cubeb)
+else()
+  set(BUILD_SHARED_LIBS FALSE CACHE BOOL "Don't build shared libs")
+  set(BUILD_TESTS FALSE CACHE BOOL "Don't build tests")
+  set(BUILD_RUST_LIBS FALSE CACHE BOOL "Don't build rust libs")
+  set(BUILD_TOOLS FALSE CACHE BOOL "Don't build tools")
+  set(BUNDLE_SPEEX TRUE CACHE BOOL "Bundle the speex library")
+  set(LAZY_LOAD_LIBS TRUE CACHE BOOL "Lazily load shared libraries")
+  set(USE_SANITIZERS FALSE CACHE BOOL "Dont't use sanitizers")
 
-set(BUILD_SHARED_LIBS FALSE CACHE BOOL "Don't build shared libs")
-set(BUILD_TESTS FALSE CACHE BOOL "Don't build tests")
-set(BUILD_RUST_LIBS FALSE CACHE BOOL "Don't build rust libs")
-set(BUILD_TOOLS FALSE CACHE BOOL "Don't build tools")
-set(BUNDLE_SPEEX TRUE CACHE BOOL "Bundle the speex library")
-set(LAZY_LOAD_LIBS TRUE CACHE BOOL "Lazily load shared libraries")
-set(USE_SANITIZERS FALSE CACHE BOOL "Dont't use sanitizers")
+  add_subdirectory(cubeb EXCLUDE_FROM_ALL)
+  add_library(3rdparty::cubeb ALIAS cubeb)
 
-add_subdirectory(cubeb EXCLUDE_FROM_ALL)
-add_library(3rdparty::cubeb ALIAS cubeb)
-
-if (CMAKE_SYSTEM_PROCESSOR MATCHES "^(arm|ARM|aarch64|AArch64|Aarch64)")
-	target_compile_definitions(speex PUBLIC
-		#_USE_NEON
-	)
-elseif (CMAKE_SYSTEM_PROCESSOR MATCHES "^(x86|X86|amd64|AMD64|em64t|EM64T)")
-	target_compile_definitions(speex PUBLIC
-		_USE_SSE
-		_USE_SSE2
-	)
-endif ()
+  if (CMAKE_SYSTEM_PROCESSOR MATCHES "^(arm|ARM|aarch64|AArch64|Aarch64)")
+    target_compile_definitions(speex PUBLIC
+      #_USE_NEON
+    )
+  elseif (CMAKE_SYSTEM_PROCESSOR MATCHES "^(x86|X86|amd64|AMD64|em64t|EM64T)")
+    target_compile_definitions(speex PUBLIC
+      _USE_SSE
+      _USE_SSE2
+    )
+  endif()
+endif()
diff --git a/3rdparty/glslang/CMakeLists.txt b/3rdparty/glslang/CMakeLists.txt
index 5b6aa8e96..bec53af6c 100644
--- a/3rdparty/glslang/CMakeLists.txt
+++ b/3rdparty/glslang/CMakeLists.txt
@@ -1,11 +1,19 @@
 #glslang
-
-set(ENABLE_PCH OFF CACHE BOOL "Enables Precompiled header" FORCE)
-set(BUILD_EXTERNAL OFF CACHE BOOL "Build external dependencies in /External" FORCE)
-set(SKIP_GLSLANG_INSTALL ON CACHE BOOL "Skip installation" FORCE)
-set(ENABLE_SPVREMAPPER OFF CACHE BOOL "Enables building of SPVRemapper" FORCE)
-set(ENABLE_GLSLANG_BINARIES OFF CACHE BOOL "Builds glslangValidator and spirv-remap" FORCE)
-set(ENABLE_HLSL OFF CACHE BOOL "Enables HLSL input support" FORCE)
-set(ENABLE_OPT OFF CACHE BOOL "Enables spirv-opt capability if present" FORCE)
-set(ENABLE_CTEST OFF CACHE BOOL "Enables testing" FORCE)
-add_subdirectory(glslang)
+if(USE_SYSTEM_GLSLANG)
+  message(STATUS "-- RPCS3: Using system glslang")
+  find_package(glslang REQUIRED)
+  
+  add_library(3rdparty_system_glslang INTERFACE)
+  target_include_directories(3rdparty_system_glslang INTERFACE ${GLSLANG_INCLUDE_DIR})
+  target_link_libraries(3rdparty_system_glslang INTERFACE glslang::glslang)
+else()
+  set(ENABLE_PCH OFF CACHE BOOL "Enables Precompiled header" FORCE)
+  set(BUILD_EXTERNAL OFF CACHE BOOL "Build external dependencies in /External" FORCE)
+  set(SKIP_GLSLANG_INSTALL ON CACHE BOOL "Skip installation" FORCE)
+  set(ENABLE_SPVREMAPPER OFF CACHE BOOL "Enables building of SPVRemapper" FORCE)
+  set(ENABLE_GLSLANG_BINARIES OFF CACHE BOOL "Builds glslangValidator and spirv-remap" FORCE)
+  set(ENABLE_HLSL OFF CACHE BOOL "Enables HLSL input support" FORCE)
+  set(ENABLE_OPT OFF CACHE BOOL "Enables spirv-opt capability if present" FORCE)
+  set(ENABLE_CTEST OFF CACHE BOOL "Enables testing" FORCE)
+  add_subdirectory(glslang)
+endif()
diff --git a/3rdparty/hidapi/CMakeLists.txt b/3rdparty/hidapi/CMakeLists.txt
index 9a7f14ebd..d4b816304 100644
--- a/3rdparty/hidapi/CMakeLists.txt
+++ b/3rdparty/hidapi/CMakeLists.txt
@@ -1,20 +1,26 @@
 # hidapi
-set(BUILD_SHARED_LIBS FALSE CACHE BOOL "Don't build shared libs")
-set(HIDAPI_INSTALL_TARGETS FALSE CACHE BOOL "Don't install anything")
+if (USE_SYSTEM_HIDAPI)
+  message(STATUS "-- RPCS3: Using system hidapi")
+  find_package(hidapi REQUIRED)
+else()
+  set(BUILD_SHARED_LIBS FALSE CACHE BOOL "Don't build shared libs")
+  set(HIDAPI_INSTALL_TARGETS FALSE CACHE BOOL "Don't install anything")
+
+  if(CMAKE_SYSTEM MATCHES "Linux")
+    set(HIDAPI_WITH_LIBUSB FALSE CACHE BOOL "Don't build with libusb for linux")
+  endif()
 
-if(CMAKE_SYSTEM MATCHES "Linux")
-	set(HIDAPI_WITH_LIBUSB FALSE CACHE BOOL "Don't build with libusb for linux")
+  add_subdirectory(hidapi EXCLUDE_FROM_ALL)
 endif()
 
 add_library(3rdparty_hidapi INTERFACE)
-add_subdirectory(hidapi EXCLUDE_FROM_ALL)
-
 if(APPLE)
-	target_link_libraries(3rdparty_hidapi INTERFACE hidapi_darwin "-framework CoreFoundation" "-framework IOKit")
+  target_link_libraries(3rdparty_hidapi INTERFACE hidapi_darwin "-framework CoreFoundation" "-framework IOKit")
 elseif(CMAKE_SYSTEM MATCHES "Linux")
-	target_link_libraries(3rdparty_hidapi INTERFACE hidapi-hidraw udev)
+  target_link_libraries(3rdparty_hidapi INTERFACE hidapi-hidraw udev)
 elseif(WIN32)
-	target_link_libraries(3rdparty_hidapi INTERFACE hidapi-hid Shlwapi.lib)
+  target_link_libraries(3rdparty_hidapi INTERFACE hidapi-hid Shlwapi.lib)
 else()
-	target_link_libraries(3rdparty_hidapi INTERFACE hidapi-libusb usb)
+  target_link_libraries(3rdparty_hidapi INTERFACE hidapi-libusb usb)
 endif()
+target_include_directories(3rdparty_hidapi INTERFACE ${HIDAPI_INCLUDE_DIR})
diff --git a/3rdparty/miniupnp/CMakeLists.txt b/3rdparty/miniupnp/CMakeLists.txt
index 93c3dc55c..64cefe862 100644
--- a/3rdparty/miniupnp/CMakeLists.txt
+++ b/3rdparty/miniupnp/CMakeLists.txt
@@ -1,8 +1,15 @@
-option (UPNPC_BUILD_STATIC "Build static library" TRUE)
-option (UPNPC_BUILD_SHARED "Build shared library" FALSE)
-option (UPNPC_BUILD_TESTS "Build test executables" FALSE)
-option (UPNPC_BUILD_SAMPLE "Build sample executables" FALSE)
-option (NO_GETADDRINFO "Define NO_GETADDRINFO" FALSE)
-option (UPNPC_NO_INSTALL "Disable installation" TRUE)
+if(USE_SYSTEM_MINIUPNPC)
+  message("-- RPCS3: using shared miniupnpc")
+  add_library(miniupnpc INTERFACE)
+  pkg_check_modules(miniupnpc REQUIRED IMPORTED_TARGET miniupnpc)
+  target_link_libraries(miniupnpc INTERFACE PkgConfig::miniupnpc)
+else()
+  option (UPNPC_BUILD_STATIC "Build static library" TRUE)
+  option (UPNPC_BUILD_SHARED "Build shared library" FALSE)
+  option (UPNPC_BUILD_TESTS "Build test executables" FALSE)
+  option (UPNPC_BUILD_SAMPLE "Build sample executables" FALSE)
+  option (NO_GETADDRINFO "Define NO_GETADDRINFO" FALSE)
+  option (UPNPC_NO_INSTALL "Disable installation" TRUE)
 
-add_subdirectory(miniupnp/miniupnpc EXCLUDE_FROM_ALL)
+  add_subdirectory(miniupnp/miniupnpc EXCLUDE_FROM_ALL)
+endif()
diff --git a/3rdparty/wolfssl/CMakeLists.txt b/3rdparty/wolfssl/CMakeLists.txt
index 4b44755c2..ff0d7b941 100644
--- a/3rdparty/wolfssl/CMakeLists.txt
+++ b/3rdparty/wolfssl/CMakeLists.txt
@@ -1,7 +1,7 @@
 if(USE_SYSTEM_WOLFSSL)
-	message("-- RPCS3: using shared wolfssl")
+  message("-- RPCS3: using shared wolfssl")
+  	add_library(wolfssl INTERFACE)
 	pkg_check_modules(WolfSSL REQUIRED IMPORTED_TARGET wolfssl>=4.7.0)
-	add_library(wolfssl INTERFACE)
 	target_link_libraries(wolfssl INTERFACE PkgConfig::WolfSSL)
 else()
 	# TODO(cjj19970505@live.cn)
diff --git a/3rdparty/yaml-cpp/CMakeLists.txt b/3rdparty/yaml-cpp/CMakeLists.txt
index 78792066b..e852fd7e7 100644
--- a/3rdparty/yaml-cpp/CMakeLists.txt
+++ b/3rdparty/yaml-cpp/CMakeLists.txt
@@ -1,14 +1,20 @@
+if(USE_SYSTEM_YAML_CPP)
+  message(STATUS "-- RPCS3: Using system yaml-cpp")
+  add_library(yaml-cpp INTERFACE)
+  pkg_check_modules(yaml-cpp REQUIRED IMPORTED_TARGET yaml-cpp)
+  target_link_libraries(yaml-cpp INTERFACE PkgConfig::yaml-cpp)
+else()
+  # We don't want to install yaml-cpp but its cmake file doesn't have option
+  # to disable it...
+  # So we just install it to a different directory
+  set(YAML_CPP_INSTALL OFF CACHE BOOL "Don't install YAML")
+  set(CMAKE_INSTALL_PREFIX_OLD ${CMAKE_INSTALL_PREFIX})
+  set(CMAKE_INSTALL_PREFIX ${CMAKE_BINARY_DIR}/yaml-cpp_install)
 
-# We don't want to install yaml-cpp but its cmake file doesn't have option
-# to disable it...
-# So we just install it to a different directory
-set(YAML_CPP_INSTALL OFF CACHE BOOL "Don't install YAML")
-set(CMAKE_INSTALL_PREFIX_OLD ${CMAKE_INSTALL_PREFIX})
-set(CMAKE_INSTALL_PREFIX ${CMAKE_BINARY_DIR}/yaml-cpp_install)
+  set(YAML_CPP_BUILD_TESTS OFF CACHE BOOL "Enable testing" FORCE)
+  set(YAML_CPP_BUILD_TOOLS OFF CACHE BOOL "Enable parse tools" FORCE)
+  set(YAML_CPP_BUILD_CONTRIB OFF CACHE BOOL "Enable contrib stuff in library" FORCE)
+  add_subdirectory(yaml-cpp EXCLUDE_FROM_ALL)
 
-set(YAML_CPP_BUILD_TESTS OFF CACHE BOOL "Enable testing" FORCE)
-set(YAML_CPP_BUILD_TOOLS OFF CACHE BOOL "Enable parse tools" FORCE)
-set(YAML_CPP_BUILD_CONTRIB OFF CACHE BOOL "Enable contrib stuff in library" FORCE)
-add_subdirectory(yaml-cpp EXCLUDE_FROM_ALL)
-
-set(CMAKE_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX_OLD})
+  set(CMAKE_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX_OLD})
+endif()
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 94f3925b7..814f26ba6 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -96,12 +96,6 @@ if(NOT CMAKE_SIZEOF_VOID_P EQUAL 8)
     message( FATAL_ERROR "RPCS3 can only be compiled on 64-bit platforms." )
 endif()
 
-find_program(CCACHE_FOUND ccache)
-if(CCACHE_FOUND)
-    set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)
-    set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ccache)
-endif()
-
 if(WIN32)
     add_definitions(-DUNICODE)
     add_definitions(-D_WIN32_WINNT=0x0602)
@@ -112,20 +106,12 @@ if(APPLE AND CMAKE_OSX_ARCHITECTURES STREQUAL "arm64")
     link_directories(/opt/homebrew/lib)
 endif()
 
-# Warnings are silenced for 3rdparty code
-set(CMAKE_CXX_FLAGS -w)
-set(CMAKE_C_FLAGS -w)
-set(LLVM_ENABLE_WARNINGS OFF CACHE BOOL "")
-
 if(MSVC)
     add_compile_options(/wd4530 /utf-8) # C++ exception handler used, but unwind semantics are not enabled
 endif()
 
 add_subdirectory(3rdparty)
 
-unset(CMAKE_CXX_FLAGS)
-unset(CMAKE_C_FLAGS)
-
 if (DISABLE_LTO)
     if (CMAKE_C_FLAGS)
         string(REGEX REPLACE "-flto[^ ]*" "" CMAKE_C_FLAGS ${CMAKE_C_FLAGS})
diff --git a/rpcs3/CMakeLists.txt b/rpcs3/CMakeLists.txt
index e372c6650..978d54deb 100644
--- a/rpcs3/CMakeLists.txt
+++ b/rpcs3/CMakeLists.txt
@@ -113,7 +113,7 @@ endif()
 if(UNIX)
     set(CMAKE_THREAD_PREFER_PTHREAD TRUE)
     find_package(Threads REQUIRED)
-    target_link_libraries(rpcs3 Threads::Threads)
+    target_link_libraries(rpcs3 Threads::Threads udev)
 endif()
 
 if(WIN32)
@@ -200,7 +200,7 @@ endif()
 # Unix installation
 if(UNIX AND NOT APPLE)
     # Install the binary
-    install(TARGETS rpcs3 RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})
+    install(TARGETS rpcs3 rpcs3_emu rpcs3_ui RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})
     # Install the application icon and menu item
     install(FILES rpcs3.svg
         DESTINATION ${CMAKE_INSTALL_DATAROOTDIR}/icons/hicolor/scalable/apps)
diff --git a/rpcs3/Emu/Audio/audio_resampler.h b/rpcs3/Emu/Audio/audio_resampler.h
index 22889cb11..4025acff3 100644
--- a/rpcs3/Emu/Audio/audio_resampler.h
+++ b/rpcs3/Emu/Audio/audio_resampler.h
@@ -7,7 +7,7 @@
 #pragma GCC diagnostic push
 #pragma GCC diagnostic ignored "-Wsuggest-override"
 #endif
-#include "SoundTouch.h"
+#include <SoundTouch.h>
 #ifndef _MSC_VER
 #pragma GCC diagnostic pop
 #endif
diff --git a/rpcs3/Emu/CMakeLists.txt b/rpcs3/Emu/CMakeLists.txt
index d87bf5323..234f0a52a 100644
--- a/rpcs3/Emu/CMakeLists.txt
+++ b/rpcs3/Emu/CMakeLists.txt
@@ -19,6 +19,14 @@ add_library(rpcs3_emu
     IPC_socket.cpp
 )
 
+# defs for soundtouch
+target_compile_definitions(rpcs3_emu
+  PUBLIC
+  ST_NO_EXCEPTION_HANDLING
+  USE_MULTICH_ALWAYS
+  SOUNDTOUCH_FLOAT_SAMPLES
+)
+
 # prevent WolfSSL from warning about not having harden options
 add_compile_definitions(WC_NO_HARDEN)
 
diff --git a/rpcs3/Emu/NP/generated/np2_structs_generated.h b/rpcs3/Emu/NP/generated/np2_structs_generated.h
index 3759926f4..fc6f91bd1 100644
--- a/rpcs3/Emu/NP/generated/np2_structs_generated.h
+++ b/rpcs3/Emu/NP/generated/np2_structs_generated.h
@@ -8,9 +8,9 @@
 
 // Ensure the included flatbuffers.h is the same version as when this file was
 // generated, otherwise it may not be compatible.
-static_assert(FLATBUFFERS_VERSION_MAJOR == 2 &&
-              FLATBUFFERS_VERSION_MINOR == 0 &&
-              FLATBUFFERS_VERSION_REVISION == 8,
+static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
+              FLATBUFFERS_VERSION_MINOR == 3 &&
+              FLATBUFFERS_VERSION_REVISION == 3,
              "Non-compatible flatbuffers version included");
 
 struct BinAttr;
@@ -151,7 +151,7 @@ struct RecordScoreGameDataRequestBuilder;
 struct GetScoreGameDataRequest;
 struct GetScoreGameDataRequestBuilder;
 
-struct BinAttr FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+struct BinAttr FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
   typedef BinAttrBuilder Builder;
   enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_ID = 4,
@@ -160,10 +160,10 @@ struct BinAttr FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
   uint16_t id() const {
     return GetField<uint16_t>(VT_ID, 0);
   }
-  const flatbuffers::Vector<uint8_t> *data() const {
-    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
+  const ::flatbuffers::Vector<uint8_t> *data() const {
+    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_DATA);
   }
-  bool Verify(flatbuffers::Verifier &verifier) const {
+  bool Verify(::flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
            VerifyField<uint16_t>(verifier, VT_ID, 2) &&
            VerifyOffset(verifier, VT_DATA) &&
@@ -174,37 +174,37 @@ struct BinAttr FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
 
 struct BinAttrBuilder {
   typedef BinAttr Table;
-  flatbuffers::FlatBufferBuilder &fbb_;
-  flatbuffers::uoffset_t start_;
+  ::flatbuffers::FlatBufferBuilder &fbb_;
+  ::flatbuffers::uoffset_t start_;
   void add_id(uint16_t id) {
     fbb_.AddElement<uint16_t>(BinAttr::VT_ID, id, 0);
   }
-  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data) {
+  void add_data(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data) {
     fbb_.AddOffset(BinAttr::VT_DATA, data);
   }
-  explicit BinAttrBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+  explicit BinAttrBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
         : fbb_(_fbb) {
     start_ = fbb_.StartTable();
   }
-  flatbuffers::Offset<BinAttr> Finish() {
+  ::flatbuffers::Offset<BinAttr> Finish() {
     const auto end = fbb_.EndTable(start_);
-    auto o = flatbuffers::Offset<BinAttr>(end);
+    auto o = ::flatbuffers::Offset<BinAttr>(end);
     return o;
   }
 };
 
-inline flatbuffers::Offset<BinAttr> CreateBinAttr(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<BinAttr> CreateBinAttr(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     uint16_t id = 0,
-    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data = 0) {
+    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data = 0) {
   BinAttrBuilder builder_(_fbb);
   builder_.add_data(data);
   builder_.add_id(id);
   return builder_.Finish();
 }
 
-inline flatbuffers::Offset<BinAttr> CreateBinAttrDirect(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<BinAttr> CreateBinAttrDirect(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     uint16_t id = 0,
     const std::vector<uint8_t> *data = nullptr) {
   auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
@@ -214,7 +214,7 @@ inline flatbuffers::Offset<BinAttr> CreateBinAttrDirect(
       data__);
 }
 
-struct IntAttr FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+struct IntAttr FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
   typedef IntAttrBuilder Builder;
   enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_ID = 4,
@@ -226,7 +226,7 @@ struct IntAttr FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
   uint32_t num() const {
     return GetField<uint32_t>(VT_NUM, 0);
   }
-  bool Verify(flatbuffers::Verifier &verifier) const {
+  bool Verify(::flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
            VerifyField<uint16_t>(verifier, VT_ID, 2) &&
            VerifyField<uint32_t>(verifier, VT_NUM, 4) &&
@@ -236,27 +236,27 @@ struct IntAttr FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
 
 struct IntAttrBuilder {
   typedef IntAttr Table;
-  flatbuffers::FlatBufferBuilder &fbb_;
-  flatbuffers::uoffset_t start_;
+  ::flatbuffers::FlatBufferBuilder &fbb_;
+  ::flatbuffers::uoffset_t start_;
   void add_id(uint16_t id) {
     fbb_.AddElement<uint16_t>(IntAttr::VT_ID, id, 0);
   }
   void add_num(uint32_t num) {
     fbb_.AddElement<uint32_t>(IntAttr::VT_NUM, num, 0);
   }
-  explicit IntAttrBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+  explicit IntAttrBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
         : fbb_(_fbb) {
     start_ = fbb_.StartTable();
   }
-  flatbuffers::Offset<IntAttr> Finish() {
+  ::flatbuffers::Offset<IntAttr> Finish() {
     const auto end = fbb_.EndTable(start_);
-    auto o = flatbuffers::Offset<IntAttr>(end);
+    auto o = ::flatbuffers::Offset<IntAttr>(end);
     return o;
   }
 };
 
-inline flatbuffers::Offset<IntAttr> CreateIntAttr(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<IntAttr> CreateIntAttr(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     uint16_t id = 0,
     uint32_t num = 0) {
   IntAttrBuilder builder_(_fbb);
@@ -265,7 +265,7 @@ inline flatbuffers::Offset<IntAttr> CreateIntAttr(
   return builder_.Finish();
 }
 
-struct RoomMemberBinAttrInternal FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+struct RoomMemberBinAttrInternal FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
   typedef RoomMemberBinAttrInternalBuilder Builder;
   enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_UPDATEDATE = 4,
@@ -277,7 +277,7 @@ struct RoomMemberBinAttrInternal FLATBUFFERS_FINAL_CLASS : private flatbuffers::
   const BinAttr *data() const {
     return GetPointer<const BinAttr *>(VT_DATA);
   }
-  bool Verify(flatbuffers::Verifier &verifier) const {
+  bool Verify(::flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
            VerifyField<uint64_t>(verifier, VT_UPDATEDATE, 8) &&
            VerifyOffset(verifier, VT_DATA) &&
@@ -288,36 +288,36 @@ struct RoomMemberBinAttrInternal FLATBUFFERS_FINAL_CLASS : private flatbuffers::
 
 struct RoomMemberBinAttrInternalBuilder {
   typedef RoomMemberBinAttrInternal Table;
-  flatbuffers::FlatBufferBuilder &fbb_;
-  flatbuffers::uoffset_t start_;
+  ::flatbuffers::FlatBufferBuilder &fbb_;
+  ::flatbuffers::uoffset_t start_;
   void add_updateDate(uint64_t updateDate) {
     fbb_.AddElement<uint64_t>(RoomMemberBinAttrInternal::VT_UPDATEDATE, updateDate, 0);
   }
-  void add_data(flatbuffers::Offset<BinAttr> data) {
+  void add_data(::flatbuffers::Offset<BinAttr> data) {
     fbb_.AddOffset(RoomMemberBinAttrInternal::VT_DATA, data);
   }
-  explicit RoomMemberBinAttrInternalBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+  explicit RoomMemberBinAttrInternalBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
         : fbb_(_fbb) {
     start_ = fbb_.StartTable();
   }
-  flatbuffers::Offset<RoomMemberBinAttrInternal> Finish() {
+  ::flatbuffers::Offset<RoomMemberBinAttrInternal> Finish() {
     const auto end = fbb_.EndTable(start_);
-    auto o = flatbuffers::Offset<RoomMemberBinAttrInternal>(end);
+    auto o = ::flatbuffers::Offset<RoomMemberBinAttrInternal>(end);
     return o;
   }
 };
 
-inline flatbuffers::Offset<RoomMemberBinAttrInternal> CreateRoomMemberBinAttrInternal(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<RoomMemberBinAttrInternal> CreateRoomMemberBinAttrInternal(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     uint64_t updateDate = 0,
-    flatbuffers::Offset<BinAttr> data = 0) {
+    ::flatbuffers::Offset<BinAttr> data = 0) {
   RoomMemberBinAttrInternalBuilder builder_(_fbb);
   builder_.add_updateDate(updateDate);
   builder_.add_data(data);
   return builder_.Finish();
 }
 
-struct BinAttrInternal FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+struct BinAttrInternal FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
   typedef BinAttrInternalBuilder Builder;
   enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_UPDATEDATE = 4,
@@ -333,7 +333,7 @@ struct BinAttrInternal FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
   const BinAttr *data() const {
     return GetPointer<const BinAttr *>(VT_DATA);
   }
-  bool Verify(flatbuffers::Verifier &verifier) const {
+  bool Verify(::flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
            VerifyField<uint64_t>(verifier, VT_UPDATEDATE, 8) &&
            VerifyField<uint16_t>(verifier, VT_UPDATEMEMBERID, 2) &&
@@ -345,33 +345,33 @@ struct BinAttrInternal FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
 
 struct BinAttrInternalBuilder {
   typedef BinAttrInternal Table;
-  flatbuffers::FlatBufferBuilder &fbb_;
-  flatbuffers::uoffset_t start_;
+  ::flatbuffers::FlatBufferBuilder &fbb_;
+  ::flatbuffers::uoffset_t start_;
   void add_updateDate(uint64_t updateDate) {
     fbb_.AddElement<uint64_t>(BinAttrInternal::VT_UPDATEDATE, updateDate, 0);
   }
   void add_updateMemberId(uint16_t updateMemberId) {
     fbb_.AddElement<uint16_t>(BinAttrInternal::VT_UPDATEMEMBERID, updateMemberId, 0);
   }
-  void add_data(flatbuffers::Offset<BinAttr> data) {
+  void add_data(::flatbuffers::Offset<BinAttr> data) {
     fbb_.AddOffset(BinAttrInternal::VT_DATA, data);
   }
-  explicit BinAttrInternalBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+  explicit BinAttrInternalBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
         : fbb_(_fbb) {
     start_ = fbb_.StartTable();
   }
-  flatbuffers::Offset<BinAttrInternal> Finish() {
+  ::flatbuffers::Offset<BinAttrInternal> Finish() {
     const auto end = fbb_.EndTable(start_);
-    auto o = flatbuffers::Offset<BinAttrInternal>(end);
+    auto o = ::flatbuffers::Offset<BinAttrInternal>(end);
     return o;
   }
 };
 
-inline flatbuffers::Offset<BinAttrInternal> CreateBinAttrInternal(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<BinAttrInternal> CreateBinAttrInternal(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     uint64_t updateDate = 0,
     uint16_t updateMemberId = 0,
-    flatbuffers::Offset<BinAttr> data = 0) {
+    ::flatbuffers::Offset<BinAttr> data = 0) {
   BinAttrInternalBuilder builder_(_fbb);
   builder_.add_updateDate(updateDate);
   builder_.add_data(data);
@@ -379,7 +379,7 @@ inline flatbuffers::Offset<BinAttrInternal> CreateBinAttrInternal(
   return builder_.Finish();
 }
 
-struct OptParam FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+struct OptParam FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
   typedef OptParamBuilder Builder;
   enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_TYPE = 4,
@@ -395,7 +395,7 @@ struct OptParam FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
   uint16_t hubMemberId() const {
     return GetField<uint16_t>(VT_HUBMEMBERID, 0);
   }
-  bool Verify(flatbuffers::Verifier &verifier) const {
+  bool Verify(::flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
            VerifyField<uint8_t>(verifier, VT_TYPE, 1) &&
            VerifyField<uint8_t>(verifier, VT_FLAG, 1) &&
@@ -406,8 +406,8 @@ struct OptParam FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
 
 struct OptParamBuilder {
   typedef OptParam Table;
-  flatbuffers::FlatBufferBuilder &fbb_;
-  flatbuffers::uoffset_t start_;
+  ::flatbuffers::FlatBufferBuilder &fbb_;
+  ::flatbuffers::uoffset_t start_;
   void add_type(uint8_t type) {
     fbb_.AddElement<uint8_t>(OptParam::VT_TYPE, type, 0);
   }
@@ -417,19 +417,19 @@ struct OptParamBuilder {
   void add_hubMemberId(uint16_t hubMemberId) {
     fbb_.AddElement<uint16_t>(OptParam::VT_HUBMEMBERID, hubMemberId, 0);
   }
-  explicit OptParamBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+  explicit OptParamBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
         : fbb_(_fbb) {
     start_ = fbb_.StartTable();
   }
-  flatbuffers::Offset<OptParam> Finish() {
+  ::flatbuffers::Offset<OptParam> Finish() {
     const auto end = fbb_.EndTable(start_);
-    auto o = flatbuffers::Offset<OptParam>(end);
+    auto o = ::flatbuffers::Offset<OptParam>(end);
     return o;
   }
 };
 
-inline flatbuffers::Offset<OptParam> CreateOptParam(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<OptParam> CreateOptParam(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     uint8_t type = 0,
     uint8_t flag = 0,
     uint16_t hubMemberId = 0) {
@@ -440,7 +440,7 @@ inline flatbuffers::Offset<OptParam> CreateOptParam(
   return builder_.Finish();
 }
 
-struct GroupConfig FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+struct GroupConfig FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
   typedef GroupConfigBuilder Builder;
   enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_SLOTNUM = 4,
@@ -454,13 +454,13 @@ struct GroupConfig FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
   bool withLabel() const {
     return GetField<uint8_t>(VT_WITHLABEL, 0) != 0;
   }
-  const flatbuffers::Vector<uint8_t> *label() const {
-    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_LABEL);
+  const ::flatbuffers::Vector<uint8_t> *label() const {
+    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_LABEL);
   }
   bool withPassword() const {
     return GetField<uint8_t>(VT_WITHPASSWORD, 0) != 0;
   }
-  bool Verify(flatbuffers::Verifier &verifier) const {
+  bool Verify(::flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
            VerifyField<uint32_t>(verifier, VT_SLOTNUM, 4) &&
            VerifyField<uint8_t>(verifier, VT_WITHLABEL, 1) &&
@@ -473,36 +473,36 @@ struct GroupConfig FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
 
 struct GroupConfigBuilder {
   typedef GroupConfig Table;
-  flatbuffers::FlatBufferBuilder &fbb_;
-  flatbuffers::uoffset_t start_;
+  ::flatbuffers::FlatBufferBuilder &fbb_;
+  ::flatbuffers::uoffset_t start_;
   void add_slotNum(uint32_t slotNum) {
     fbb_.AddElement<uint32_t>(GroupConfig::VT_SLOTNUM, slotNum, 0);
   }
   void add_withLabel(bool withLabel) {
     fbb_.AddElement<uint8_t>(GroupConfig::VT_WITHLABEL, static_cast<uint8_t>(withLabel), 0);
   }
-  void add_label(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> label) {
+  void add_label(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> label) {
     fbb_.AddOffset(GroupConfig::VT_LABEL, label);
   }
   void add_withPassword(bool withPassword) {
     fbb_.AddElement<uint8_t>(GroupConfig::VT_WITHPASSWORD, static_cast<uint8_t>(withPassword), 0);
   }
-  explicit GroupConfigBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+  explicit GroupConfigBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
         : fbb_(_fbb) {
     start_ = fbb_.StartTable();
   }
-  flatbuffers::Offset<GroupConfig> Finish() {
+  ::flatbuffers::Offset<GroupConfig> Finish() {
     const auto end = fbb_.EndTable(start_);
-    auto o = flatbuffers::Offset<GroupConfig>(end);
+    auto o = ::flatbuffers::Offset<GroupConfig>(end);
     return o;
   }
 };
 
-inline flatbuffers::Offset<GroupConfig> CreateGroupConfig(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<GroupConfig> CreateGroupConfig(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     uint32_t slotNum = 0,
     bool withLabel = false,
-    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> label = 0,
+    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> label = 0,
     bool withPassword = false) {
   GroupConfigBuilder builder_(_fbb);
   builder_.add_label(label);
@@ -512,8 +512,8 @@ inline flatbuffers::Offset<GroupConfig> CreateGroupConfig(
   return builder_.Finish();
 }
 
-inline flatbuffers::Offset<GroupConfig> CreateGroupConfigDirect(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<GroupConfig> CreateGroupConfigDirect(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     uint32_t slotNum = 0,
     bool withLabel = false,
     const std::vector<uint8_t> *label = nullptr,
@@ -527,23 +527,23 @@ inline flatbuffers::Offset<GroupConfig> CreateGroupConfigDirect(
       withPassword);
 }
 
-struct UserInfo2 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+struct UserInfo2 FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
   typedef UserInfo2Builder Builder;
   enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_NPID = 4,
     VT_ONLINENAME = 6,
     VT_AVATARURL = 8
   };
-  const flatbuffers::String *npId() const {
-    return GetPointer<const flatbuffers::String *>(VT_NPID);
+  const ::flatbuffers::String *npId() const {
+    return GetPointer<const ::flatbuffers::String *>(VT_NPID);
   }
-  const flatbuffers::String *onlineName() const {
-    return GetPointer<const flatbuffers::String *>(VT_ONLINENAME);
+  const ::flatbuffers::String *onlineName() const {
+    return GetPointer<const ::flatbuffers::String *>(VT_ONLINENAME);
   }
-  const flatbuffers::String *avatarUrl() const {
-    return GetPointer<const flatbuffers::String *>(VT_AVATARURL);
+  const ::flatbuffers::String *avatarUrl() const {
+    return GetPointer<const ::flatbuffers::String *>(VT_AVATARURL);
   }
-  bool Verify(flatbuffers::Verifier &verifier) const {
+  bool Verify(::flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
            VerifyOffset(verifier, VT_NPID) &&
            verifier.VerifyString(npId()) &&
@@ -557,33 +557,33 @@ struct UserInfo2 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
 
 struct UserInfo2Builder {
   typedef UserInfo2 Table;
-  flatbuffers::FlatBufferBuilder &fbb_;
-  flatbuffers::uoffset_t start_;
-  void add_npId(flatbuffers::Offset<flatbuffers::String> npId) {
+  ::flatbuffers::FlatBufferBuilder &fbb_;
+  ::flatbuffers::uoffset_t start_;
+  void add_npId(::flatbuffers::Offset<::flatbuffers::String> npId) {
     fbb_.AddOffset(UserInfo2::VT_NPID, npId);
   }
-  void add_onlineName(flatbuffers::Offset<flatbuffers::String> onlineName) {
+  void add_onlineName(::flatbuffers::Offset<::flatbuffers::String> onlineName) {
     fbb_.AddOffset(UserInfo2::VT_ONLINENAME, onlineName);
   }
-  void add_avatarUrl(flatbuffers::Offset<flatbuffers::String> avatarUrl) {
+  void add_avatarUrl(::flatbuffers::Offset<::flatbuffers::String> avatarUrl) {
     fbb_.AddOffset(UserInfo2::VT_AVATARURL, avatarUrl);
   }
-  explicit UserInfo2Builder(flatbuffers::FlatBufferBuilder &_fbb)
+  explicit UserInfo2Builder(::flatbuffers::FlatBufferBuilder &_fbb)
         : fbb_(_fbb) {
     start_ = fbb_.StartTable();
   }
-  flatbuffers::Offset<UserInfo2> Finish() {
+  ::flatbuffers::Offset<UserInfo2> Finish() {
     const auto end = fbb_.EndTable(start_);
-    auto o = flatbuffers::Offset<UserInfo2>(end);
+    auto o = ::flatbuffers::Offset<UserInfo2>(end);
     return o;
   }
 };
 
-inline flatbuffers::Offset<UserInfo2> CreateUserInfo2(
-    flatbuffers::FlatBufferBuilder &_fbb,
-    flatbuffers::Offset<flatbuffers::String> npId = 0,
-    flatbuffers::Offset<flatbuffers::String> onlineName = 0,
-    flatbuffers::Offset<flatbuffers::String> avatarUrl = 0) {
+inline ::flatbuffers::Offset<UserInfo2> CreateUserInfo2(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
+    ::flatbuffers::Offset<::flatbuffers::String> npId = 0,
+    ::flatbuffers::Offset<::flatbuffers::String> onlineName = 0,
+    ::flatbuffers::Offset<::flatbuffers::String> avatarUrl = 0) {
   UserInfo2Builder builder_(_fbb);
   builder_.add_avatarUrl(avatarUrl);
   builder_.add_onlineName(onlineName);
@@ -591,8 +591,8 @@ inline flatbuffers::Offset<UserInfo2> CreateUserInfo2(
   return builder_.Finish();
 }
 
-inline flatbuffers::Offset<UserInfo2> CreateUserInfo2Direct(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<UserInfo2> CreateUserInfo2Direct(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     const char *npId = nullptr,
     const char *onlineName = nullptr,
     const char *avatarUrl = nullptr) {
@@ -606,7 +606,7 @@ inline flatbuffers::Offset<UserInfo2> CreateUserInfo2Direct(
       avatarUrl__);
 }
 
-struct RoomMemberDataInternal FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+struct RoomMemberDataInternal FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
   typedef RoomMemberDataInternalBuilder Builder;
   enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_USERINFO = 4,
@@ -639,10 +639,10 @@ struct RoomMemberDataInternal FLATBUFFERS_FINAL_CLASS : private flatbuffers::Tab
   uint32_t flagAttr() const {
     return GetField<uint32_t>(VT_FLAGATTR, 0);
   }
-  const flatbuffers::Vector<flatbuffers::Offset<RoomMemberBinAttrInternal>> *roomMemberBinAttrInternal() const {
-    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<RoomMemberBinAttrInternal>> *>(VT_ROOMMEMBERBINATTRINTERNAL);
+  const ::flatbuffers::Vector<::flatbuffers::Offset<RoomMemberBinAttrInternal>> *roomMemberBinAttrInternal() const {
+    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<RoomMemberBinAttrInternal>> *>(VT_ROOMMEMBERBINATTRINTERNAL);
   }
-  bool Verify(flatbuffers::Verifier &verifier) const {
+  bool Verify(::flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
            VerifyOffset(verifier, VT_USERINFO) &&
            verifier.VerifyTable(userInfo()) &&
@@ -662,9 +662,9 @@ struct RoomMemberDataInternal FLATBUFFERS_FINAL_CLASS : private flatbuffers::Tab
 
 struct RoomMemberDataInternalBuilder {
   typedef RoomMemberDataInternal Table;
-  flatbuffers::FlatBufferBuilder &fbb_;
-  flatbuffers::uoffset_t start_;
-  void add_userInfo(flatbuffers::Offset<UserInfo2> userInfo) {
+  ::flatbuffers::FlatBufferBuilder &fbb_;
+  ::flatbuffers::uoffset_t start_;
+  void add_userInfo(::flatbuffers::Offset<UserInfo2> userInfo) {
     fbb_.AddOffset(RoomMemberDataInternal::VT_USERINFO, userInfo);
   }
   void add_joinDate(uint64_t joinDate) {
@@ -676,7 +676,7 @@ struct RoomMemberDataInternalBuilder {
   void add_teamId(uint8_t teamId) {
     fbb_.AddElement<uint8_t>(RoomMemberDataInternal::VT_TEAMID, teamId, 0);
   }
-  void add_roomGroup(flatbuffers::Offset<RoomGroup> roomGroup) {
+  void add_roomGroup(::flatbuffers::Offset<RoomGroup> roomGroup) {
     fbb_.AddOffset(RoomMemberDataInternal::VT_ROOMGROUP, roomGroup);
   }
   void add_natType(uint8_t natType) {
@@ -685,30 +685,30 @@ struct RoomMemberDataInternalBuilder {
   void add_flagAttr(uint32_t flagAttr) {
     fbb_.AddElement<uint32_t>(RoomMemberDataInternal::VT_FLAGATTR, flagAttr, 0);
   }
-  void add_roomMemberBinAttrInternal(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RoomMemberBinAttrInternal>>> roomMemberBinAttrInternal) {
+  void add_roomMemberBinAttrInternal(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<RoomMemberBinAttrInternal>>> roomMemberBinAttrInternal) {
     fbb_.AddOffset(RoomMemberDataInternal::VT_ROOMMEMBERBINATTRINTERNAL, roomMemberBinAttrInternal);
   }
-  explicit RoomMemberDataInternalBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+  explicit RoomMemberDataInternalBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
         : fbb_(_fbb) {
     start_ = fbb_.StartTable();
   }
-  flatbuffers::Offset<RoomMemberDataInternal> Finish() {
+  ::flatbuffers::Offset<RoomMemberDataInternal> Finish() {
     const auto end = fbb_.EndTable(start_);
-    auto o = flatbuffers::Offset<RoomMemberDataInternal>(end);
+    auto o = ::flatbuffers::Offset<RoomMemberDataInternal>(end);
     return o;
   }
 };
 
-inline flatbuffers::Offset<RoomMemberDataInternal> CreateRoomMemberDataInternal(
-    flatbuffers::FlatBufferBuilder &_fbb,
-    flatbuffers::Offset<UserInfo2> userInfo = 0,
+inline ::flatbuffers::Offset<RoomMemberDataInternal> CreateRoomMemberDataInternal(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
+    ::flatbuffers::Offset<UserInfo2> userInfo = 0,
     uint64_t joinDate = 0,
     uint16_t memberId = 0,
     uint8_t teamId = 0,
-    flatbuffers::Offset<RoomGroup> roomGroup = 0,
+    ::flatbuffers::Offset<RoomGroup> roomGroup = 0,
     uint8_t natType = 0,
     uint32_t flagAttr = 0,
-    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RoomMemberBinAttrInternal>>> roomMemberBinAttrInternal = 0) {
+    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<RoomMemberBinAttrInternal>>> roomMemberBinAttrInternal = 0) {
   RoomMemberDataInternalBuilder builder_(_fbb);
   builder_.add_joinDate(joinDate);
   builder_.add_roomMemberBinAttrInternal(roomMemberBinAttrInternal);
@@ -721,17 +721,17 @@ inline flatbuffers::Offset<RoomMemberDataInternal> CreateRoomMemberDataInternal(
   return builder_.Finish();
 }
 
-inline flatbuffers::Offset<RoomMemberDataInternal> CreateRoomMemberDataInternalDirect(
-    flatbuffers::FlatBufferBuilder &_fbb,
-    flatbuffers::Offset<UserInfo2> userInfo = 0,
+inline ::flatbuffers::Offset<RoomMemberDataInternal> CreateRoomMemberDataInternalDirect(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
+    ::flatbuffers::Offset<UserInfo2> userInfo = 0,
     uint64_t joinDate = 0,
     uint16_t memberId = 0,
     uint8_t teamId = 0,
-    flatbuffers::Offset<RoomGroup> roomGroup = 0,
+    ::flatbuffers::Offset<RoomGroup> roomGroup = 0,
     uint8_t natType = 0,
     uint32_t flagAttr = 0,
-    const std::vector<flatbuffers::Offset<RoomMemberBinAttrInternal>> *roomMemberBinAttrInternal = nullptr) {
-  auto roomMemberBinAttrInternal__ = roomMemberBinAttrInternal ? _fbb.CreateVector<flatbuffers::Offset<RoomMemberBinAttrInternal>>(*roomMemberBinAttrInternal) : 0;
+    const std::vector<::flatbuffers::Offset<RoomMemberBinAttrInternal>> *roomMemberBinAttrInternal = nullptr) {
+  auto roomMemberBinAttrInternal__ = roomMemberBinAttrInternal ? _fbb.CreateVector<::flatbuffers::Offset<RoomMemberBinAttrInternal>>(*roomMemberBinAttrInternal) : 0;
   return CreateRoomMemberDataInternal(
       _fbb,
       userInfo,
@@ -744,7 +744,7 @@ inline flatbuffers::Offset<RoomMemberDataInternal> CreateRoomMemberDataInternalD
       roomMemberBinAttrInternal__);
 }
 
-struct RoomGroup FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+struct RoomGroup FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
   typedef RoomGroupBuilder Builder;
   enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_GROUPID = 4,
@@ -763,8 +763,8 @@ struct RoomGroup FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
   bool withLabel() const {
     return GetField<uint8_t>(VT_WITHLABEL, 0) != 0;
   }
-  const flatbuffers::Vector<uint8_t> *label() const {
-    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_LABEL);
+  const ::flatbuffers::Vector<uint8_t> *label() const {
+    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_LABEL);
   }
   uint32_t slotNum() const {
     return GetField<uint32_t>(VT_SLOTNUM, 0);
@@ -772,7 +772,7 @@ struct RoomGroup FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
   uint32_t curGroupMemberNum() const {
     return GetField<uint32_t>(VT_CURGROUPMEMBERNUM, 0);
   }
-  bool Verify(flatbuffers::Verifier &verifier) const {
+  bool Verify(::flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
            VerifyField<uint8_t>(verifier, VT_GROUPID, 1) &&
            VerifyField<uint8_t>(verifier, VT_WITHPASSWORD, 1) &&
@@ -787,8 +787,8 @@ struct RoomGroup FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
 
 struct RoomGroupBuilder {
   typedef RoomGroup Table;
-  flatbuffers::FlatBufferBuilder &fbb_;
-  flatbuffers::uoffset_t start_;
+  ::flatbuffers::FlatBufferBuilder &fbb_;
+  ::flatbuffers::uoffset_t start_;
   void add_groupId(uint8_t groupId) {
     fbb_.AddElement<uint8_t>(RoomGroup::VT_GROUPID, groupId, 0);
   }
@@ -798,7 +798,7 @@ struct RoomGroupBuilder {
   void add_withLabel(bool withLabel) {
     fbb_.AddElement<uint8_t>(RoomGroup::VT_WITHLABEL, static_cast<uint8_t>(withLabel), 0);
   }
-  void add_label(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> label) {
+  void add_label(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> label) {
     fbb_.AddOffset(RoomGroup::VT_LABEL, label);
   }
   void add_slotNum(uint32_t slotNum) {
@@ -807,23 +807,23 @@ struct RoomGroupBuilder {
   void add_curGroupMemberNum(uint32_t curGroupMemberNum) {
     fbb_.AddElement<uint32_t>(RoomGroup::VT_CURGROUPMEMBERNUM, curGroupMemberNum, 0);
   }
-  explicit RoomGroupBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+  explicit RoomGroupBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
         : fbb_(_fbb) {
     start_ = fbb_.StartTable();
   }
-  flatbuffers::Offset<RoomGroup> Finish() {
+  ::flatbuffers::Offset<RoomGroup> Finish() {
     const auto end = fbb_.EndTable(start_);
-    auto o = flatbuffers::Offset<RoomGroup>(end);
+    auto o = ::flatbuffers::Offset<RoomGroup>(end);
     return o;
   }
 };
 
-inline flatbuffers::Offset<RoomGroup> CreateRoomGroup(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<RoomGroup> CreateRoomGroup(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     uint8_t groupId = 0,
     bool withPassword = false,
     bool withLabel = false,
-    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> label = 0,
+    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> label = 0,
     uint32_t slotNum = 0,
     uint32_t curGroupMemberNum = 0) {
   RoomGroupBuilder builder_(_fbb);
@@ -836,8 +836,8 @@ inline flatbuffers::Offset<RoomGroup> CreateRoomGroup(
   return builder_.Finish();
 }
 
-inline flatbuffers::Offset<RoomGroup> CreateRoomGroupDirect(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<RoomGroup> CreateRoomGroupDirect(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     uint8_t groupId = 0,
     bool withPassword = false,
     bool withLabel = false,
@@ -855,7 +855,7 @@ inline flatbuffers::Offset<RoomGroup> CreateRoomGroupDirect(
       curGroupMemberNum);
 }
 
-struct RoomDataInternal FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+struct RoomDataInternal FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
   typedef RoomDataInternalBuilder Builder;
   enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_SERVERID = 4,
@@ -888,22 +888,22 @@ struct RoomDataInternal FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
   uint32_t maxSlot() const {
     return GetField<uint32_t>(VT_MAXSLOT, 0);
   }
-  const flatbuffers::Vector<flatbuffers::Offset<RoomMemberDataInternal>> *memberList() const {
-    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<RoomMemberDataInternal>> *>(VT_MEMBERLIST);
+  const ::flatbuffers::Vector<::flatbuffers::Offset<RoomMemberDataInternal>> *memberList() const {
+    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<RoomMemberDataInternal>> *>(VT_MEMBERLIST);
   }
   uint16_t ownerId() const {
     return GetField<uint16_t>(VT_OWNERID, 0);
   }
-  const flatbuffers::Vector<flatbuffers::Offset<RoomGroup>> *roomGroup() const {
-    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<RoomGroup>> *>(VT_ROOMGROUP);
+  const ::flatbuffers::Vector<::flatbuffers::Offset<RoomGroup>> *roomGroup() const {
+    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<RoomGroup>> *>(VT_ROOMGROUP);
   }
   uint32_t flagAttr() const {
     return GetField<uint32_t>(VT_FLAGATTR, 0);
   }
-  const flatbuffers::Vector<flatbuffers::Offset<BinAttrInternal>> *roomBinAttrInternal() const {
-    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<BinAttrInternal>> *>(VT_ROOMBINATTRINTERNAL);
+  const ::flatbuffers::Vector<::flatbuffers::Offset<BinAttrInternal>> *roomBinAttrInternal() const {
+    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<BinAttrInternal>> *>(VT_ROOMBINATTRINTERNAL);
   }
-  bool Verify(flatbuffers::Verifier &verifier) const {
+  bool Verify(::flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
            VerifyField<uint16_t>(verifier, VT_SERVERID, 2) &&
            VerifyField<uint32_t>(verifier, VT_WORLDID, 4) &&
@@ -928,8 +928,8 @@ struct RoomDataInternal FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
 
 struct RoomDataInternalBuilder {
   typedef RoomDataInternal Table;
-  flatbuffers::FlatBufferBuilder &fbb_;
-  flatbuffers::uoffset_t start_;
+  ::flatbuffers::FlatBufferBuilder &fbb_;
+  ::flatbuffers::uoffset_t start_;
   void add_serverId(uint16_t serverId) {
     fbb_.AddElement<uint16_t>(RoomDataInternal::VT_SERVERID, serverId, 0);
   }
@@ -948,45 +948,45 @@ struct RoomDataInternalBuilder {
   void add_maxSlot(uint32_t maxSlot) {
     fbb_.AddElement<uint32_t>(RoomDataInternal::VT_MAXSLOT, maxSlot, 0);
   }
-  void add_memberList(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RoomMemberDataInternal>>> memberList) {
+  void add_memberList(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<RoomMemberDataInternal>>> memberList) {
     fbb_.AddOffset(RoomDataInternal::VT_MEMBERLIST, memberList);
   }
   void add_ownerId(uint16_t ownerId) {
     fbb_.AddElement<uint16_t>(RoomDataInternal::VT_OWNERID, ownerId, 0);
   }
-  void add_roomGroup(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RoomGroup>>> roomGroup) {
+  void add_roomGroup(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<RoomGroup>>> roomGroup) {
     fbb_.AddOffset(RoomDataInternal::VT_ROOMGROUP, roomGroup);
   }
   void add_flagAttr(uint32_t flagAttr) {
     fbb_.AddElement<uint32_t>(RoomDataInternal::VT_FLAGATTR, flagAttr, 0);
   }
-  void add_roomBinAttrInternal(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<BinAttrInternal>>> roomBinAttrInternal) {
+  void add_roomBinAttrInternal(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<BinAttrInternal>>> roomBinAttrInternal) {
     fbb_.AddOffset(RoomDataInternal::VT_ROOMBINATTRINTERNAL, roomBinAttrInternal);
   }
-  explicit RoomDataInternalBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+  explicit RoomDataInternalBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
         : fbb_(_fbb) {
     start_ = fbb_.StartTable();
   }
-  flatbuffers::Offset<RoomDataInternal> Finish() {
+  ::flatbuffers::Offset<RoomDataInternal> Finish() {
     const auto end = fbb_.EndTable(start_);
-    auto o = flatbuffers::Offset<RoomDataInternal>(end);
+    auto o = ::flatbuffers::Offset<RoomDataInternal>(end);
     return o;
   }
 };
 
-inline flatbuffers::Offset<RoomDataInternal> CreateRoomDataInternal(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<RoomDataInternal> CreateRoomDataInternal(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     uint16_t serverId = 0,
     uint32_t worldId = 0,
     uint64_t lobbyId = 0,
     uint64_t roomId = 0,
     uint64_t passwordSlotMask = 0,
     uint32_t maxSlot = 0,
-    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RoomMemberDataInternal>>> memberList = 0,
+    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<RoomMemberDataInternal>>> memberList = 0,
     uint16_t ownerId = 0,
-    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RoomGroup>>> roomGroup = 0,
+    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<RoomGroup>>> roomGroup = 0,
     uint32_t flagAttr = 0,
-    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<BinAttrInternal>>> roomBinAttrInternal = 0) {
+    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<BinAttrInternal>>> roomBinAttrInternal = 0) {
   RoomDataInternalBuilder builder_(_fbb);
   builder_.add_passwordSlotMask(passwordSlotMask);
   builder_.add_roomId(roomId);
@@ -1002,22 +1002,22 @@ inline flatbuffers::Offset<RoomDataInternal> CreateRoomDataInternal(
   return builder_.Finish();
 }
 
-inline flatbuffers::Offset<RoomDataInternal> CreateRoomDataInternalDirect(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<RoomDataInternal> CreateRoomDataInternalDirect(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     uint16_t serverId = 0,
     uint32_t worldId = 0,
     uint64_t lobbyId = 0,
     uint64_t roomId = 0,
     uint64_t passwordSlotMask = 0,
     uint32_t maxSlot = 0,
-    const std::vector<flatbuffers::Offset<RoomMemberDataInternal>> *memberList = nullptr,
+    const std::vector<::flatbuffers::Offset<RoomMemberDataInternal>> *memberList = nullptr,
     uint16_t ownerId = 0,
-    const std::vector<flatbuffers::Offset<RoomGroup>> *roomGroup = nullptr,
+    const std::vector<::flatbuffers::Offset<RoomGroup>> *roomGroup = nullptr,
     uint32_t flagAttr = 0,
-    const std::vector<flatbuffers::Offset<BinAttrInternal>> *roomBinAttrInternal = nullptr) {
-  auto memberList__ = memberList ? _fbb.CreateVector<flatbuffers::Offset<RoomMemberDataInternal>>(*memberList) : 0;
-  auto roomGroup__ = roomGroup ? _fbb.CreateVector<flatbuffers::Offset<RoomGroup>>(*roomGroup) : 0;
-  auto roomBinAttrInternal__ = roomBinAttrInternal ? _fbb.CreateVector<flatbuffers::Offset<BinAttrInternal>>(*roomBinAttrInternal) : 0;
+    const std::vector<::flatbuffers::Offset<BinAttrInternal>> *roomBinAttrInternal = nullptr) {
+  auto memberList__ = memberList ? _fbb.CreateVector<::flatbuffers::Offset<RoomMemberDataInternal>>(*memberList) : 0;
+  auto roomGroup__ = roomGroup ? _fbb.CreateVector<::flatbuffers::Offset<RoomGroup>>(*roomGroup) : 0;
+  auto roomBinAttrInternal__ = roomBinAttrInternal ? _fbb.CreateVector<::flatbuffers::Offset<BinAttrInternal>>(*roomBinAttrInternal) : 0;
   return CreateRoomDataInternal(
       _fbb,
       serverId,
@@ -1033,7 +1033,7 @@ inline flatbuffers::Offset<RoomDataInternal> CreateRoomDataInternalDirect(
       roomBinAttrInternal__);
 }
 
-struct RoomDataExternal FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+struct RoomDataExternal FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
   typedef RoomDataExternalBuilder Builder;
   enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_SERVERID = 4,
@@ -1090,22 +1090,22 @@ struct RoomDataExternal FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
   const UserInfo2 *owner() const {
     return GetPointer<const UserInfo2 *>(VT_OWNER);
   }
-  const flatbuffers::Vector<flatbuffers::Offset<RoomGroup>> *roomGroup() const {
-    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<RoomGroup>> *>(VT_ROOMGROUP);
+  const ::flatbuffers::Vector<::flatbuffers::Offset<RoomGroup>> *roomGroup() const {
+    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<RoomGroup>> *>(VT_ROOMGROUP);
   }
   uint32_t flagAttr() const {
     return GetField<uint32_t>(VT_FLAGATTR, 0);
   }
-  const flatbuffers::Vector<flatbuffers::Offset<IntAttr>> *roomSearchableIntAttrExternal() const {
-    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<IntAttr>> *>(VT_ROOMSEARCHABLEINTATTREXTERNAL);
+  const ::flatbuffers::Vector<::flatbuffers::Offset<IntAttr>> *roomSearchableIntAttrExternal() const {
+    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<IntAttr>> *>(VT_ROOMSEARCHABLEINTATTREXTERNAL);
   }
-  const flatbuffers::Vector<flatbuffers::Offset<BinAttr>> *roomSearchableBinAttrExternal() const {
-    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<BinAttr>> *>(VT_ROOMSEARCHABLEBINATTREXTERNAL);
+  const ::flatbuffers::Vector<::flatbuffers::Offset<BinAttr>> *roomSearchableBinAttrExternal() const {
+    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<BinAttr>> *>(VT_ROOMSEARCHABLEBINATTREXTERNAL);
   }
-  const flatbuffers::Vector<flatbuffers::Offset<BinAttr>> *roomBinAttrExternal() const {
-    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<BinAttr>> *>(VT_ROOMBINATTREXTERNAL);
+  const ::flatbuffers::Vector<::flatbuffers::Offset<BinAttr>> *roomBinAttrExternal() const {
+    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<BinAttr>> *>(VT_ROOMBINATTREXTERNAL);
   }
-  bool Verify(flatbuffers::Verifier &verifier) const {
+  bool Verify(::flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
            VerifyField<uint16_t>(verifier, VT_SERVERID, 2) &&
            VerifyField<uint32_t>(verifier, VT_WORLDID, 4) &&
@@ -1139,8 +1139,8 @@ struct RoomDataExternal FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
 
 struct RoomDataExternalBuilder {
   typedef RoomDataExternal Table;
-  flatbuffers::FlatBufferBuilder &fbb_;
-  flatbuffers::uoffset_t start_;
+  ::flatbuffers::FlatBufferBuilder &fbb_;
+  ::flatbuffers::uoffset_t start_;
   void add_serverId(uint16_t serverId) {
     fbb_.AddElement<uint16_t>(RoomDataExternal::VT_SERVERID, serverId, 0);
   }
@@ -1174,37 +1174,37 @@ struct RoomDataExternalBuilder {
   void add_passwordSlotMask(uint64_t passwordSlotMask) {
     fbb_.AddElement<uint64_t>(RoomDataExternal::VT_PASSWORDSLOTMASK, passwordSlotMask, 0);
   }
-  void add_owner(flatbuffers::Offset<UserInfo2> owner) {
+  void add_owner(::flatbuffers::Offset<UserInfo2> owner) {
     fbb_.AddOffset(RoomDataExternal::VT_OWNER, owner);
   }
-  void add_roomGroup(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RoomGroup>>> roomGroup) {
+  void add_roomGroup(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<RoomGroup>>> roomGroup) {
     fbb_.AddOffset(RoomDataExternal::VT_ROOMGROUP, roomGroup);
   }
   void add_flagAttr(uint32_t flagAttr) {
     fbb_.AddElement<uint32_t>(RoomDataExternal::VT_FLAGATTR, flagAttr, 0);
   }
-  void add_roomSearchableIntAttrExternal(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<IntAttr>>> roomSearchableIntAttrExternal) {
+  void add_roomSearchableIntAttrExternal(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<IntAttr>>> roomSearchableIntAttrExternal) {
     fbb_.AddOffset(RoomDataExternal::VT_ROOMSEARCHABLEINTATTREXTERNAL, roomSearchableIntAttrExternal);
   }
-  void add_roomSearchableBinAttrExternal(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<BinAttr>>> roomSearchableBinAttrExternal) {
+  void add_roomSearchableBinAttrExternal(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<BinAttr>>> roomSearchableBinAttrExternal) {
     fbb_.AddOffset(RoomDataExternal::VT_ROOMSEARCHABLEBINATTREXTERNAL, roomSearchableBinAttrExternal);
   }
-  void add_roomBinAttrExternal(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<BinAttr>>> roomBinAttrExternal) {
+  void add_roomBinAttrExternal(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<BinAttr>>> roomBinAttrExternal) {
     fbb_.AddOffset(RoomDataExternal::VT_ROOMBINATTREXTERNAL, roomBinAttrExternal);
   }
-  explicit RoomDataExternalBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+  explicit RoomDataExternalBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
         : fbb_(_fbb) {
     start_ = fbb_.StartTable();
   }
-  flatbuffers::Offset<RoomDataExternal> Finish() {
+  ::flatbuffers::Offset<RoomDataExternal> Finish() {
     const auto end = fbb_.EndTable(start_);
-    auto o = flatbuffers::Offset<RoomDataExternal>(end);
+    auto o = ::flatbuffers::Offset<RoomDataExternal>(end);
     return o;
   }
 };
 
-inline flatbuffers::Offset<RoomDataExternal> CreateRoomDataExternal(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<RoomDataExternal> CreateRoomDataExternal(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     uint16_t serverId = 0,
     uint32_t worldId = 0,
     uint16_t publicSlotNum = 0,
@@ -1216,12 +1216,12 @@ inline flatbuffers::Offset<RoomDataExternal> CreateRoomDataExternal(
     uint16_t openPrivateSlotNum = 0,
     uint16_t curMemberNum = 0,
     uint64_t passwordSlotMask = 0,
-    flatbuffers::Offset<UserInfo2> owner = 0,
-    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RoomGroup>>> roomGroup = 0,
+    ::flatbuffers::Offset<UserInfo2> owner = 0,
+    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<RoomGroup>>> roomGroup = 0,
     uint32_t flagAttr = 0,
-    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<IntAttr>>> roomSearchableIntAttrExternal = 0,
-    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<BinAttr>>> roomSearchableBinAttrExternal = 0,
-    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<BinAttr>>> roomBinAttrExternal = 0) {
+    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<IntAttr>>> roomSearchableIntAttrExternal = 0,
+    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<BinAttr>>> roomSearchableBinAttrExternal = 0,
+    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<BinAttr>>> roomBinAttrExternal = 0) {
   RoomDataExternalBuilder builder_(_fbb);
   builder_.add_passwordSlotMask(passwordSlotMask);
   builder_.add_roomId(roomId);
@@ -1243,8 +1243,8 @@ inline flatbuffers::Offset<RoomDataExternal> CreateRoomDataExternal(
   return builder_.Finish();
 }
 
-inline flatbuffers::Offset<RoomDataExternal> CreateRoomDataExternalDirect(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<RoomDataExternal> CreateRoomDataExternalDirect(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     uint16_t serverId = 0,
     uint32_t worldId = 0,
     uint16_t publicSlotNum = 0,
@@ -1256,16 +1256,16 @@ inline flatbuffers::Offset<RoomDataExternal> CreateRoomDataExternalDirect(
     uint16_t openPrivateSlotNum = 0,
     uint16_t curMemberNum = 0,
     uint64_t passwordSlotMask = 0,
-    flatbuffers::Offset<UserInfo2> owner = 0,
-    const std::vector<flatbuffers::Offset<RoomGroup>> *roomGroup = nullptr,
+    ::flatbuffers::Offset<UserInfo2> owner = 0,
+    const std::vector<::flatbuffers::Offset<RoomGroup>> *roomGroup = nullptr,
     uint32_t flagAttr = 0,
-    const std::vector<flatbuffers::Offset<IntAttr>> *roomSearchableIntAttrExternal = nullptr,
-    const std::vector<flatbuffers::Offset<BinAttr>> *roomSearchableBinAttrExternal = nullptr,
-    const std::vector<flatbuffers::Offset<BinAttr>> *roomBinAttrExternal = nullptr) {
-  auto roomGroup__ = roomGroup ? _fbb.CreateVector<flatbuffers::Offset<RoomGroup>>(*roomGroup) : 0;
-  auto roomSearchableIntAttrExternal__ = roomSearchableIntAttrExternal ? _fbb.CreateVector<flatbuffers::Offset<IntAttr>>(*roomSearchableIntAttrExternal) : 0;
-  auto roomSearchableBinAttrExternal__ = roomSearchableBinAttrExternal ? _fbb.CreateVector<flatbuffers::Offset<BinAttr>>(*roomSearchableBinAttrExternal) : 0;
-  auto roomBinAttrExternal__ = roomBinAttrExternal ? _fbb.CreateVector<flatbuffers::Offset<BinAttr>>(*roomBinAttrExternal) : 0;
+    const std::vector<::flatbuffers::Offset<IntAttr>> *roomSearchableIntAttrExternal = nullptr,
+    const std::vector<::flatbuffers::Offset<BinAttr>> *roomSearchableBinAttrExternal = nullptr,
+    const std::vector<::flatbuffers::Offset<BinAttr>> *roomBinAttrExternal = nullptr) {
+  auto roomGroup__ = roomGroup ? _fbb.CreateVector<::flatbuffers::Offset<RoomGroup>>(*roomGroup) : 0;
+  auto roomSearchableIntAttrExternal__ = roomSearchableIntAttrExternal ? _fbb.CreateVector<::flatbuffers::Offset<IntAttr>>(*roomSearchableIntAttrExternal) : 0;
+  auto roomSearchableBinAttrExternal__ = roomSearchableBinAttrExternal ? _fbb.CreateVector<::flatbuffers::Offset<BinAttr>>(*roomSearchableBinAttrExternal) : 0;
+  auto roomBinAttrExternal__ = roomBinAttrExternal ? _fbb.CreateVector<::flatbuffers::Offset<BinAttr>>(*roomBinAttrExternal) : 0;
   return CreateRoomDataExternal(
       _fbb,
       serverId,
@@ -1287,7 +1287,7 @@ inline flatbuffers::Offset<RoomDataExternal> CreateRoomDataExternalDirect(
       roomBinAttrExternal__);
 }
 
-struct IntSearchFilter FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+struct IntSearchFilter FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
   typedef IntSearchFilterBuilder Builder;
   enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_SEARCHOPERATOR = 4,
@@ -1299,7 +1299,7 @@ struct IntSearchFilter FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
   const IntAttr *attr() const {
     return GetPointer<const IntAttr *>(VT_ATTR);
   }
-  bool Verify(flatbuffers::Verifier &verifier) const {
+  bool Verify(::flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
            VerifyField<uint8_t>(verifier, VT_SEARCHOPERATOR, 1) &&
            VerifyOffset(verifier, VT_ATTR) &&
@@ -1310,36 +1310,36 @@ struct IntSearchFilter FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
 
 struct IntSearchFilterBuilder {
   typedef IntSearchFilter Table;
-  flatbuffers::FlatBufferBuilder &fbb_;
-  flatbuffers::uoffset_t start_;
+  ::flatbuffers::FlatBufferBuilder &fbb_;
+  ::flatbuffers::uoffset_t start_;
   void add_searchOperator(uint8_t searchOperator) {
     fbb_.AddElement<uint8_t>(IntSearchFilter::VT_SEARCHOPERATOR, searchOperator, 0);
   }
-  void add_attr(flatbuffers::Offset<IntAttr> attr) {
+  void add_attr(::flatbuffers::Offset<IntAttr> attr) {
     fbb_.AddOffset(IntSearchFilter::VT_ATTR, attr);
   }
-  explicit IntSearchFilterBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+  explicit IntSearchFilterBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
         : fbb_(_fbb) {
     start_ = fbb_.StartTable();
   }
-  flatbuffers::Offset<IntSearchFilter> Finish() {
+  ::flatbuffers::Offset<IntSearchFilter> Finish() {
     const auto end = fbb_.EndTable(start_);
-    auto o = flatbuffers::Offset<IntSearchFilter>(end);
+    auto o = ::flatbuffers::Offset<IntSearchFilter>(end);
     return o;
   }
 };
 
-inline flatbuffers::Offset<IntSearchFilter> CreateIntSearchFilter(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<IntSearchFilter> CreateIntSearchFilter(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     uint8_t searchOperator = 0,
-    flatbuffers::Offset<IntAttr> attr = 0) {
+    ::flatbuffers::Offset<IntAttr> attr = 0) {
   IntSearchFilterBuilder builder_(_fbb);
   builder_.add_attr(attr);
   builder_.add_searchOperator(searchOperator);
   return builder_.Finish();
 }
 
-struct BinSearchFilter FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+struct BinSearchFilter FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
   typedef BinSearchFilterBuilder Builder;
   enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_SEARCHOPERATOR = 4,
@@ -1351,7 +1351,7 @@ struct BinSearchFilter FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
   const BinAttr *attr() const {
     return GetPointer<const BinAttr *>(VT_ATTR);
   }
-  bool Verify(flatbuffers::Verifier &verifier) const {
+  bool Verify(::flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
            VerifyField<uint8_t>(verifier, VT_SEARCHOPERATOR, 1) &&
            VerifyOffset(verifier, VT_ATTR) &&
@@ -1362,48 +1362,48 @@ struct BinSearchFilter FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
 
 struct BinSearchFilterBuilder {
   typedef BinSearchFilter Table;
-  flatbuffers::FlatBufferBuilder &fbb_;
-  flatbuffers::uoffset_t start_;
+  ::flatbuffers::FlatBufferBuilder &fbb_;
+  ::flatbuffers::uoffset_t start_;
   void add_searchOperator(uint8_t searchOperator) {
     fbb_.AddElement<uint8_t>(BinSearchFilter::VT_SEARCHOPERATOR, searchOperator, 0);
   }
-  void add_attr(flatbuffers::Offset<BinAttr> attr) {
+  void add_attr(::flatbuffers::Offset<BinAttr> attr) {
     fbb_.AddOffset(BinSearchFilter::VT_ATTR, attr);
   }
-  explicit BinSearchFilterBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+  explicit BinSearchFilterBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
         : fbb_(_fbb) {
     start_ = fbb_.StartTable();
   }
-  flatbuffers::Offset<BinSearchFilter> Finish() {
+  ::flatbuffers::Offset<BinSearchFilter> Finish() {
     const auto end = fbb_.EndTable(start_);
-    auto o = flatbuffers::Offset<BinSearchFilter>(end);
+    auto o = ::flatbuffers::Offset<BinSearchFilter>(end);
     return o;
   }
 };
 
-inline flatbuffers::Offset<BinSearchFilter> CreateBinSearchFilter(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<BinSearchFilter> CreateBinSearchFilter(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     uint8_t searchOperator = 0,
-    flatbuffers::Offset<BinAttr> attr = 0) {
+    ::flatbuffers::Offset<BinAttr> attr = 0) {
   BinSearchFilterBuilder builder_(_fbb);
   builder_.add_attr(attr);
   builder_.add_searchOperator(searchOperator);
   return builder_.Finish();
 }
 
-struct PresenceOptionData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+struct PresenceOptionData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
   typedef PresenceOptionDataBuilder Builder;
   enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_DATA = 4,
     VT_LEN = 6
   };
-  const flatbuffers::Vector<uint8_t> *data() const {
-    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
+  const ::flatbuffers::Vector<uint8_t> *data() const {
+    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_DATA);
   }
   uint32_t len() const {
     return GetField<uint32_t>(VT_LEN, 0);
   }
-  bool Verify(flatbuffers::Verifier &verifier) const {
+  bool Verify(::flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
            VerifyOffset(verifier, VT_DATA) &&
            verifier.VerifyVector(data()) &&
@@ -1414,28 +1414,28 @@ struct PresenceOptionData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
 
 struct PresenceOptionDataBuilder {
   typedef PresenceOptionData Table;
-  flatbuffers::FlatBufferBuilder &fbb_;
-  flatbuffers::uoffset_t start_;
-  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data) {
+  ::flatbuffers::FlatBufferBuilder &fbb_;
+  ::flatbuffers::uoffset_t start_;
+  void add_data(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data) {
     fbb_.AddOffset(PresenceOptionData::VT_DATA, data);
   }
   void add_len(uint32_t len) {
     fbb_.AddElement<uint32_t>(PresenceOptionData::VT_LEN, len, 0);
   }
-  explicit PresenceOptionDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+  explicit PresenceOptionDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
         : fbb_(_fbb) {
     start_ = fbb_.StartTable();
   }
-  flatbuffers::Offset<PresenceOptionData> Finish() {
+  ::flatbuffers::Offset<PresenceOptionData> Finish() {
     const auto end = fbb_.EndTable(start_);
-    auto o = flatbuffers::Offset<PresenceOptionData>(end);
+    auto o = ::flatbuffers::Offset<PresenceOptionData>(end);
     return o;
   }
 };
 
-inline flatbuffers::Offset<PresenceOptionData> CreatePresenceOptionData(
-    flatbuffers::FlatBufferBuilder &_fbb,
-    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data = 0,
+inline ::flatbuffers::Offset<PresenceOptionData> CreatePresenceOptionData(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
+    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data = 0,
     uint32_t len = 0) {
   PresenceOptionDataBuilder builder_(_fbb);
   builder_.add_len(len);
@@ -1443,8 +1443,8 @@ inline flatbuffers::Offset<PresenceOptionData> CreatePresenceOptionData(
   return builder_.Finish();
 }
 
-inline flatbuffers::Offset<PresenceOptionData> CreatePresenceOptionDataDirect(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<PresenceOptionData> CreatePresenceOptionDataDirect(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     const std::vector<uint8_t> *data = nullptr,
     uint32_t len = 0) {
   auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
@@ -1454,19 +1454,19 @@ inline flatbuffers::Offset<PresenceOptionData> CreatePresenceOptionDataDirect(
       len);
 }
 
-struct RoomGroupPasswordConfig FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+struct RoomGroupPasswordConfig FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
   typedef RoomGroupPasswordConfigBuilder Builder;
   enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_GROUPID = 4,
     VT_WITHPASSWORD = 6
   };
-  const flatbuffers::Vector<uint8_t> *groupId() const {
-    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_GROUPID);
+  const ::flatbuffers::Vector<uint8_t> *groupId() const {
+    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_GROUPID);
   }
   bool withPassword() const {
     return GetField<uint8_t>(VT_WITHPASSWORD, 0) != 0;
   }
-  bool Verify(flatbuffers::Verifier &verifier) const {
+  bool Verify(::flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
            VerifyOffset(verifier, VT_GROUPID) &&
            verifier.VerifyVector(groupId()) &&
@@ -1477,28 +1477,28 @@ struct RoomGroupPasswordConfig FLATBUFFERS_FINAL_CLASS : private flatbuffers::Ta
 
 struct RoomGroupPasswordConfigBuilder {
   typedef RoomGroupPasswordConfig Table;
-  flatbuffers::FlatBufferBuilder &fbb_;
-  flatbuffers::uoffset_t start_;
-  void add_groupId(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> groupId) {
+  ::flatbuffers::FlatBufferBuilder &fbb_;
+  ::flatbuffers::uoffset_t start_;
+  void add_groupId(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> groupId) {
     fbb_.AddOffset(RoomGroupPasswordConfig::VT_GROUPID, groupId);
   }
   void add_withPassword(bool withPassword) {
     fbb_.AddElement<uint8_t>(RoomGroupPasswordConfig::VT_WITHPASSWORD, static_cast<uint8_t>(withPassword), 0);
   }
-  explicit RoomGroupPasswordConfigBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+  explicit RoomGroupPasswordConfigBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
         : fbb_(_fbb) {
     start_ = fbb_.StartTable();
   }
-  flatbuffers::Offset<RoomGroupPasswordConfig> Finish() {
+  ::flatbuffers::Offset<RoomGroupPasswordConfig> Finish() {
     const auto end = fbb_.EndTable(start_);
-    auto o = flatbuffers::Offset<RoomGroupPasswordConfig>(end);
+    auto o = ::flatbuffers::Offset<RoomGroupPasswordConfig>(end);
     return o;
   }
 };
 
-inline flatbuffers::Offset<RoomGroupPasswordConfig> CreateRoomGroupPasswordConfig(
-    flatbuffers::FlatBufferBuilder &_fbb,
-    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> groupId = 0,
+inline ::flatbuffers::Offset<RoomGroupPasswordConfig> CreateRoomGroupPasswordConfig(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
+    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> groupId = 0,
     bool withPassword = false) {
   RoomGroupPasswordConfigBuilder builder_(_fbb);
   builder_.add_groupId(groupId);
@@ -1506,8 +1506,8 @@ inline flatbuffers::Offset<RoomGroupPasswordConfig> CreateRoomGroupPasswordConfi
   return builder_.Finish();
 }
 
-inline flatbuffers::Offset<RoomGroupPasswordConfig> CreateRoomGroupPasswordConfigDirect(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<RoomGroupPasswordConfig> CreateRoomGroupPasswordConfigDirect(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     const std::vector<uint8_t> *groupId = nullptr,
     bool withPassword = false) {
   auto groupId__ = groupId ? _fbb.CreateVector<uint8_t>(*groupId) : 0;
@@ -1517,7 +1517,7 @@ inline flatbuffers::Offset<RoomGroupPasswordConfig> CreateRoomGroupPasswordConfi
       withPassword);
 }
 
-struct SearchRoomRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+struct SearchRoomRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
   typedef SearchRoomRequestBuilder Builder;
   enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_OPTION = 4,
@@ -1552,16 +1552,16 @@ struct SearchRoomRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
   uint32_t flagAttr() const {
     return GetField<uint32_t>(VT_FLAGATTR, 0);
   }
-  const flatbuffers::Vector<flatbuffers::Offset<IntSearchFilter>> *intFilter() const {
-    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<IntSearchFilter>> *>(VT_INTFILTER);
+  const ::flatbuffers::Vector<::flatbuffers::Offset<IntSearchFilter>> *intFilter() const {
+    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<IntSearchFilter>> *>(VT_INTFILTER);
   }
-  const flatbuffers::Vector<flatbuffers::Offset<BinSearchFilter>> *binFilter() const {
-    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<BinSearchFilter>> *>(VT_BINFILTER);
+  const ::flatbuffers::Vector<::flatbuffers::Offset<BinSearchFilter>> *binFilter() const {
+    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<BinSearchFilter>> *>(VT_BINFILTER);
   }
-  const flatbuffers::Vector<uint16_t> *attrId() const {
-    return GetPointer<const flatbuffers::Vector<uint16_t> *>(VT_ATTRID);
+  const ::flatbuffers::Vector<uint16_t> *attrId() const {
+    return GetPointer<const ::flatbuffers::Vector<uint16_t> *>(VT_ATTRID);
   }
-  bool Verify(flatbuffers::Verifier &verifier) const {
+  bool Verify(::flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
            VerifyField<int32_t>(verifier, VT_OPTION, 4) &&
            VerifyField<uint32_t>(verifier, VT_WORLDID, 4) &&
@@ -1584,8 +1584,8 @@ struct SearchRoomRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
 
 struct SearchRoomRequestBuilder {
   typedef SearchRoomRequest Table;
-  flatbuffers::FlatBufferBuilder &fbb_;
-  flatbuffers::uoffset_t start_;
+  ::flatbuffers::FlatBufferBuilder &fbb_;
+  ::flatbuffers::uoffset_t start_;
   void add_option(int32_t option) {
     fbb_.AddElement<int32_t>(SearchRoomRequest::VT_OPTION, option, 0);
   }
@@ -1607,28 +1607,28 @@ struct SearchRoomRequestBuilder {
   void add_flagAttr(uint32_t flagAttr) {
     fbb_.AddElement<uint32_t>(SearchRoomRequest::VT_FLAGATTR, flagAttr, 0);
   }
-  void add_intFilter(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<IntSearchFilter>>> intFilter) {
+  void add_intFilter(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<IntSearchFilter>>> intFilter) {
     fbb_.AddOffset(SearchRoomRequest::VT_INTFILTER, intFilter);
   }
-  void add_binFilter(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<BinSearchFilter>>> binFilter) {
+  void add_binFilter(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<BinSearchFilter>>> binFilter) {
     fbb_.AddOffset(SearchRoomRequest::VT_BINFILTER, binFilter);
   }
-  void add_attrId(flatbuffers::Offset<flatbuffers::Vector<uint16_t>> attrId) {
+  void add_attrId(::flatbuffers::Offset<::flatbuffers::Vector<uint16_t>> attrId) {
     fbb_.AddOffset(SearchRoomRequest::VT_ATTRID, attrId);
   }
-  explicit SearchRoomRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+  explicit SearchRoomRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
         : fbb_(_fbb) {
     start_ = fbb_.StartTable();
   }
-  flatbuffers::Offset<SearchRoomRequest> Finish() {
+  ::flatbuffers::Offset<SearchRoomRequest> Finish() {
     const auto end = fbb_.EndTable(start_);
-    auto o = flatbuffers::Offset<SearchRoomRequest>(end);
+    auto o = ::flatbuffers::Offset<SearchRoomRequest>(end);
     return o;
   }
 };
 
-inline flatbuffers::Offset<SearchRoomRequest> CreateSearchRoomRequest(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<SearchRoomRequest> CreateSearchRoomRequest(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     int32_t option = 0,
     uint32_t worldId = 0,
     uint64_t lobbyId = 0,
@@ -1636,9 +1636,9 @@ inline flatbuffers::Offset<SearchRoomRequest> CreateSearchRoomRequest(
     uint32_t rangeFilter_max = 0,
     uint32_t flagFilter = 0,
     uint32_t flagAttr = 0,
-    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<IntSearchFilter>>> intFilter = 0,
-    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<BinSearchFilter>>> binFilter = 0,
-    flatbuffers::Offset<flatbuffers::Vector<uint16_t>> attrId = 0) {
+    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<IntSearchFilter>>> intFilter = 0,
+    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<BinSearchFilter>>> binFilter = 0,
+    ::flatbuffers::Offset<::flatbuffers::Vector<uint16_t>> attrId = 0) {
   SearchRoomRequestBuilder builder_(_fbb);
   builder_.add_lobbyId(lobbyId);
   builder_.add_attrId(attrId);
@@ -1653,8 +1653,8 @@ inline flatbuffers::Offset<SearchRoomRequest> CreateSearchRoomRequest(
   return builder_.Finish();
 }
 
-inline flatbuffers::Offset<SearchRoomRequest> CreateSearchRoomRequestDirect(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<SearchRoomRequest> CreateSearchRoomRequestDirect(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     int32_t option = 0,
     uint32_t worldId = 0,
     uint64_t lobbyId = 0,
@@ -1662,11 +1662,11 @@ inline flatbuffers::Offset<SearchRoomRequest> CreateSearchRoomRequestDirect(
     uint32_t rangeFilter_max = 0,
     uint32_t flagFilter = 0,
     uint32_t flagAttr = 0,
-    const std::vector<flatbuffers::Offset<IntSearchFilter>> *intFilter = nullptr,
-    const std::vector<flatbuffers::Offset<BinSearchFilter>> *binFilter = nullptr,
+    const std::vector<::flatbuffers::Offset<IntSearchFilter>> *intFilter = nullptr,
+    const std::vector<::flatbuffers::Offset<BinSearchFilter>> *binFilter = nullptr,
     const std::vector<uint16_t> *attrId = nullptr) {
-  auto intFilter__ = intFilter ? _fbb.CreateVector<flatbuffers::Offset<IntSearchFilter>>(*intFilter) : 0;
-  auto binFilter__ = binFilter ? _fbb.CreateVector<flatbuffers::Offset<BinSearchFilter>>(*binFilter) : 0;
+  auto intFilter__ = intFilter ? _fbb.CreateVector<::flatbuffers::Offset<IntSearchFilter>>(*intFilter) : 0;
+  auto binFilter__ = binFilter ? _fbb.CreateVector<::flatbuffers::Offset<BinSearchFilter>>(*binFilter) : 0;
   auto attrId__ = attrId ? _fbb.CreateVector<uint16_t>(*attrId) : 0;
   return CreateSearchRoomRequest(
       _fbb,
@@ -1682,7 +1682,7 @@ inline flatbuffers::Offset<SearchRoomRequest> CreateSearchRoomRequestDirect(
       attrId__);
 }
 
-struct SearchRoomResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+struct SearchRoomResponse FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
   typedef SearchRoomResponseBuilder Builder;
   enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_STARTINDEX = 4,
@@ -1699,10 +1699,10 @@ struct SearchRoomResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
   uint32_t size() const {
     return GetField<uint32_t>(VT_SIZE, 0);
   }
-  const flatbuffers::Vector<flatbuffers::Offset<RoomDataExternal>> *rooms() const {
-    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<RoomDataExternal>> *>(VT_ROOMS);
+  const ::flatbuffers::Vector<::flatbuffers::Offset<RoomDataExternal>> *rooms() const {
+    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<RoomDataExternal>> *>(VT_ROOMS);
   }
-  bool Verify(flatbuffers::Verifier &verifier) const {
+  bool Verify(::flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
            VerifyField<uint32_t>(verifier, VT_STARTINDEX, 4) &&
            VerifyField<uint32_t>(verifier, VT_TOTAL, 4) &&
@@ -1716,8 +1716,8 @@ struct SearchRoomResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
 
 struct SearchRoomResponseBuilder {
   typedef SearchRoomResponse Table;
-  flatbuffers::FlatBufferBuilder &fbb_;
-  flatbuffers::uoffset_t start_;
+  ::flatbuffers::FlatBufferBuilder &fbb_;
+  ::flatbuffers::uoffset_t start_;
   void add_startIndex(uint32_t startIndex) {
     fbb_.AddElement<uint32_t>(SearchRoomResponse::VT_STARTINDEX, startIndex, 0);
   }
@@ -1727,26 +1727,26 @@ struct SearchRoomResponseBuilder {
   void add_size(uint32_t size) {
     fbb_.AddElement<uint32_t>(SearchRoomResponse::VT_SIZE, size, 0);
   }
-  void add_rooms(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RoomDataExternal>>> rooms) {
+  void add_rooms(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<RoomDataExternal>>> rooms) {
     fbb_.AddOffset(SearchRoomResponse::VT_ROOMS, rooms);
   }
-  explicit SearchRoomResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+  explicit SearchRoomResponseBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
         : fbb_(_fbb) {
     start_ = fbb_.StartTable();
   }
-  flatbuffers::Offset<SearchRoomResponse> Finish() {
+  ::flatbuffers::Offset<SearchRoomResponse> Finish() {
     const auto end = fbb_.EndTable(start_);
-    auto o = flatbuffers::Offset<SearchRoomResponse>(end);
+    auto o = ::flatbuffers::Offset<SearchRoomResponse>(end);
     return o;
   }
 };
 
-inline flatbuffers::Offset<SearchRoomResponse> CreateSearchRoomResponse(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<SearchRoomResponse> CreateSearchRoomResponse(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     uint32_t startIndex = 0,
     uint32_t total = 0,
     uint32_t size = 0,
-    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RoomDataExternal>>> rooms = 0) {
+    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<RoomDataExternal>>> rooms = 0) {
   SearchRoomResponseBuilder builder_(_fbb);
   builder_.add_rooms(rooms);
   builder_.add_size(size);
@@ -1755,13 +1755,13 @@ inline flatbuffers::Offset<SearchRoomResponse> CreateSearchRoomResponse(
   return builder_.Finish();
 }
 
-inline flatbuffers::Offset<SearchRoomResponse> CreateSearchRoomResponseDirect(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<SearchRoomResponse> CreateSearchRoomResponseDirect(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     uint32_t startIndex = 0,
     uint32_t total = 0,
     uint32_t size = 0,
-    const std::vector<flatbuffers::Offset<RoomDataExternal>> *rooms = nullptr) {
-  auto rooms__ = rooms ? _fbb.CreateVector<flatbuffers::Offset<RoomDataExternal>>(*rooms) : 0;
+    const std::vector<::flatbuffers::Offset<RoomDataExternal>> *rooms = nullptr) {
+  auto rooms__ = rooms ? _fbb.CreateVector<::flatbuffers::Offset<RoomDataExternal>>(*rooms) : 0;
   return CreateSearchRoomResponse(
       _fbb,
       startIndex,
@@ -1770,7 +1770,7 @@ inline flatbuffers::Offset<SearchRoomResponse> CreateSearchRoomResponseDirect(
       rooms__);
 }
 
-struct CreateJoinRoomRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+struct CreateJoinRoomRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
   typedef CreateJoinRoomRequestBuilder Builder;
   enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_WORLDID = 4,
@@ -1803,38 +1803,38 @@ struct CreateJoinRoomRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Tabl
   uint32_t flagAttr() const {
     return GetField<uint32_t>(VT_FLAGATTR, 0);
   }
-  const flatbuffers::Vector<flatbuffers::Offset<BinAttr>> *roomBinAttrInternal() const {
-    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<BinAttr>> *>(VT_ROOMBINATTRINTERNAL);
+  const ::flatbuffers::Vector<::flatbuffers::Offset<BinAttr>> *roomBinAttrInternal() const {
+    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<BinAttr>> *>(VT_ROOMBINATTRINTERNAL);
   }
-  const flatbuffers::Vector<flatbuffers::Offset<IntAttr>> *roomSearchableIntAttrExternal() const {
-    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<IntAttr>> *>(VT_ROOMSEARCHABLEINTATTREXTERNAL);
+  const ::flatbuffers::Vector<::flatbuffers::Offset<IntAttr>> *roomSearchableIntAttrExternal() const {
+    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<IntAttr>> *>(VT_ROOMSEARCHABLEINTATTREXTERNAL);
   }
-  const flatbuffers::Vector<flatbuffers::Offset<BinAttr>> *roomSearchableBinAttrExternal() const {
-    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<BinAttr>> *>(VT_ROOMSEARCHABLEBINATTREXTERNAL);
+  const ::flatbuffers::Vector<::flatbuffers::Offset<BinAttr>> *roomSearchableBinAttrExternal() const {
+    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<BinAttr>> *>(VT_ROOMSEARCHABLEBINATTREXTERNAL);
   }
-  const flatbuffers::Vector<flatbuffers::Offset<BinAttr>> *roomBinAttrExternal() const {
-    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<BinAttr>> *>(VT_ROOMBINATTREXTERNAL);
+  const ::flatbuffers::Vector<::flatbuffers::Offset<BinAttr>> *roomBinAttrExternal() const {
+    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<BinAttr>> *>(VT_ROOMBINATTREXTERNAL);
   }
-  const flatbuffers::Vector<uint8_t> *roomPassword() const {
-    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_ROOMPASSWORD);
+  const ::flatbuffers::Vector<uint8_t> *roomPassword() const {
+    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_ROOMPASSWORD);
   }
-  const flatbuffers::Vector<flatbuffers::Offset<GroupConfig>> *groupConfig() const {
-    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<GroupConfig>> *>(VT_GROUPCONFIG);
+  const ::flatbuffers::Vector<::flatbuffers::Offset<GroupConfig>> *groupConfig() const {
+    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<GroupConfig>> *>(VT_GROUPCONFIG);
   }
   uint64_t passwordSlotMask() const {
     return GetField<uint64_t>(VT_PASSWORDSLOTMASK, 0);
   }
-  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *allowedUser() const {
-    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_ALLOWEDUSER);
+  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *allowedUser() const {
+    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ALLOWEDUSER);
   }
-  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *blockedUser() const {
-    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_BLOCKEDUSER);
+  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *blockedUser() const {
+    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_BLOCKEDUSER);
   }
-  const flatbuffers::Vector<uint8_t> *joinRoomGroupLabel() const {
-    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_JOINROOMGROUPLABEL);
+  const ::flatbuffers::Vector<uint8_t> *joinRoomGroupLabel() const {
+    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_JOINROOMGROUPLABEL);
   }
-  const flatbuffers::Vector<flatbuffers::Offset<BinAttr>> *roomMemberBinAttrInternal() const {
-    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<BinAttr>> *>(VT_ROOMMEMBERBINATTRINTERNAL);
+  const ::flatbuffers::Vector<::flatbuffers::Offset<BinAttr>> *roomMemberBinAttrInternal() const {
+    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<BinAttr>> *>(VT_ROOMMEMBERBINATTRINTERNAL);
   }
   uint8_t teamId() const {
     return GetField<uint8_t>(VT_TEAMID, 0);
@@ -1842,7 +1842,7 @@ struct CreateJoinRoomRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Tabl
   const OptParam *sigOptParam() const {
     return GetPointer<const OptParam *>(VT_SIGOPTPARAM);
   }
-  bool Verify(flatbuffers::Verifier &verifier) const {
+  bool Verify(::flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
            VerifyField<uint32_t>(verifier, VT_WORLDID, 4) &&
            VerifyField<uint64_t>(verifier, VT_LOBBYID, 8) &&
@@ -1886,8 +1886,8 @@ struct CreateJoinRoomRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Tabl
 
 struct CreateJoinRoomRequestBuilder {
   typedef CreateJoinRoomRequest Table;
-  flatbuffers::FlatBufferBuilder &fbb_;
-  flatbuffers::uoffset_t start_;
+  ::flatbuffers::FlatBufferBuilder &fbb_;
+  ::flatbuffers::uoffset_t start_;
   void add_worldId(uint32_t worldId) {
     fbb_.AddElement<uint32_t>(CreateJoinRoomRequest::VT_WORLDID, worldId, 0);
   }
@@ -1900,75 +1900,75 @@ struct CreateJoinRoomRequestBuilder {
   void add_flagAttr(uint32_t flagAttr) {
     fbb_.AddElement<uint32_t>(CreateJoinRoomRequest::VT_FLAGATTR, flagAttr, 0);
   }
-  void add_roomBinAttrInternal(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<BinAttr>>> roomBinAttrInternal) {
+  void add_roomBinAttrInternal(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<BinAttr>>> roomBinAttrInternal) {
     fbb_.AddOffset(CreateJoinRoomRequest::VT_ROOMBINATTRINTERNAL, roomBinAttrInternal);
   }
-  void add_roomSearchableIntAttrExternal(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<IntAttr>>> roomSearchableIntAttrExternal) {
+  void add_roomSearchableIntAttrExternal(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<IntAttr>>> roomSearchableIntAttrExternal) {
     fbb_.AddOffset(CreateJoinRoomRequest::VT_ROOMSEARCHABLEINTATTREXTERNAL, roomSearchableIntAttrExternal);
   }
-  void add_roomSearchableBinAttrExternal(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<BinAttr>>> roomSearchableBinAttrExternal) {
+  void add_roomSearchableBinAttrExternal(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<BinAttr>>> roomSearchableBinAttrExternal) {
     fbb_.AddOffset(CreateJoinRoomRequest::VT_ROOMSEARCHABLEBINATTREXTERNAL, roomSearchableBinAttrExternal);
   }
-  void add_roomBinAttrExternal(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<BinAttr>>> roomBinAttrExternal) {
+  void add_roomBinAttrExternal(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<BinAttr>>> roomBinAttrExternal) {
     fbb_.AddOffset(CreateJoinRoomRequest::VT_ROOMBINATTREXTERNAL, roomBinAttrExternal);
   }
-  void add_roomPassword(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> roomPassword) {
+  void add_roomPassword(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> roomPassword) {
     fbb_.AddOffset(CreateJoinRoomRequest::VT_ROOMPASSWORD, roomPassword);
   }
-  void add_groupConfig(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<GroupConfig>>> groupConfig) {
+  void add_groupConfig(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<GroupConfig>>> groupConfig) {
     fbb_.AddOffset(CreateJoinRoomRequest::VT_GROUPCONFIG, groupConfig);
   }
   void add_passwordSlotMask(uint64_t passwordSlotMask) {
     fbb_.AddElement<uint64_t>(CreateJoinRoomRequest::VT_PASSWORDSLOTMASK, passwordSlotMask, 0);
   }
-  void add_allowedUser(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> allowedUser) {
+  void add_allowedUser(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> allowedUser) {
     fbb_.AddOffset(CreateJoinRoomRequest::VT_ALLOWEDUSER, allowedUser);
   }
-  void add_blockedUser(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> blockedUser) {
+  void add_blockedUser(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> blockedUser) {
     fbb_.AddOffset(CreateJoinRoomRequest::VT_BLOCKEDUSER, blockedUser);
   }
-  void add_joinRoomGroupLabel(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> joinRoomGroupLabel) {
+  void add_joinRoomGroupLabel(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> joinRoomGroupLabel) {
     fbb_.AddOffset(CreateJoinRoomRequest::VT_JOINROOMGROUPLABEL, joinRoomGroupLabel);
   }
-  void add_roomMemberBinAttrInternal(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<BinAttr>>> roomMemberBinAttrInternal) {
+  void add_roomMemberBinAttrInternal(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<BinAttr>>> roomMemberBinAttrInternal) {
     fbb_.AddOffset(CreateJoinRoomRequest::VT_ROOMMEMBERBINATTRINTERNAL, roomMemberBinAttrInternal);
   }
   void add_teamId(uint8_t teamId) {
     fbb_.AddElement<uint8_t>(CreateJoinRoomRequest::VT_TEAMID, teamId, 0);
   }
-  void add_sigOptParam(flatbuffers::Offset<OptParam> sigOptParam) {
+  void add_sigOptParam(::flatbuffers::Offset<OptParam> sigOptParam) {
     fbb_.AddOffset(CreateJoinRoomRequest::VT_SIGOPTPARAM, sigOptParam);
   }
-  explicit CreateJoinRoomRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+  explicit CreateJoinRoomRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
         : fbb_(_fbb) {
     start_ = fbb_.StartTable();
   }
-  flatbuffers::Offset<CreateJoinRoomRequest> Finish() {
+  ::flatbuffers::Offset<CreateJoinRoomRequest> Finish() {
     const auto end = fbb_.EndTable(start_);
-    auto o = flatbuffers::Offset<CreateJoinRoomRequest>(end);
+    auto o = ::flatbuffers::Offset<CreateJoinRoomRequest>(end);
     return o;
   }
 };
 
-inline flatbuffers::Offset<CreateJoinRoomRequest> CreateCreateJoinRoomRequest(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<CreateJoinRoomRequest> CreateCreateJoinRoomRequest(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     uint32_t worldId = 0,
     uint64_t lobbyId = 0,
     uint32_t maxSlot = 0,
     uint32_t flagAttr = 0,
-    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<BinAttr>>> roomBinAttrInternal = 0,
-    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<IntAttr>>> roomSearchableIntAttrExternal = 0,
-    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<BinAttr>>> roomSearchableBinAttrExternal = 0,
-    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<BinAttr>>> roomBinAttrExternal = 0,
-    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> roomPassword = 0,
-    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<GroupConfig>>> groupConfig = 0,
+    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<BinAttr>>> roomBinAttrInternal = 0,
+    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<IntAttr>>> roomSearchableIntAttrExternal = 0,
+    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<BinAttr>>> roomSearchableBinAttrExternal = 0,
+    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<BinAttr>>> roomBinAttrExternal = 0,
+    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> roomPassword = 0,
+    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<GroupConfig>>> groupConfig = 0,
     uint64_t passwordSlotMask = 0,
-    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> allowedUser = 0,
-    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> blockedUser = 0,
-    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> joinRoomGroupLabel = 0,
-    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<BinAttr>>> roomMemberBinAttrInternal = 0,
+    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> allowedUser = 0,
+    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> blockedUser = 0,
+    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> joinRoomGroupLabel = 0,
+    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<BinAttr>>> roomMemberBinAttrInternal = 0,
     uint8_t teamId = 0,
-    flatbuffers::Offset<OptParam> sigOptParam = 0) {
+    ::flatbuffers::Offset<OptParam> sigOptParam = 0) {
   CreateJoinRoomRequestBuilder builder_(_fbb);
   builder_.add_passwordSlotMask(passwordSlotMask);
   builder_.add_lobbyId(lobbyId);
@@ -1990,35 +1990,35 @@ inline flatbuffers::Offset<CreateJoinRoomRequest> CreateCreateJoinRoomRequest(
   return builder_.Finish();
 }
 
-inline flatbuffers::Offset<CreateJoinRoomRequest> CreateCreateJoinRoomRequestDirect(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<CreateJoinRoomRequest> CreateCreateJoinRoomRequestDirect(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     uint32_t worldId = 0,
     uint64_t lobbyId = 0,
     uint32_t maxSlot = 0,
     uint32_t flagAttr = 0,
-    const std::vector<flatbuffers::Offset<BinAttr>> *roomBinAttrInternal = nullptr,
-    const std::vector<flatbuffers::Offset<IntAttr>> *roomSearchableIntAttrExternal = nullptr,
-    const std::vector<flatbuffers::Offset<BinAttr>> *roomSearchableBinAttrExternal = nullptr,
-    const std::vector<flatbuffers::Offset<BinAttr>> *roomBinAttrExternal = nullptr,
+    const std::vector<::flatbuffers::Offset<BinAttr>> *roomBinAttrInternal = nullptr,
+    const std::vector<::flatbuffers::Offset<IntAttr>> *roomSearchableIntAttrExternal = nullptr,
+    const std::vector<::flatbuffers::Offset<BinAttr>> *roomSearchableBinAttrExternal = nullptr,
+    const std::vector<::flatbuffers::Offset<BinAttr>> *roomBinAttrExternal = nullptr,
     const std::vector<uint8_t> *roomPassword = nullptr,
-    const std::vector<flatbuffers::Offset<GroupConfig>> *groupConfig = nullptr,
+    const std::vector<::flatbuffers::Offset<GroupConfig>> *groupConfig = nullptr,
     uint64_t passwordSlotMask = 0,
-    const std::vector<flatbuffers::Offset<flatbuffers::String>> *allowedUser = nullptr,
-    const std::vector<flatbuffers::Offset<flatbuffers::String>> *blockedUser = nullptr,
+    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *allowedUser = nullptr,
+    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *blockedUser = nullptr,
     const std::vector<uint8_t> *joinRoomGroupLabel = nullptr,
-    const std::vector<flatbuffers::Offset<BinAttr>> *roomMemberBinAttrInternal = nullptr,
+    const std::vector<::flatbuffers::Offset<BinAttr>> *roomMemberBinAttrInternal = nullptr,
     uint8_t teamId = 0,
-    flatbuffers::Offset<OptParam> sigOptParam = 0) {
-  auto roomBinAttrInternal__ = roomBinAttrInternal ? _fbb.CreateVector<flatbuffers::Offset<BinAttr>>(*roomBinAttrInternal) : 0;
-  auto roomSearchableIntAttrExternal__ = roomSearchableIntAttrExternal ? _fbb.CreateVector<flatbuffers::Offset<IntAttr>>(*roomSearchableIntAttrExternal) : 0;
-  auto roomSearchableBinAttrExternal__ = roomSearchableBinAttrExternal ? _fbb.CreateVector<flatbuffers::Offset<BinAttr>>(*roomSearchableBinAttrExternal) : 0;
-  auto roomBinAttrExternal__ = roomBinAttrExternal ? _fbb.CreateVector<flatbuffers::Offset<BinAttr>>(*roomBinAttrExternal) : 0;
+    ::flatbuffers::Offset<OptParam> sigOptParam = 0) {
+  auto roomBinAttrInternal__ = roomBinAttrInternal ? _fbb.CreateVector<::flatbuffers::Offset<BinAttr>>(*roomBinAttrInternal) : 0;
+  auto roomSearchableIntAttrExternal__ = roomSearchableIntAttrExternal ? _fbb.CreateVector<::flatbuffers::Offset<IntAttr>>(*roomSearchableIntAttrExternal) : 0;
+  auto roomSearchableBinAttrExternal__ = roomSearchableBinAttrExternal ? _fbb.CreateVector<::flatbuffers::Offset<BinAttr>>(*roomSearchableBinAttrExternal) : 0;
+  auto roomBinAttrExternal__ = roomBinAttrExternal ? _fbb.CreateVector<::flatbuffers::Offset<BinAttr>>(*roomBinAttrExternal) : 0;
   auto roomPassword__ = roomPassword ? _fbb.CreateVector<uint8_t>(*roomPassword) : 0;
-  auto groupConfig__ = groupConfig ? _fbb.CreateVector<flatbuffers::Offset<GroupConfig>>(*groupConfig) : 0;
-  auto allowedUser__ = allowedUser ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*allowedUser) : 0;
-  auto blockedUser__ = blockedUser ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*blockedUser) : 0;
+  auto groupConfig__ = groupConfig ? _fbb.CreateVector<::flatbuffers::Offset<GroupConfig>>(*groupConfig) : 0;
+  auto allowedUser__ = allowedUser ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*allowedUser) : 0;
+  auto blockedUser__ = blockedUser ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*blockedUser) : 0;
   auto joinRoomGroupLabel__ = joinRoomGroupLabel ? _fbb.CreateVector<uint8_t>(*joinRoomGroupLabel) : 0;
-  auto roomMemberBinAttrInternal__ = roomMemberBinAttrInternal ? _fbb.CreateVector<flatbuffers::Offset<BinAttr>>(*roomMemberBinAttrInternal) : 0;
+  auto roomMemberBinAttrInternal__ = roomMemberBinAttrInternal ? _fbb.CreateVector<::flatbuffers::Offset<BinAttr>>(*roomMemberBinAttrInternal) : 0;
   return CreateCreateJoinRoomRequest(
       _fbb,
       worldId,
@@ -2040,7 +2040,7 @@ inline flatbuffers::Offset<CreateJoinRoomRequest> CreateCreateJoinRoomRequestDir
       sigOptParam);
 }
 
-struct JoinRoomRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+struct JoinRoomRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
   typedef JoinRoomRequestBuilder Builder;
   enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_ROOMID = 4,
@@ -2053,14 +2053,14 @@ struct JoinRoomRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
   uint64_t roomId() const {
     return GetField<uint64_t>(VT_ROOMID, 0);
   }
-  const flatbuffers::Vector<uint8_t> *roomPassword() const {
-    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_ROOMPASSWORD);
+  const ::flatbuffers::Vector<uint8_t> *roomPassword() const {
+    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_ROOMPASSWORD);
   }
-  const flatbuffers::Vector<uint8_t> *joinRoomGroupLabel() const {
-    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_JOINROOMGROUPLABEL);
+  const ::flatbuffers::Vector<uint8_t> *joinRoomGroupLabel() const {
+    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_JOINROOMGROUPLABEL);
   }
-  const flatbuffers::Vector<flatbuffers::Offset<BinAttr>> *roomMemberBinAttrInternal() const {
-    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<BinAttr>> *>(VT_ROOMMEMBERBINATTRINTERNAL);
+  const ::flatbuffers::Vector<::flatbuffers::Offset<BinAttr>> *roomMemberBinAttrInternal() const {
+    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<BinAttr>> *>(VT_ROOMMEMBERBINATTRINTERNAL);
   }
   const PresenceOptionData *optData() const {
     return GetPointer<const PresenceOptionData *>(VT_OPTDATA);
@@ -2068,7 +2068,7 @@ struct JoinRoomRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
   uint8_t teamId() const {
     return GetField<uint8_t>(VT_TEAMID, 0);
   }
-  bool Verify(flatbuffers::Verifier &verifier) const {
+  bool Verify(::flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
            VerifyField<uint64_t>(verifier, VT_ROOMID, 8) &&
            VerifyOffset(verifier, VT_ROOMPASSWORD) &&
@@ -2087,44 +2087,44 @@ struct JoinRoomRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
 
 struct JoinRoomRequestBuilder {
   typedef JoinRoomRequest Table;
-  flatbuffers::FlatBufferBuilder &fbb_;
-  flatbuffers::uoffset_t start_;
+  ::flatbuffers::FlatBufferBuilder &fbb_;
+  ::flatbuffers::uoffset_t start_;
   void add_roomId(uint64_t roomId) {
     fbb_.AddElement<uint64_t>(JoinRoomRequest::VT_ROOMID, roomId, 0);
   }
-  void add_roomPassword(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> roomPassword) {
+  void add_roomPassword(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> roomPassword) {
     fbb_.AddOffset(JoinRoomRequest::VT_ROOMPASSWORD, roomPassword);
   }
-  void add_joinRoomGroupLabel(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> joinRoomGroupLabel) {
+  void add_joinRoomGroupLabel(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> joinRoomGroupLabel) {
     fbb_.AddOffset(JoinRoomRequest::VT_JOINROOMGROUPLABEL, joinRoomGroupLabel);
   }
-  void add_roomMemberBinAttrInternal(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<BinAttr>>> roomMemberBinAttrInternal) {
+  void add_roomMemberBinAttrInternal(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<BinAttr>>> roomMemberBinAttrInternal) {
     fbb_.AddOffset(JoinRoomRequest::VT_ROOMMEMBERBINATTRINTERNAL, roomMemberBinAttrInternal);
   }
-  void add_optData(flatbuffers::Offset<PresenceOptionData> optData) {
+  void add_optData(::flatbuffers::Offset<PresenceOptionData> optData) {
     fbb_.AddOffset(JoinRoomRequest::VT_OPTDATA, optData);
   }
   void add_teamId(uint8_t teamId) {
     fbb_.AddElement<uint8_t>(JoinRoomRequest::VT_TEAMID, teamId, 0);
   }
-  explicit JoinRoomRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+  explicit JoinRoomRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
         : fbb_(_fbb) {
     start_ = fbb_.StartTable();
   }
-  flatbuffers::Offset<JoinRoomRequest> Finish() {
+  ::flatbuffers::Offset<JoinRoomRequest> Finish() {
     const auto end = fbb_.EndTable(start_);
-    auto o = flatbuffers::Offset<JoinRoomRequest>(end);
+    auto o = ::flatbuffers::Offset<JoinRoomRequest>(end);
     return o;
   }
 };
 
-inline flatbuffers::Offset<JoinRoomRequest> CreateJoinRoomRequest(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<JoinRoomRequest> CreateJoinRoomRequest(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     uint64_t roomId = 0,
-    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> roomPassword = 0,
-    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> joinRoomGroupLabel = 0,
-    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<BinAttr>>> roomMemberBinAttrInternal = 0,
-    flatbuffers::Offset<PresenceOptionData> optData = 0,
+    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> roomPassword = 0,
+    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> joinRoomGroupLabel = 0,
+    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<BinAttr>>> roomMemberBinAttrInternal = 0,
+    ::flatbuffers::Offset<PresenceOptionData> optData = 0,
     uint8_t teamId = 0) {
   JoinRoomRequestBuilder builder_(_fbb);
   builder_.add_roomId(roomId);
@@ -2136,17 +2136,17 @@ inline flatbuffers::Offset<JoinRoomRequest> CreateJoinRoomRequest(
   return builder_.Finish();
 }
 
-inline flatbuffers::Offset<JoinRoomRequest> CreateJoinRoomRequestDirect(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<JoinRoomRequest> CreateJoinRoomRequestDirect(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     uint64_t roomId = 0,
     const std::vector<uint8_t> *roomPassword = nullptr,
     const std::vector<uint8_t> *joinRoomGroupLabel = nullptr,
-    const std::vector<flatbuffers::Offset<BinAttr>> *roomMemberBinAttrInternal = nullptr,
-    flatbuffers::Offset<PresenceOptionData> optData = 0,
+    const std::vector<::flatbuffers::Offset<BinAttr>> *roomMemberBinAttrInternal = nullptr,
+    ::flatbuffers::Offset<PresenceOptionData> optData = 0,
     uint8_t teamId = 0) {
   auto roomPassword__ = roomPassword ? _fbb.CreateVector<uint8_t>(*roomPassword) : 0;
   auto joinRoomGroupLabel__ = joinRoomGroupLabel ? _fbb.CreateVector<uint8_t>(*joinRoomGroupLabel) : 0;
-  auto roomMemberBinAttrInternal__ = roomMemberBinAttrInternal ? _fbb.CreateVector<flatbuffers::Offset<BinAttr>>(*roomMemberBinAttrInternal) : 0;
+  auto roomMemberBinAttrInternal__ = roomMemberBinAttrInternal ? _fbb.CreateVector<::flatbuffers::Offset<BinAttr>>(*roomMemberBinAttrInternal) : 0;
   return CreateJoinRoomRequest(
       _fbb,
       roomId,
@@ -2157,7 +2157,7 @@ inline flatbuffers::Offset<JoinRoomRequest> CreateJoinRoomRequestDirect(
       teamId);
 }
 
-struct LeaveRoomRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+struct LeaveRoomRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
   typedef LeaveRoomRequestBuilder Builder;
   enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_ROOMID = 4,
@@ -2169,7 +2169,7 @@ struct LeaveRoomRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
   const PresenceOptionData *optData() const {
     return GetPointer<const PresenceOptionData *>(VT_OPTDATA);
   }
-  bool Verify(flatbuffers::Verifier &verifier) const {
+  bool Verify(::flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
            VerifyField<uint64_t>(verifier, VT_ROOMID, 8) &&
            VerifyOffset(verifier, VT_OPTDATA) &&
@@ -2180,48 +2180,48 @@ struct LeaveRoomRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
 
 struct LeaveRoomRequestBuilder {
   typedef LeaveRoomRequest Table;
-  flatbuffers::FlatBufferBuilder &fbb_;
-  flatbuffers::uoffset_t start_;
+  ::flatbuffers::FlatBufferBuilder &fbb_;
+  ::flatbuffers::uoffset_t start_;
   void add_roomId(uint64_t roomId) {
     fbb_.AddElement<uint64_t>(LeaveRoomRequest::VT_ROOMID, roomId, 0);
   }
-  void add_optData(flatbuffers::Offset<PresenceOptionData> optData) {
+  void add_optData(::flatbuffers::Offset<PresenceOptionData> optData) {
     fbb_.AddOffset(LeaveRoomRequest::VT_OPTDATA, optData);
   }
-  explicit LeaveRoomRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+  explicit LeaveRoomRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
         : fbb_(_fbb) {
     start_ = fbb_.StartTable();
   }
-  flatbuffers::Offset<LeaveRoomRequest> Finish() {
+  ::flatbuffers::Offset<LeaveRoomRequest> Finish() {
     const auto end = fbb_.EndTable(start_);
-    auto o = flatbuffers::Offset<LeaveRoomRequest>(end);
+    auto o = ::flatbuffers::Offset<LeaveRoomRequest>(end);
     return o;
   }
 };
 
-inline flatbuffers::Offset<LeaveRoomRequest> CreateLeaveRoomRequest(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<LeaveRoomRequest> CreateLeaveRoomRequest(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     uint64_t roomId = 0,
-    flatbuffers::Offset<PresenceOptionData> optData = 0) {
+    ::flatbuffers::Offset<PresenceOptionData> optData = 0) {
   LeaveRoomRequestBuilder builder_(_fbb);
   builder_.add_roomId(roomId);
   builder_.add_optData(optData);
   return builder_.Finish();
 }
 
-struct GetRoomDataExternalListRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+struct GetRoomDataExternalListRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
   typedef GetRoomDataExternalListRequestBuilder Builder;
   enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_ROOMIDS = 4,
     VT_ATTRIDS = 6
   };
-  const flatbuffers::Vector<uint64_t> *roomIds() const {
-    return GetPointer<const flatbuffers::Vector<uint64_t> *>(VT_ROOMIDS);
+  const ::flatbuffers::Vector<uint64_t> *roomIds() const {
+    return GetPointer<const ::flatbuffers::Vector<uint64_t> *>(VT_ROOMIDS);
   }
-  const flatbuffers::Vector<uint16_t> *attrIds() const {
-    return GetPointer<const flatbuffers::Vector<uint16_t> *>(VT_ATTRIDS);
+  const ::flatbuffers::Vector<uint16_t> *attrIds() const {
+    return GetPointer<const ::flatbuffers::Vector<uint16_t> *>(VT_ATTRIDS);
   }
-  bool Verify(flatbuffers::Verifier &verifier) const {
+  bool Verify(::flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
            VerifyOffset(verifier, VT_ROOMIDS) &&
            verifier.VerifyVector(roomIds()) &&
@@ -2233,37 +2233,37 @@ struct GetRoomDataExternalListRequest FLATBUFFERS_FINAL_CLASS : private flatbuff
 
 struct GetRoomDataExternalListRequestBuilder {
   typedef GetRoomDataExternalListRequest Table;
-  flatbuffers::FlatBufferBuilder &fbb_;
-  flatbuffers::uoffset_t start_;
-  void add_roomIds(flatbuffers::Offset<flatbuffers::Vector<uint64_t>> roomIds) {
+  ::flatbuffers::FlatBufferBuilder &fbb_;
+  ::flatbuffers::uoffset_t start_;
+  void add_roomIds(::flatbuffers::Offset<::flatbuffers::Vector<uint64_t>> roomIds) {
     fbb_.AddOffset(GetRoomDataExternalListRequest::VT_ROOMIDS, roomIds);
   }
-  void add_attrIds(flatbuffers::Offset<flatbuffers::Vector<uint16_t>> attrIds) {
+  void add_attrIds(::flatbuffers::Offset<::flatbuffers::Vector<uint16_t>> attrIds) {
     fbb_.AddOffset(GetRoomDataExternalListRequest::VT_ATTRIDS, attrIds);
   }
-  explicit GetRoomDataExternalListRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+  explicit GetRoomDataExternalListRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
         : fbb_(_fbb) {
     start_ = fbb_.StartTable();
   }
-  flatbuffers::Offset<GetRoomDataExternalListRequest> Finish() {
+  ::flatbuffers::Offset<GetRoomDataExternalListRequest> Finish() {
     const auto end = fbb_.EndTable(start_);
-    auto o = flatbuffers::Offset<GetRoomDataExternalListRequest>(end);
+    auto o = ::flatbuffers::Offset<GetRoomDataExternalListRequest>(end);
     return o;
   }
 };
 
-inline flatbuffers::Offset<GetRoomDataExternalListRequest> CreateGetRoomDataExternalListRequest(
-    flatbuffers::FlatBufferBuilder &_fbb,
-    flatbuffers::Offset<flatbuffers::Vector<uint64_t>> roomIds = 0,
-    flatbuffers::Offset<flatbuffers::Vector<uint16_t>> attrIds = 0) {
+inline ::flatbuffers::Offset<GetRoomDataExternalListRequest> CreateGetRoomDataExternalListRequest(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
+    ::flatbuffers::Offset<::flatbuffers::Vector<uint64_t>> roomIds = 0,
+    ::flatbuffers::Offset<::flatbuffers::Vector<uint16_t>> attrIds = 0) {
   GetRoomDataExternalListRequestBuilder builder_(_fbb);
   builder_.add_attrIds(attrIds);
   builder_.add_roomIds(roomIds);
   return builder_.Finish();
 }
 
-inline flatbuffers::Offset<GetRoomDataExternalListRequest> CreateGetRoomDataExternalListRequestDirect(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<GetRoomDataExternalListRequest> CreateGetRoomDataExternalListRequestDirect(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     const std::vector<uint64_t> *roomIds = nullptr,
     const std::vector<uint16_t> *attrIds = nullptr) {
   auto roomIds__ = roomIds ? _fbb.CreateVector<uint64_t>(*roomIds) : 0;
@@ -2274,15 +2274,15 @@ inline flatbuffers::Offset<GetRoomDataExternalListRequest> CreateGetRoomDataExte
       attrIds__);
 }
 
-struct GetRoomDataExternalListResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+struct GetRoomDataExternalListResponse FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
   typedef GetRoomDataExternalListResponseBuilder Builder;
   enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_ROOMS = 4
   };
-  const flatbuffers::Vector<flatbuffers::Offset<RoomDataExternal>> *rooms() const {
-    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<RoomDataExternal>> *>(VT_ROOMS);
+  const ::flatbuffers::Vector<::flatbuffers::Offset<RoomDataExternal>> *rooms() const {
+    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<RoomDataExternal>> *>(VT_ROOMS);
   }
-  bool Verify(flatbuffers::Verifier &verifier) const {
+  bool Verify(::flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
            VerifyOffset(verifier, VT_ROOMS) &&
            verifier.VerifyVector(rooms()) &&
@@ -2293,40 +2293,40 @@ struct GetRoomDataExternalListResponse FLATBUFFERS_FINAL_CLASS : private flatbuf
 
 struct GetRoomDataExternalListResponseBuilder {
   typedef GetRoomDataExternalListResponse Table;
-  flatbuffers::FlatBufferBuilder &fbb_;
-  flatbuffers::uoffset_t start_;
-  void add_rooms(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RoomDataExternal>>> rooms) {
+  ::flatbuffers::FlatBufferBuilder &fbb_;
+  ::flatbuffers::uoffset_t start_;
+  void add_rooms(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<RoomDataExternal>>> rooms) {
     fbb_.AddOffset(GetRoomDataExternalListResponse::VT_ROOMS, rooms);
   }
-  explicit GetRoomDataExternalListResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+  explicit GetRoomDataExternalListResponseBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
         : fbb_(_fbb) {
     start_ = fbb_.StartTable();
   }
-  flatbuffers::Offset<GetRoomDataExternalListResponse> Finish() {
+  ::flatbuffers::Offset<GetRoomDataExternalListResponse> Finish() {
     const auto end = fbb_.EndTable(start_);
-    auto o = flatbuffers::Offset<GetRoomDataExternalListResponse>(end);
+    auto o = ::flatbuffers::Offset<GetRoomDataExternalListResponse>(end);
     return o;
   }
 };
 
-inline flatbuffers::Offset<GetRoomDataExternalListResponse> CreateGetRoomDataExternalListResponse(
-    flatbuffers::FlatBufferBuilder &_fbb,
-    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RoomDataExternal>>> rooms = 0) {
+inline ::flatbuffers::Offset<GetRoomDataExternalListResponse> CreateGetRoomDataExternalListResponse(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
+    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<RoomDataExternal>>> rooms = 0) {
   GetRoomDataExternalListResponseBuilder builder_(_fbb);
   builder_.add_rooms(rooms);
   return builder_.Finish();
 }
 
-inline flatbuffers::Offset<GetRoomDataExternalListResponse> CreateGetRoomDataExternalListResponseDirect(
-    flatbuffers::FlatBufferBuilder &_fbb,
-    const std::vector<flatbuffers::Offset<RoomDataExternal>> *rooms = nullptr) {
-  auto rooms__ = rooms ? _fbb.CreateVector<flatbuffers::Offset<RoomDataExternal>>(*rooms) : 0;
+inline ::flatbuffers::Offset<GetRoomDataExternalListResponse> CreateGetRoomDataExternalListResponseDirect(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
+    const std::vector<::flatbuffers::Offset<RoomDataExternal>> *rooms = nullptr) {
+  auto rooms__ = rooms ? _fbb.CreateVector<::flatbuffers::Offset<RoomDataExternal>>(*rooms) : 0;
   return CreateGetRoomDataExternalListResponse(
       _fbb,
       rooms__);
 }
 
-struct SetRoomDataExternalRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+struct SetRoomDataExternalRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
   typedef SetRoomDataExternalRequestBuilder Builder;
   enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_ROOMID = 4,
@@ -2337,16 +2337,16 @@ struct SetRoomDataExternalRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers:
   uint64_t roomId() const {
     return GetField<uint64_t>(VT_ROOMID, 0);
   }
-  const flatbuffers::Vector<flatbuffers::Offset<IntAttr>> *roomSearchableIntAttrExternal() const {
-    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<IntAttr>> *>(VT_ROOMSEARCHABLEINTATTREXTERNAL);
+  const ::flatbuffers::Vector<::flatbuffers::Offset<IntAttr>> *roomSearchableIntAttrExternal() const {
+    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<IntAttr>> *>(VT_ROOMSEARCHABLEINTATTREXTERNAL);
   }
-  const flatbuffers::Vector<flatbuffers::Offset<BinAttr>> *roomSearchableBinAttrExternal() const {
-    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<BinAttr>> *>(VT_ROOMSEARCHABLEBINATTREXTERNAL);
+  const ::flatbuffers::Vector<::flatbuffers::Offset<BinAttr>> *roomSearchableBinAttrExternal() const {
+    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<BinAttr>> *>(VT_ROOMSEARCHABLEBINATTREXTERNAL);
   }
-  const flatbuffers::Vector<flatbuffers::Offset<BinAttr>> *roomBinAttrExternal() const {
-    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<BinAttr>> *>(VT_ROOMBINATTREXTERNAL);
+  const ::flatbuffers::Vector<::flatbuffers::Offset<BinAttr>> *roomBinAttrExternal() const {
+    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<BinAttr>> *>(VT_ROOMBINATTREXTERNAL);
   }
-  bool Verify(flatbuffers::Verifier &verifier) const {
+  bool Verify(::flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
            VerifyField<uint64_t>(verifier, VT_ROOMID, 8) &&
            VerifyOffset(verifier, VT_ROOMSEARCHABLEINTATTREXTERNAL) &&
@@ -2364,37 +2364,37 @@ struct SetRoomDataExternalRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers:
 
 struct SetRoomDataExternalRequestBuilder {
   typedef SetRoomDataExternalRequest Table;
-  flatbuffers::FlatBufferBuilder &fbb_;
-  flatbuffers::uoffset_t start_;
+  ::flatbuffers::FlatBufferBuilder &fbb_;
+  ::flatbuffers::uoffset_t start_;
   void add_roomId(uint64_t roomId) {
     fbb_.AddElement<uint64_t>(SetRoomDataExternalRequest::VT_ROOMID, roomId, 0);
   }
-  void add_roomSearchableIntAttrExternal(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<IntAttr>>> roomSearchableIntAttrExternal) {
+  void add_roomSearchableIntAttrExternal(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<IntAttr>>> roomSearchableIntAttrExternal) {
     fbb_.AddOffset(SetRoomDataExternalRequest::VT_ROOMSEARCHABLEINTATTREXTERNAL, roomSearchableIntAttrExternal);
   }
-  void add_roomSearchableBinAttrExternal(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<BinAttr>>> roomSearchableBinAttrExternal) {
+  void add_roomSearchableBinAttrExternal(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<BinAttr>>> roomSearchableBinAttrExternal) {
     fbb_.AddOffset(SetRoomDataExternalRequest::VT_ROOMSEARCHABLEBINATTREXTERNAL, roomSearchableBinAttrExternal);
   }
-  void add_roomBinAttrExternal(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<BinAttr>>> roomBinAttrExternal) {
+  void add_roomBinAttrExternal(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<BinAttr>>> roomBinAttrExternal) {
     fbb_.AddOffset(SetRoomDataExternalRequest::VT_ROOMBINATTREXTERNAL, roomBinAttrExternal);
   }
-  explicit SetRoomDataExternalRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+  explicit SetRoomDataExternalRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
         : fbb_(_fbb) {
     start_ = fbb_.StartTable();
   }
-  flatbuffers::Offset<SetRoomDataExternalRequest> Finish() {
+  ::flatbuffers::Offset<SetRoomDataExternalRequest> Finish() {
     const auto end = fbb_.EndTable(start_);
-    auto o = flatbuffers::Offset<SetRoomDataExternalRequest>(end);
+    auto o = ::flatbuffers::Offset<SetRoomDataExternalRequest>(end);
     return o;
   }
 };
 
-inline flatbuffers::Offset<SetRoomDataExternalRequest> CreateSetRoomDataExternalRequest(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<SetRoomDataExternalRequest> CreateSetRoomDataExternalRequest(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     uint64_t roomId = 0,
-    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<IntAttr>>> roomSearchableIntAttrExternal = 0,
-    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<BinAttr>>> roomSearchableBinAttrExternal = 0,
-    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<BinAttr>>> roomBinAttrExternal = 0) {
+    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<IntAttr>>> roomSearchableIntAttrExternal = 0,
+    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<BinAttr>>> roomSearchableBinAttrExternal = 0,
+    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<BinAttr>>> roomBinAttrExternal = 0) {
   SetRoomDataExternalRequestBuilder builder_(_fbb);
   builder_.add_roomId(roomId);
   builder_.add_roomBinAttrExternal(roomBinAttrExternal);
@@ -2403,15 +2403,15 @@ inline flatbuffers::Offset<SetRoomDataExternalRequest> CreateSetRoomDataExternal
   return builder_.Finish();
 }
 
-inline flatbuffers::Offset<SetRoomDataExternalRequest> CreateSetRoomDataExternalRequestDirect(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<SetRoomDataExternalRequest> CreateSetRoomDataExternalRequestDirect(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     uint64_t roomId = 0,
-    const std::vector<flatbuffers::Offset<IntAttr>> *roomSearchableIntAttrExternal = nullptr,
-    const std::vector<flatbuffers::Offset<BinAttr>> *roomSearchableBinAttrExternal = nullptr,
-    const std::vector<flatbuffers::Offset<BinAttr>> *roomBinAttrExternal = nullptr) {
-  auto roomSearchableIntAttrExternal__ = roomSearchableIntAttrExternal ? _fbb.CreateVector<flatbuffers::Offset<IntAttr>>(*roomSearchableIntAttrExternal) : 0;
-  auto roomSearchableBinAttrExternal__ = roomSearchableBinAttrExternal ? _fbb.CreateVector<flatbuffers::Offset<BinAttr>>(*roomSearchableBinAttrExternal) : 0;
-  auto roomBinAttrExternal__ = roomBinAttrExternal ? _fbb.CreateVector<flatbuffers::Offset<BinAttr>>(*roomBinAttrExternal) : 0;
+    const std::vector<::flatbuffers::Offset<IntAttr>> *roomSearchableIntAttrExternal = nullptr,
+    const std::vector<::flatbuffers::Offset<BinAttr>> *roomSearchableBinAttrExternal = nullptr,
+    const std::vector<::flatbuffers::Offset<BinAttr>> *roomBinAttrExternal = nullptr) {
+  auto roomSearchableIntAttrExternal__ = roomSearchableIntAttrExternal ? _fbb.CreateVector<::flatbuffers::Offset<IntAttr>>(*roomSearchableIntAttrExternal) : 0;
+  auto roomSearchableBinAttrExternal__ = roomSearchableBinAttrExternal ? _fbb.CreateVector<::flatbuffers::Offset<BinAttr>>(*roomSearchableBinAttrExternal) : 0;
+  auto roomBinAttrExternal__ = roomBinAttrExternal ? _fbb.CreateVector<::flatbuffers::Offset<BinAttr>>(*roomBinAttrExternal) : 0;
   return CreateSetRoomDataExternalRequest(
       _fbb,
       roomId,
@@ -2420,7 +2420,7 @@ inline flatbuffers::Offset<SetRoomDataExternalRequest> CreateSetRoomDataExternal
       roomBinAttrExternal__);
 }
 
-struct SetRoomDataInternalRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+struct SetRoomDataInternalRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
   typedef SetRoomDataInternalRequestBuilder Builder;
   enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_ROOMID = 4,
@@ -2440,19 +2440,19 @@ struct SetRoomDataInternalRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers:
   uint32_t flagAttr() const {
     return GetField<uint32_t>(VT_FLAGATTR, 0);
   }
-  const flatbuffers::Vector<flatbuffers::Offset<BinAttr>> *roomBinAttrInternal() const {
-    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<BinAttr>> *>(VT_ROOMBINATTRINTERNAL);
+  const ::flatbuffers::Vector<::flatbuffers::Offset<BinAttr>> *roomBinAttrInternal() const {
+    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<BinAttr>> *>(VT_ROOMBINATTRINTERNAL);
   }
-  const flatbuffers::Vector<flatbuffers::Offset<RoomGroupPasswordConfig>> *passwordConfig() const {
-    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<RoomGroupPasswordConfig>> *>(VT_PASSWORDCONFIG);
+  const ::flatbuffers::Vector<::flatbuffers::Offset<RoomGroupPasswordConfig>> *passwordConfig() const {
+    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<RoomGroupPasswordConfig>> *>(VT_PASSWORDCONFIG);
   }
   uint64_t passwordSlotMask() const {
     return GetField<uint64_t>(VT_PASSWORDSLOTMASK, 0);
   }
-  const flatbuffers::Vector<uint16_t> *ownerPrivilegeRank() const {
-    return GetPointer<const flatbuffers::Vector<uint16_t> *>(VT_OWNERPRIVILEGERANK);
+  const ::flatbuffers::Vector<uint16_t> *ownerPrivilegeRank() const {
+    return GetPointer<const ::flatbuffers::Vector<uint16_t> *>(VT_OWNERPRIVILEGERANK);
   }
-  bool Verify(flatbuffers::Verifier &verifier) const {
+  bool Verify(::flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
            VerifyField<uint64_t>(verifier, VT_ROOMID, 8) &&
            VerifyField<uint32_t>(verifier, VT_FLAGFILTER, 4) &&
@@ -2472,8 +2472,8 @@ struct SetRoomDataInternalRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers:
 
 struct SetRoomDataInternalRequestBuilder {
   typedef SetRoomDataInternalRequest Table;
-  flatbuffers::FlatBufferBuilder &fbb_;
-  flatbuffers::uoffset_t start_;
+  ::flatbuffers::FlatBufferBuilder &fbb_;
+  ::flatbuffers::uoffset_t start_;
   void add_roomId(uint64_t roomId) {
     fbb_.AddElement<uint64_t>(SetRoomDataInternalRequest::VT_ROOMID, roomId, 0);
   }
@@ -2483,38 +2483,38 @@ struct SetRoomDataInternalRequestBuilder {
   void add_flagAttr(uint32_t flagAttr) {
     fbb_.AddElement<uint32_t>(SetRoomDataInternalRequest::VT_FLAGATTR, flagAttr, 0);
   }
-  void add_roomBinAttrInternal(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<BinAttr>>> roomBinAttrInternal) {
+  void add_roomBinAttrInternal(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<BinAttr>>> roomBinAttrInternal) {
     fbb_.AddOffset(SetRoomDataInternalRequest::VT_ROOMBINATTRINTERNAL, roomBinAttrInternal);
   }
-  void add_passwordConfig(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RoomGroupPasswordConfig>>> passwordConfig) {
+  void add_passwordConfig(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<RoomGroupPasswordConfig>>> passwordConfig) {
     fbb_.AddOffset(SetRoomDataInternalRequest::VT_PASSWORDCONFIG, passwordConfig);
   }
   void add_passwordSlotMask(uint64_t passwordSlotMask) {
     fbb_.AddElement<uint64_t>(SetRoomDataInternalRequest::VT_PASSWORDSLOTMASK, passwordSlotMask, 0);
   }
-  void add_ownerPrivilegeRank(flatbuffers::Offset<flatbuffers::Vector<uint16_t>> ownerPrivilegeRank) {
+  void add_ownerPrivilegeRank(::flatbuffers::Offset<::flatbuffers::Vector<uint16_t>> ownerPrivilegeRank) {
     fbb_.AddOffset(SetRoomDataInternalRequest::VT_OWNERPRIVILEGERANK, ownerPrivilegeRank);
   }
-  explicit SetRoomDataInternalRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+  explicit SetRoomDataInternalRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
         : fbb_(_fbb) {
     start_ = fbb_.StartTable();
   }
-  flatbuffers::Offset<SetRoomDataInternalRequest> Finish() {
+  ::flatbuffers::Offset<SetRoomDataInternalRequest> Finish() {
     const auto end = fbb_.EndTable(start_);
-    auto o = flatbuffers::Offset<SetRoomDataInternalRequest>(end);
+    auto o = ::flatbuffers::Offset<SetRoomDataInternalRequest>(end);
     return o;
   }
 };
 
-inline flatbuffers::Offset<SetRoomDataInternalRequest> CreateSetRoomDataInternalRequest(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<SetRoomDataInternalRequest> CreateSetRoomDataInternalRequest(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     uint64_t roomId = 0,
     uint32_t flagFilter = 0,
     uint32_t flagAttr = 0,
-    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<BinAttr>>> roomBinAttrInternal = 0,
-    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<RoomGroupPasswordConfig>>> passwordConfig = 0,
+    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<BinAttr>>> roomBinAttrInternal = 0,
+    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<RoomGroupPasswordConfig>>> passwordConfig = 0,
     uint64_t passwordSlotMask = 0,
-    flatbuffers::Offset<flatbuffers::Vector<uint16_t>> ownerPrivilegeRank = 0) {
+    ::flatbuffers::Offset<::flatbuffers::Vector<uint16_t>> ownerPrivilegeRank = 0) {
   SetRoomDataInternalRequestBuilder builder_(_fbb);
   builder_.add_passwordSlotMask(passwordSlotMask);
   builder_.add_roomId(roomId);
@@ -2526,17 +2526,17 @@ inline flatbuffers::Offset<SetRoomDataInternalRequest> CreateSetRoomDataInternal
   return builder_.Finish();
 }
 
-inline flatbuffers::Offset<SetRoomDataInternalRequest> CreateSetRoomDataInternalRequestDirect(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<SetRoomDataInternalRequest> CreateSetRoomDataInternalRequestDirect(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     uint64_t roomId = 0,
     uint32_t flagFilter = 0,
     uint32_t flagAttr = 0,
-    const std::vector<flatbuffers::Offset<BinAttr>> *roomBinAttrInternal = nullptr,
-    const std::vector<flatbuffers::Offset<RoomGroupPasswordConfig>> *passwordConfig = nullptr,
+    const std::vector<::flatbuffers::Offset<BinAttr>> *roomBinAttrInternal = nullptr,
+    const std::vector<::flatbuffers::Offset<RoomGroupPasswordConfig>> *passwordConfig = nullptr,
     uint64_t passwordSlotMask = 0,
     const std::vector<uint16_t> *ownerPrivilegeRank = nullptr) {
-  auto roomBinAttrInternal__ = roomBinAttrInternal ? _fbb.CreateVector<flatbuffers::Offset<BinAttr>>(*roomBinAttrInternal) : 0;
-  auto passwordConfig__ = passwordConfig ? _fbb.CreateVector<flatbuffers::Offset<RoomGroupPasswordConfig>>(*passwordConfig) : 0;
+  auto roomBinAttrInternal__ = roomBinAttrInternal ? _fbb.CreateVector<::flatbuffers::Offset<BinAttr>>(*roomBinAttrInternal) : 0;
+  auto passwordConfig__ = passwordConfig ? _fbb.CreateVector<::flatbuffers::Offset<RoomGroupPasswordConfig>>(*passwordConfig) : 0;
   auto ownerPrivilegeRank__ = ownerPrivilegeRank ? _fbb.CreateVector<uint16_t>(*ownerPrivilegeRank) : 0;
   return CreateSetRoomDataInternalRequest(
       _fbb,
@@ -2549,7 +2549,7 @@ inline flatbuffers::Offset<SetRoomDataInternalRequest> CreateSetRoomDataInternal
       ownerPrivilegeRank__);
 }
 
-struct SetRoomMemberDataInternalRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+struct SetRoomMemberDataInternalRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
   typedef SetRoomMemberDataInternalRequestBuilder Builder;
   enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_ROOMID = 4,
@@ -2566,10 +2566,10 @@ struct SetRoomMemberDataInternalRequest FLATBUFFERS_FINAL_CLASS : private flatbu
   uint8_t teamId() const {
     return GetField<uint8_t>(VT_TEAMID, 0);
   }
-  const flatbuffers::Vector<flatbuffers::Offset<BinAttr>> *roomMemberBinAttrInternal() const {
-    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<BinAttr>> *>(VT_ROOMMEMBERBINATTRINTERNAL);
+  const ::flatbuffers::Vector<::flatbuffers::Offset<BinAttr>> *roomMemberBinAttrInternal() const {
+    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<BinAttr>> *>(VT_ROOMMEMBERBINATTRINTERNAL);
   }
-  bool Verify(flatbuffers::Verifier &verifier) const {
+  bool Verify(::flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
            VerifyField<uint64_t>(verifier, VT_ROOMID, 8) &&
            VerifyField<uint16_t>(verifier, VT_MEMBERID, 2) &&
@@ -2583,8 +2583,8 @@ struct SetRoomMemberDataInternalRequest FLATBUFFERS_FINAL_CLASS : private flatbu
 
 struct SetRoomMemberDataInternalRequestBuilder {
   typedef SetRoomMemberDataInternalRequest Table;
-  flatbuffers::FlatBufferBuilder &fbb_;
-  flatbuffers::uoffset_t start_;
+  ::flatbuffers::FlatBufferBuilder &fbb_;
+  ::flatbuffers::uoffset_t start_;
   void add_roomId(uint64_t roomId) {
     fbb_.AddElement<uint64_t>(SetRoomMemberDataInternalRequest::VT_ROOMID, roomId, 0);
   }
@@ -2594,26 +2594,26 @@ struct SetRoomMemberDataInternalRequestBuilder {
   void add_teamId(uint8_t teamId) {
     fbb_.AddElement<uint8_t>(SetRoomMemberDataInternalRequest::VT_TEAMID, teamId, 0);
   }
-  void add_roomMemberBinAttrInternal(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<BinAttr>>> roomMemberBinAttrInternal) {
+  void add_roomMemberBinAttrInternal(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<BinAttr>>> roomMemberBinAttrInternal) {
     fbb_.AddOffset(SetRoomMemberDataInternalRequest::VT_ROOMMEMBERBINATTRINTERNAL, roomMemberBinAttrInternal);
   }
-  explicit SetRoomMemberDataInternalRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+  explicit SetRoomMemberDataInternalRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
         : fbb_(_fbb) {
     start_ = fbb_.StartTable();
   }
-  flatbuffers::Offset<SetRoomMemberDataInternalRequest> Finish() {
+  ::flatbuffers::Offset<SetRoomMemberDataInternalRequest> Finish() {
     const auto end = fbb_.EndTable(start_);
-    auto o = flatbuffers::Offset<SetRoomMemberDataInternalRequest>(end);
+    auto o = ::flatbuffers::Offset<SetRoomMemberDataInternalRequest>(end);
     return o;
   }
 };
 
-inline flatbuffers::Offset<SetRoomMemberDataInternalRequest> CreateSetRoomMemberDataInternalRequest(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<SetRoomMemberDataInternalRequest> CreateSetRoomMemberDataInternalRequest(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     uint64_t roomId = 0,
     uint16_t memberId = 0,
     uint8_t teamId = 0,
-    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<BinAttr>>> roomMemberBinAttrInternal = 0) {
+    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<BinAttr>>> roomMemberBinAttrInternal = 0) {
   SetRoomMemberDataInternalRequestBuilder builder_(_fbb);
   builder_.add_roomId(roomId);
   builder_.add_roomMemberBinAttrInternal(roomMemberBinAttrInternal);
@@ -2622,13 +2622,13 @@ inline flatbuffers::Offset<SetRoomMemberDataInternalRequest> CreateSetRoomMember
   return builder_.Finish();
 }
 
-inline flatbuffers::Offset<SetRoomMemberDataInternalRequest> CreateSetRoomMemberDataInternalRequestDirect(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<SetRoomMemberDataInternalRequest> CreateSetRoomMemberDataInternalRequestDirect(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     uint64_t roomId = 0,
     uint16_t memberId = 0,
     uint8_t teamId = 0,
-    const std::vector<flatbuffers::Offset<BinAttr>> *roomMemberBinAttrInternal = nullptr) {
-  auto roomMemberBinAttrInternal__ = roomMemberBinAttrInternal ? _fbb.CreateVector<flatbuffers::Offset<BinAttr>>(*roomMemberBinAttrInternal) : 0;
+    const std::vector<::flatbuffers::Offset<BinAttr>> *roomMemberBinAttrInternal = nullptr) {
+  auto roomMemberBinAttrInternal__ = roomMemberBinAttrInternal ? _fbb.CreateVector<::flatbuffers::Offset<BinAttr>>(*roomMemberBinAttrInternal) : 0;
   return CreateSetRoomMemberDataInternalRequest(
       _fbb,
       roomId,
@@ -2637,7 +2637,7 @@ inline flatbuffers::Offset<SetRoomMemberDataInternalRequest> CreateSetRoomMember
       roomMemberBinAttrInternal__);
 }
 
-struct GetRoomDataInternalRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+struct GetRoomDataInternalRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
   typedef GetRoomDataInternalRequestBuilder Builder;
   enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_ROOMID = 4,
@@ -2646,10 +2646,10 @@ struct GetRoomDataInternalRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers:
   uint64_t roomId() const {
     return GetField<uint64_t>(VT_ROOMID, 0);
   }
-  const flatbuffers::Vector<uint16_t> *attrId() const {
-    return GetPointer<const flatbuffers::Vector<uint16_t> *>(VT_ATTRID);
+  const ::flatbuffers::Vector<uint16_t> *attrId() const {
+    return GetPointer<const ::flatbuffers::Vector<uint16_t> *>(VT_ATTRID);
   }
-  bool Verify(flatbuffers::Verifier &verifier) const {
+  bool Verify(::flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
            VerifyField<uint64_t>(verifier, VT_ROOMID, 8) &&
            VerifyOffset(verifier, VT_ATTRID) &&
@@ -2660,37 +2660,37 @@ struct GetRoomDataInternalRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers:
 
 struct GetRoomDataInternalRequestBuilder {
   typedef GetRoomDataInternalRequest Table;
-  flatbuffers::FlatBufferBuilder &fbb_;
-  flatbuffers::uoffset_t start_;
+  ::flatbuffers::FlatBufferBuilder &fbb_;
+  ::flatbuffers::uoffset_t start_;
   void add_roomId(uint64_t roomId) {
     fbb_.AddElement<uint64_t>(GetRoomDataInternalRequest::VT_ROOMID, roomId, 0);
   }
-  void add_attrId(flatbuffers::Offset<flatbuffers::Vector<uint16_t>> attrId) {
+  void add_attrId(::flatbuffers::Offset<::flatbuffers::Vector<uint16_t>> attrId) {
     fbb_.AddOffset(GetRoomDataInternalRequest::VT_ATTRID, attrId);
   }
-  explicit GetRoomDataInternalRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+  explicit GetRoomDataInternalRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
         : fbb_(_fbb) {
     start_ = fbb_.StartTable();
   }
-  flatbuffers::Offset<GetRoomDataInternalRequest> Finish() {
+  ::flatbuffers::Offset<GetRoomDataInternalRequest> Finish() {
     const auto end = fbb_.EndTable(start_);
-    auto o = flatbuffers::Offset<GetRoomDataInternalRequest>(end);
+    auto o = ::flatbuffers::Offset<GetRoomDataInternalRequest>(end);
     return o;
   }
 };
 
-inline flatbuffers::Offset<GetRoomDataInternalRequest> CreateGetRoomDataInternalRequest(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<GetRoomDataInternalRequest> CreateGetRoomDataInternalRequest(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     uint64_t roomId = 0,
-    flatbuffers::Offset<flatbuffers::Vector<uint16_t>> attrId = 0) {
+    ::flatbuffers::Offset<::flatbuffers::Vector<uint16_t>> attrId = 0) {
   GetRoomDataInternalRequestBuilder builder_(_fbb);
   builder_.add_roomId(roomId);
   builder_.add_attrId(attrId);
   return builder_.Finish();
 }
 
-inline flatbuffers::Offset<GetRoomDataInternalRequest> CreateGetRoomDataInternalRequestDirect(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<GetRoomDataInternalRequest> CreateGetRoomDataInternalRequestDirect(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     uint64_t roomId = 0,
     const std::vector<uint16_t> *attrId = nullptr) {
   auto attrId__ = attrId ? _fbb.CreateVector<uint16_t>(*attrId) : 0;
@@ -2700,7 +2700,7 @@ inline flatbuffers::Offset<GetRoomDataInternalRequest> CreateGetRoomDataInternal
       attrId__);
 }
 
-struct RoomMemberUpdateInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+struct RoomMemberUpdateInfo FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
   typedef RoomMemberUpdateInfoBuilder Builder;
   enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_ROOMMEMBERDATAINTERNAL = 4,
@@ -2716,7 +2716,7 @@ struct RoomMemberUpdateInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table
   const PresenceOptionData *optData() const {
     return GetPointer<const PresenceOptionData *>(VT_OPTDATA);
   }
-  bool Verify(flatbuffers::Verifier &verifier) const {
+  bool Verify(::flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
            VerifyOffset(verifier, VT_ROOMMEMBERDATAINTERNAL) &&
            verifier.VerifyTable(roomMemberDataInternal()) &&
@@ -2729,33 +2729,33 @@ struct RoomMemberUpdateInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table
 
 struct RoomMemberUpdateInfoBuilder {
   typedef RoomMemberUpdateInfo Table;
-  flatbuffers::FlatBufferBuilder &fbb_;
-  flatbuffers::uoffset_t start_;
-  void add_roomMemberDataInternal(flatbuffers::Offset<RoomMemberDataInternal> roomMemberDataInternal) {
+  ::flatbuffers::FlatBufferBuilder &fbb_;
+  ::flatbuffers::uoffset_t start_;
+  void add_roomMemberDataInternal(::flatbuffers::Offset<RoomMemberDataInternal> roomMemberDataInternal) {
     fbb_.AddOffset(RoomMemberUpdateInfo::VT_ROOMMEMBERDATAINTERNAL, roomMemberDataInternal);
   }
   void add_eventCause(uint8_t eventCause) {
     fbb_.AddElement<uint8_t>(RoomMemberUpdateInfo::VT_EVENTCAUSE, eventCause, 0);
   }
-  void add_optData(flatbuffers::Offset<PresenceOptionData> optData) {
+  void add_optData(::flatbuffers::Offset<PresenceOptionData> optData) {
     fbb_.AddOffset(RoomMemberUpdateInfo::VT_OPTDATA, optData);
   }
-  explicit RoomMemberUpdateInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+  explicit RoomMemberUpdateInfoBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
         : fbb_(_fbb) {
     start_ = fbb_.StartTable();
   }
-  flatbuffers::Offset<RoomMemberUpdateInfo> Finish() {
+  ::flatbuffers::Offset<RoomMemberUpdateInfo> Finish() {
     const auto end = fbb_.EndTable(start_);
-    auto o = flatbuffers::Offset<RoomMemberUpdateInfo>(end);
+    auto o = ::flatbuffers::Offset<RoomMemberUpdateInfo>(end);
     return o;
   }
 };
 
-inline flatbuffers::Offset<RoomMemberUpdateInfo> CreateRoomMemberUpdateInfo(
-    flatbuffers::FlatBufferBuilder &_fbb,
-    flatbuffers::Offset<RoomMemberDataInternal> roomMemberDataInternal = 0,
+inline ::flatbuffers::Offset<RoomMemberUpdateInfo> CreateRoomMemberUpdateInfo(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
+    ::flatbuffers::Offset<RoomMemberDataInternal> roomMemberDataInternal = 0,
     uint8_t eventCause = 0,
-    flatbuffers::Offset<PresenceOptionData> optData = 0) {
+    ::flatbuffers::Offset<PresenceOptionData> optData = 0) {
   RoomMemberUpdateInfoBuilder builder_(_fbb);
   builder_.add_optData(optData);
   builder_.add_roomMemberDataInternal(roomMemberDataInternal);
@@ -2763,7 +2763,7 @@ inline flatbuffers::Offset<RoomMemberUpdateInfo> CreateRoomMemberUpdateInfo(
   return builder_.Finish();
 }
 
-struct RoomUpdateInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+struct RoomUpdateInfo FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
   typedef RoomUpdateInfoBuilder Builder;
   enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_EVENTCAUSE = 4,
@@ -2779,7 +2779,7 @@ struct RoomUpdateInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
   const PresenceOptionData *optData() const {
     return GetPointer<const PresenceOptionData *>(VT_OPTDATA);
   }
-  bool Verify(flatbuffers::Verifier &verifier) const {
+  bool Verify(::flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
            VerifyField<uint8_t>(verifier, VT_EVENTCAUSE, 1) &&
            VerifyField<int32_t>(verifier, VT_ERRORCODE, 4) &&
@@ -2791,33 +2791,33 @@ struct RoomUpdateInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
 
 struct RoomUpdateInfoBuilder {
   typedef RoomUpdateInfo Table;
-  flatbuffers::FlatBufferBuilder &fbb_;
-  flatbuffers::uoffset_t start_;
+  ::flatbuffers::FlatBufferBuilder &fbb_;
+  ::flatbuffers::uoffset_t start_;
   void add_eventCause(uint8_t eventCause) {
     fbb_.AddElement<uint8_t>(RoomUpdateInfo::VT_EVENTCAUSE, eventCause, 0);
   }
   void add_errorCode(int32_t errorCode) {
     fbb_.AddElement<int32_t>(RoomUpdateInfo::VT_ERRORCODE, errorCode, 0);
   }
-  void add_optData(flatbuffers::Offset<PresenceOptionData> optData) {
+  void add_optData(::flatbuffers::Offset<PresenceOptionData> optData) {
     fbb_.AddOffset(RoomUpdateInfo::VT_OPTDATA, optData);
   }
-  explicit RoomUpdateInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+  explicit RoomUpdateInfoBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
         : fbb_(_fbb) {
     start_ = fbb_.StartTable();
   }
-  flatbuffers::Offset<RoomUpdateInfo> Finish() {
+  ::flatbuffers::Offset<RoomUpdateInfo> Finish() {
     const auto end = fbb_.EndTable(start_);
-    auto o = flatbuffers::Offset<RoomUpdateInfo>(end);
+    auto o = ::flatbuffers::Offset<RoomUpdateInfo>(end);
     return o;
   }
 };
 
-inline flatbuffers::Offset<RoomUpdateInfo> CreateRoomUpdateInfo(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<RoomUpdateInfo> CreateRoomUpdateInfo(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     uint8_t eventCause = 0,
     int32_t errorCode = 0,
-    flatbuffers::Offset<PresenceOptionData> optData = 0) {
+    ::flatbuffers::Offset<PresenceOptionData> optData = 0) {
   RoomUpdateInfoBuilder builder_(_fbb);
   builder_.add_optData(optData);
   builder_.add_errorCode(errorCode);
@@ -2825,7 +2825,7 @@ inline flatbuffers::Offset<RoomUpdateInfo> CreateRoomUpdateInfo(
   return builder_.Finish();
 }
 
-struct RoomDataInternalUpdateInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+struct RoomDataInternalUpdateInfo FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
   typedef RoomDataInternalUpdateInfoBuilder Builder;
   enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_NEWROOMDATAINTERNAL = 4,
@@ -2843,13 +2843,13 @@ struct RoomDataInternalUpdateInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers:
   uint64_t prevRoomPasswordSlotMask() const {
     return GetField<uint64_t>(VT_PREVROOMPASSWORDSLOTMASK, 0);
   }
-  const flatbuffers::Vector<uint8_t> *newRoomGroup() const {
-    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_NEWROOMGROUP);
+  const ::flatbuffers::Vector<uint8_t> *newRoomGroup() const {
+    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_NEWROOMGROUP);
   }
-  const flatbuffers::Vector<uint16_t> *newRoomBinAttrInternal() const {
-    return GetPointer<const flatbuffers::Vector<uint16_t> *>(VT_NEWROOMBINATTRINTERNAL);
+  const ::flatbuffers::Vector<uint16_t> *newRoomBinAttrInternal() const {
+    return GetPointer<const ::flatbuffers::Vector<uint16_t> *>(VT_NEWROOMBINATTRINTERNAL);
   }
-  bool Verify(flatbuffers::Verifier &verifier) const {
+  bool Verify(::flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
            VerifyOffset(verifier, VT_NEWROOMDATAINTERNAL) &&
            verifier.VerifyTable(newRoomDataInternal()) &&
@@ -2865,9 +2865,9 @@ struct RoomDataInternalUpdateInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers:
 
 struct RoomDataInternalUpdateInfoBuilder {
   typedef RoomDataInternalUpdateInfo Table;
-  flatbuffers::FlatBufferBuilder &fbb_;
-  flatbuffers::uoffset_t start_;
-  void add_newRoomDataInternal(flatbuffers::Offset<RoomDataInternal> newRoomDataInternal) {
+  ::flatbuffers::FlatBufferBuilder &fbb_;
+  ::flatbuffers::uoffset_t start_;
+  void add_newRoomDataInternal(::flatbuffers::Offset<RoomDataInternal> newRoomDataInternal) {
     fbb_.AddOffset(RoomDataInternalUpdateInfo::VT_NEWROOMDATAINTERNAL, newRoomDataInternal);
   }
   void add_prevFlagAttr(uint32_t prevFlagAttr) {
@@ -2876,30 +2876,30 @@ struct RoomDataInternalUpdateInfoBuilder {
   void add_prevRoomPasswordSlotMask(uint64_t prevRoomPasswordSlotMask) {
     fbb_.AddElement<uint64_t>(RoomDataInternalUpdateInfo::VT_PREVROOMPASSWORDSLOTMASK, prevRoomPasswordSlotMask, 0);
   }
-  void add_newRoomGroup(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> newRoomGroup) {
+  void add_newRoomGroup(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> newRoomGroup) {
     fbb_.AddOffset(RoomDataInternalUpdateInfo::VT_NEWROOMGROUP, newRoomGroup);
   }
-  void add_newRoomBinAttrInternal(flatbuffers::Offset<flatbuffers::Vector<uint16_t>> newRoomBinAttrInternal) {
+  void add_newRoomBinAttrInternal(::flatbuffers::Offset<::flatbuffers::Vector<uint16_t>> newRoomBinAttrInternal) {
     fbb_.AddOffset(RoomDataInternalUpdateInfo::VT_NEWROOMBINATTRINTERNAL, newRoomBinAttrInternal);
   }
-  explicit RoomDataInternalUpdateInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+  explicit RoomDataInternalUpdateInfoBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
         : fbb_(_fbb) {
     start_ = fbb_.StartTable();
   }
-  flatbuffers::Offset<RoomDataInternalUpdateInfo> Finish() {
+  ::flatbuffers::Offset<RoomDataInternalUpdateInfo> Finish() {
     const auto end = fbb_.EndTable(start_);
-    auto o = flatbuffers::Offset<RoomDataInternalUpdateInfo>(end);
+    auto o = ::flatbuffers::Offset<RoomDataInternalUpdateInfo>(end);
     return o;
   }
 };
 
-inline flatbuffers::Offset<RoomDataInternalUpdateInfo> CreateRoomDataInternalUpdateInfo(
-    flatbuffers::FlatBufferBuilder &_fbb,
-    flatbuffers::Offset<RoomDataInternal> newRoomDataInternal = 0,
+inline ::flatbuffers::Offset<RoomDataInternalUpdateInfo> CreateRoomDataInternalUpdateInfo(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
+    ::flatbuffers::Offset<RoomDataInternal> newRoomDataInternal = 0,
     uint32_t prevFlagAttr = 0,
     uint64_t prevRoomPasswordSlotMask = 0,
-    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> newRoomGroup = 0,
-    flatbuffers::Offset<flatbuffers::Vector<uint16_t>> newRoomBinAttrInternal = 0) {
+    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> newRoomGroup = 0,
+    ::flatbuffers::Offset<::flatbuffers::Vector<uint16_t>> newRoomBinAttrInternal = 0) {
   RoomDataInternalUpdateInfoBuilder builder_(_fbb);
   builder_.add_prevRoomPasswordSlotMask(prevRoomPasswordSlotMask);
   builder_.add_newRoomBinAttrInternal(newRoomBinAttrInternal);
@@ -2909,9 +2909,9 @@ inline flatbuffers::Offset<RoomDataInternalUpdateInfo> CreateRoomDataInternalUpd
   return builder_.Finish();
 }
 
-inline flatbuffers::Offset<RoomDataInternalUpdateInfo> CreateRoomDataInternalUpdateInfoDirect(
-    flatbuffers::FlatBufferBuilder &_fbb,
-    flatbuffers::Offset<RoomDataInternal> newRoomDataInternal = 0,
+inline ::flatbuffers::Offset<RoomDataInternalUpdateInfo> CreateRoomDataInternalUpdateInfoDirect(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
+    ::flatbuffers::Offset<RoomDataInternal> newRoomDataInternal = 0,
     uint32_t prevFlagAttr = 0,
     uint64_t prevRoomPasswordSlotMask = 0,
     const std::vector<uint8_t> *newRoomGroup = nullptr,
@@ -2927,7 +2927,7 @@ inline flatbuffers::Offset<RoomDataInternalUpdateInfo> CreateRoomDataInternalUpd
       newRoomBinAttrInternal__);
 }
 
-struct RoomMemberDataInternalUpdateInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+struct RoomMemberDataInternalUpdateInfo FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
   typedef RoomMemberDataInternalUpdateInfoBuilder Builder;
   enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_NEWROOMMEMBERDATAINTERNAL = 4,
@@ -2944,10 +2944,10 @@ struct RoomMemberDataInternalUpdateInfo FLATBUFFERS_FINAL_CLASS : private flatbu
   uint8_t prevTeamId() const {
     return GetField<uint8_t>(VT_PREVTEAMID, 0);
   }
-  const flatbuffers::Vector<uint16_t> *newRoomMemberBinAttrInternal() const {
-    return GetPointer<const flatbuffers::Vector<uint16_t> *>(VT_NEWROOMMEMBERBINATTRINTERNAL);
+  const ::flatbuffers::Vector<uint16_t> *newRoomMemberBinAttrInternal() const {
+    return GetPointer<const ::flatbuffers::Vector<uint16_t> *>(VT_NEWROOMMEMBERBINATTRINTERNAL);
   }
-  bool Verify(flatbuffers::Verifier &verifier) const {
+  bool Verify(::flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
            VerifyOffset(verifier, VT_NEWROOMMEMBERDATAINTERNAL) &&
            verifier.VerifyTable(newRoomMemberDataInternal()) &&
@@ -2961,9 +2961,9 @@ struct RoomMemberDataInternalUpdateInfo FLATBUFFERS_FINAL_CLASS : private flatbu
 
 struct RoomMemberDataInternalUpdateInfoBuilder {
   typedef RoomMemberDataInternalUpdateInfo Table;
-  flatbuffers::FlatBufferBuilder &fbb_;
-  flatbuffers::uoffset_t start_;
-  void add_newRoomMemberDataInternal(flatbuffers::Offset<RoomMemberDataInternal> newRoomMemberDataInternal) {
+  ::flatbuffers::FlatBufferBuilder &fbb_;
+  ::flatbuffers::uoffset_t start_;
+  void add_newRoomMemberDataInternal(::flatbuffers::Offset<RoomMemberDataInternal> newRoomMemberDataInternal) {
     fbb_.AddOffset(RoomMemberDataInternalUpdateInfo::VT_NEWROOMMEMBERDATAINTERNAL, newRoomMemberDataInternal);
   }
   void add_prevFlagAttr(uint32_t prevFlagAttr) {
@@ -2972,26 +2972,26 @@ struct RoomMemberDataInternalUpdateInfoBuilder {
   void add_prevTeamId(uint8_t prevTeamId) {
     fbb_.AddElement<uint8_t>(RoomMemberDataInternalUpdateInfo::VT_PREVTEAMID, prevTeamId, 0);
   }
-  void add_newRoomMemberBinAttrInternal(flatbuffers::Offset<flatbuffers::Vector<uint16_t>> newRoomMemberBinAttrInternal) {
+  void add_newRoomMemberBinAttrInternal(::flatbuffers::Offset<::flatbuffers::Vector<uint16_t>> newRoomMemberBinAttrInternal) {
     fbb_.AddOffset(RoomMemberDataInternalUpdateInfo::VT_NEWROOMMEMBERBINATTRINTERNAL, newRoomMemberBinAttrInternal);
   }
-  explicit RoomMemberDataInternalUpdateInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+  explicit RoomMemberDataInternalUpdateInfoBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
         : fbb_(_fbb) {
     start_ = fbb_.StartTable();
   }
-  flatbuffers::Offset<RoomMemberDataInternalUpdateInfo> Finish() {
+  ::flatbuffers::Offset<RoomMemberDataInternalUpdateInfo> Finish() {
     const auto end = fbb_.EndTable(start_);
-    auto o = flatbuffers::Offset<RoomMemberDataInternalUpdateInfo>(end);
+    auto o = ::flatbuffers::Offset<RoomMemberDataInternalUpdateInfo>(end);
     return o;
   }
 };
 
-inline flatbuffers::Offset<RoomMemberDataInternalUpdateInfo> CreateRoomMemberDataInternalUpdateInfo(
-    flatbuffers::FlatBufferBuilder &_fbb,
-    flatbuffers::Offset<RoomMemberDataInternal> newRoomMemberDataInternal = 0,
+inline ::flatbuffers::Offset<RoomMemberDataInternalUpdateInfo> CreateRoomMemberDataInternalUpdateInfo(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
+    ::flatbuffers::Offset<RoomMemberDataInternal> newRoomMemberDataInternal = 0,
     uint32_t prevFlagAttr = 0,
     uint8_t prevTeamId = 0,
-    flatbuffers::Offset<flatbuffers::Vector<uint16_t>> newRoomMemberBinAttrInternal = 0) {
+    ::flatbuffers::Offset<::flatbuffers::Vector<uint16_t>> newRoomMemberBinAttrInternal = 0) {
   RoomMemberDataInternalUpdateInfoBuilder builder_(_fbb);
   builder_.add_newRoomMemberBinAttrInternal(newRoomMemberBinAttrInternal);
   builder_.add_prevFlagAttr(prevFlagAttr);
@@ -3000,9 +3000,9 @@ inline flatbuffers::Offset<RoomMemberDataInternalUpdateInfo> CreateRoomMemberDat
   return builder_.Finish();
 }
 
-inline flatbuffers::Offset<RoomMemberDataInternalUpdateInfo> CreateRoomMemberDataInternalUpdateInfoDirect(
-    flatbuffers::FlatBufferBuilder &_fbb,
-    flatbuffers::Offset<RoomMemberDataInternal> newRoomMemberDataInternal = 0,
+inline ::flatbuffers::Offset<RoomMemberDataInternalUpdateInfo> CreateRoomMemberDataInternalUpdateInfoDirect(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
+    ::flatbuffers::Offset<RoomMemberDataInternal> newRoomMemberDataInternal = 0,
     uint32_t prevFlagAttr = 0,
     uint8_t prevTeamId = 0,
     const std::vector<uint16_t> *newRoomMemberBinAttrInternal = nullptr) {
@@ -3015,7 +3015,7 @@ inline flatbuffers::Offset<RoomMemberDataInternalUpdateInfo> CreateRoomMemberDat
       newRoomMemberBinAttrInternal__);
 }
 
-struct GetPingInfoResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+struct GetPingInfoResponse FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
   typedef GetPingInfoResponseBuilder Builder;
   enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_SERVERID = 4,
@@ -3035,7 +3035,7 @@ struct GetPingInfoResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table
   uint32_t rtt() const {
     return GetField<uint32_t>(VT_RTT, 0);
   }
-  bool Verify(flatbuffers::Verifier &verifier) const {
+  bool Verify(::flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
            VerifyField<uint16_t>(verifier, VT_SERVERID, 2) &&
            VerifyField<uint32_t>(verifier, VT_WORLDID, 4) &&
@@ -3047,8 +3047,8 @@ struct GetPingInfoResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table
 
 struct GetPingInfoResponseBuilder {
   typedef GetPingInfoResponse Table;
-  flatbuffers::FlatBufferBuilder &fbb_;
-  flatbuffers::uoffset_t start_;
+  ::flatbuffers::FlatBufferBuilder &fbb_;
+  ::flatbuffers::uoffset_t start_;
   void add_serverId(uint16_t serverId) {
     fbb_.AddElement<uint16_t>(GetPingInfoResponse::VT_SERVERID, serverId, 0);
   }
@@ -3061,19 +3061,19 @@ struct GetPingInfoResponseBuilder {
   void add_rtt(uint32_t rtt) {
     fbb_.AddElement<uint32_t>(GetPingInfoResponse::VT_RTT, rtt, 0);
   }
-  explicit GetPingInfoResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+  explicit GetPingInfoResponseBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
         : fbb_(_fbb) {
     start_ = fbb_.StartTable();
   }
-  flatbuffers::Offset<GetPingInfoResponse> Finish() {
+  ::flatbuffers::Offset<GetPingInfoResponse> Finish() {
     const auto end = fbb_.EndTable(start_);
-    auto o = flatbuffers::Offset<GetPingInfoResponse>(end);
+    auto o = ::flatbuffers::Offset<GetPingInfoResponse>(end);
     return o;
   }
 };
 
-inline flatbuffers::Offset<GetPingInfoResponse> CreateGetPingInfoResponse(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<GetPingInfoResponse> CreateGetPingInfoResponse(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     uint16_t serverId = 0,
     uint32_t worldId = 0,
     uint64_t roomId = 0,
@@ -3086,7 +3086,7 @@ inline flatbuffers::Offset<GetPingInfoResponse> CreateGetPingInfoResponse(
   return builder_.Finish();
 }
 
-struct SendRoomMessageRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+struct SendRoomMessageRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
   typedef SendRoomMessageRequestBuilder Builder;
   enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_ROOMID = 4,
@@ -3101,16 +3101,16 @@ struct SendRoomMessageRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Tab
   uint8_t castType() const {
     return GetField<uint8_t>(VT_CASTTYPE, 0);
   }
-  const flatbuffers::Vector<uint16_t> *dst() const {
-    return GetPointer<const flatbuffers::Vector<uint16_t> *>(VT_DST);
+  const ::flatbuffers::Vector<uint16_t> *dst() const {
+    return GetPointer<const ::flatbuffers::Vector<uint16_t> *>(VT_DST);
   }
-  const flatbuffers::Vector<uint8_t> *msg() const {
-    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_MSG);
+  const ::flatbuffers::Vector<uint8_t> *msg() const {
+    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_MSG);
   }
   uint8_t option() const {
     return GetField<uint8_t>(VT_OPTION, 0);
   }
-  bool Verify(flatbuffers::Verifier &verifier) const {
+  bool Verify(::flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
            VerifyField<uint64_t>(verifier, VT_ROOMID, 8) &&
            VerifyField<uint8_t>(verifier, VT_CASTTYPE, 1) &&
@@ -3125,40 +3125,40 @@ struct SendRoomMessageRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Tab
 
 struct SendRoomMessageRequestBuilder {
   typedef SendRoomMessageRequest Table;
-  flatbuffers::FlatBufferBuilder &fbb_;
-  flatbuffers::uoffset_t start_;
+  ::flatbuffers::FlatBufferBuilder &fbb_;
+  ::flatbuffers::uoffset_t start_;
   void add_roomId(uint64_t roomId) {
     fbb_.AddElement<uint64_t>(SendRoomMessageRequest::VT_ROOMID, roomId, 0);
   }
   void add_castType(uint8_t castType) {
     fbb_.AddElement<uint8_t>(SendRoomMessageRequest::VT_CASTTYPE, castType, 0);
   }
-  void add_dst(flatbuffers::Offset<flatbuffers::Vector<uint16_t>> dst) {
+  void add_dst(::flatbuffers::Offset<::flatbuffers::Vector<uint16_t>> dst) {
     fbb_.AddOffset(SendRoomMessageRequest::VT_DST, dst);
   }
-  void add_msg(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> msg) {
+  void add_msg(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> msg) {
     fbb_.AddOffset(SendRoomMessageRequest::VT_MSG, msg);
   }
   void add_option(uint8_t option) {
     fbb_.AddElement<uint8_t>(SendRoomMessageRequest::VT_OPTION, option, 0);
   }
-  explicit SendRoomMessageRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+  explicit SendRoomMessageRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
         : fbb_(_fbb) {
     start_ = fbb_.StartTable();
   }
-  flatbuffers::Offset<SendRoomMessageRequest> Finish() {
+  ::flatbuffers::Offset<SendRoomMessageRequest> Finish() {
     const auto end = fbb_.EndTable(start_);
-    auto o = flatbuffers::Offset<SendRoomMessageRequest>(end);
+    auto o = ::flatbuffers::Offset<SendRoomMessageRequest>(end);
     return o;
   }
 };
 
-inline flatbuffers::Offset<SendRoomMessageRequest> CreateSendRoomMessageRequest(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<SendRoomMessageRequest> CreateSendRoomMessageRequest(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     uint64_t roomId = 0,
     uint8_t castType = 0,
-    flatbuffers::Offset<flatbuffers::Vector<uint16_t>> dst = 0,
-    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> msg = 0,
+    ::flatbuffers::Offset<::flatbuffers::Vector<uint16_t>> dst = 0,
+    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> msg = 0,
     uint8_t option = 0) {
   SendRoomMessageRequestBuilder builder_(_fbb);
   builder_.add_roomId(roomId);
@@ -3169,8 +3169,8 @@ inline flatbuffers::Offset<SendRoomMessageRequest> CreateSendRoomMessageRequest(
   return builder_.Finish();
 }
 
-inline flatbuffers::Offset<SendRoomMessageRequest> CreateSendRoomMessageRequestDirect(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<SendRoomMessageRequest> CreateSendRoomMessageRequestDirect(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     uint64_t roomId = 0,
     uint8_t castType = 0,
     const std::vector<uint16_t> *dst = nullptr,
@@ -3187,7 +3187,7 @@ inline flatbuffers::Offset<SendRoomMessageRequest> CreateSendRoomMessageRequestD
       option);
 }
 
-struct RoomMessageInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+struct RoomMessageInfo FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
   typedef RoomMessageInfoBuilder Builder;
   enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_FILTERED = 4,
@@ -3202,16 +3202,16 @@ struct RoomMessageInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
   uint8_t castType() const {
     return GetField<uint8_t>(VT_CASTTYPE, 0);
   }
-  const flatbuffers::Vector<uint16_t> *dst() const {
-    return GetPointer<const flatbuffers::Vector<uint16_t> *>(VT_DST);
+  const ::flatbuffers::Vector<uint16_t> *dst() const {
+    return GetPointer<const ::flatbuffers::Vector<uint16_t> *>(VT_DST);
   }
   const UserInfo2 *srcMember() const {
     return GetPointer<const UserInfo2 *>(VT_SRCMEMBER);
   }
-  const flatbuffers::Vector<uint8_t> *msg() const {
-    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_MSG);
+  const ::flatbuffers::Vector<uint8_t> *msg() const {
+    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_MSG);
   }
-  bool Verify(flatbuffers::Verifier &verifier) const {
+  bool Verify(::flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
            VerifyField<uint8_t>(verifier, VT_FILTERED, 1) &&
            VerifyField<uint8_t>(verifier, VT_CASTTYPE, 1) &&
@@ -3227,41 +3227,41 @@ struct RoomMessageInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
 
 struct RoomMessageInfoBuilder {
   typedef RoomMessageInfo Table;
-  flatbuffers::FlatBufferBuilder &fbb_;
-  flatbuffers::uoffset_t start_;
+  ::flatbuffers::FlatBufferBuilder &fbb_;
+  ::flatbuffers::uoffset_t start_;
   void add_filtered(bool filtered) {
     fbb_.AddElement<uint8_t>(RoomMessageInfo::VT_FILTERED, static_cast<uint8_t>(filtered), 0);
   }
   void add_castType(uint8_t castType) {
     fbb_.AddElement<uint8_t>(RoomMessageInfo::VT_CASTTYPE, castType, 0);
   }
-  void add_dst(flatbuffers::Offset<flatbuffers::Vector<uint16_t>> dst) {
+  void add_dst(::flatbuffers::Offset<::flatbuffers::Vector<uint16_t>> dst) {
     fbb_.AddOffset(RoomMessageInfo::VT_DST, dst);
   }
-  void add_srcMember(flatbuffers::Offset<UserInfo2> srcMember) {
+  void add_srcMember(::flatbuffers::Offset<UserInfo2> srcMember) {
     fbb_.AddOffset(RoomMessageInfo::VT_SRCMEMBER, srcMember);
   }
-  void add_msg(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> msg) {
+  void add_msg(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> msg) {
     fbb_.AddOffset(RoomMessageInfo::VT_MSG, msg);
   }
-  explicit RoomMessageInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+  explicit RoomMessageInfoBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
         : fbb_(_fbb) {
     start_ = fbb_.StartTable();
   }
-  flatbuffers::Offset<RoomMessageInfo> Finish() {
+  ::flatbuffers::Offset<RoomMessageInfo> Finish() {
     const auto end = fbb_.EndTable(start_);
-    auto o = flatbuffers::Offset<RoomMessageInfo>(end);
+    auto o = ::flatbuffers::Offset<RoomMessageInfo>(end);
     return o;
   }
 };
 
-inline flatbuffers::Offset<RoomMessageInfo> CreateRoomMessageInfo(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<RoomMessageInfo> CreateRoomMessageInfo(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     bool filtered = false,
     uint8_t castType = 0,
-    flatbuffers::Offset<flatbuffers::Vector<uint16_t>> dst = 0,
-    flatbuffers::Offset<UserInfo2> srcMember = 0,
-    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> msg = 0) {
+    ::flatbuffers::Offset<::flatbuffers::Vector<uint16_t>> dst = 0,
+    ::flatbuffers::Offset<UserInfo2> srcMember = 0,
+    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> msg = 0) {
   RoomMessageInfoBuilder builder_(_fbb);
   builder_.add_msg(msg);
   builder_.add_srcMember(srcMember);
@@ -3271,12 +3271,12 @@ inline flatbuffers::Offset<RoomMessageInfo> CreateRoomMessageInfo(
   return builder_.Finish();
 }
 
-inline flatbuffers::Offset<RoomMessageInfo> CreateRoomMessageInfoDirect(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<RoomMessageInfo> CreateRoomMessageInfoDirect(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     bool filtered = false,
     uint8_t castType = 0,
     const std::vector<uint16_t> *dst = nullptr,
-    flatbuffers::Offset<UserInfo2> srcMember = 0,
+    ::flatbuffers::Offset<UserInfo2> srcMember = 0,
     const std::vector<uint8_t> *msg = nullptr) {
   auto dst__ = dst ? _fbb.CreateVector<uint16_t>(*dst) : 0;
   auto msg__ = msg ? _fbb.CreateVector<uint8_t>(*msg) : 0;
@@ -3289,7 +3289,7 @@ inline flatbuffers::Offset<RoomMessageInfo> CreateRoomMessageInfoDirect(
       msg__);
 }
 
-struct MessageDetails FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+struct MessageDetails FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
   typedef MessageDetailsBuilder Builder;
   enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_COMMUNICATIONID = 4,
@@ -3301,8 +3301,8 @@ struct MessageDetails FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
     VT_BODY = 16,
     VT_DATA = 18
   };
-  const flatbuffers::String *communicationId() const {
-    return GetPointer<const flatbuffers::String *>(VT_COMMUNICATIONID);
+  const ::flatbuffers::String *communicationId() const {
+    return GetPointer<const ::flatbuffers::String *>(VT_COMMUNICATIONID);
   }
   uint64_t msgId() const {
     return GetField<uint64_t>(VT_MSGID, 0);
@@ -3316,16 +3316,16 @@ struct MessageDetails FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
   uint32_t msgFeatures() const {
     return GetField<uint32_t>(VT_MSGFEATURES, 0);
   }
-  const flatbuffers::String *subject() const {
-    return GetPointer<const flatbuffers::String *>(VT_SUBJECT);
+  const ::flatbuffers::String *subject() const {
+    return GetPointer<const ::flatbuffers::String *>(VT_SUBJECT);
   }
-  const flatbuffers::String *body() const {
-    return GetPointer<const flatbuffers::String *>(VT_BODY);
+  const ::flatbuffers::String *body() const {
+    return GetPointer<const ::flatbuffers::String *>(VT_BODY);
   }
-  const flatbuffers::Vector<uint8_t> *data() const {
-    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
+  const ::flatbuffers::Vector<uint8_t> *data() const {
+    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_DATA);
   }
-  bool Verify(flatbuffers::Verifier &verifier) const {
+  bool Verify(::flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
            VerifyOffset(verifier, VT_COMMUNICATIONID) &&
            verifier.VerifyString(communicationId()) &&
@@ -3345,9 +3345,9 @@ struct MessageDetails FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
 
 struct MessageDetailsBuilder {
   typedef MessageDetails Table;
-  flatbuffers::FlatBufferBuilder &fbb_;
-  flatbuffers::uoffset_t start_;
-  void add_communicationId(flatbuffers::Offset<flatbuffers::String> communicationId) {
+  ::flatbuffers::FlatBufferBuilder &fbb_;
+  ::flatbuffers::uoffset_t start_;
+  void add_communicationId(::flatbuffers::Offset<::flatbuffers::String> communicationId) {
     fbb_.AddOffset(MessageDetails::VT_COMMUNICATIONID, communicationId);
   }
   void add_msgId(uint64_t msgId) {
@@ -3362,36 +3362,36 @@ struct MessageDetailsBuilder {
   void add_msgFeatures(uint32_t msgFeatures) {
     fbb_.AddElement<uint32_t>(MessageDetails::VT_MSGFEATURES, msgFeatures, 0);
   }
-  void add_subject(flatbuffers::Offset<flatbuffers::String> subject) {
+  void add_subject(::flatbuffers::Offset<::flatbuffers::String> subject) {
     fbb_.AddOffset(MessageDetails::VT_SUBJECT, subject);
   }
-  void add_body(flatbuffers::Offset<flatbuffers::String> body) {
+  void add_body(::flatbuffers::Offset<::flatbuffers::String> body) {
     fbb_.AddOffset(MessageDetails::VT_BODY, body);
   }
-  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data) {
+  void add_data(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data) {
     fbb_.AddOffset(MessageDetails::VT_DATA, data);
   }
-  explicit MessageDetailsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+  explicit MessageDetailsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
         : fbb_(_fbb) {
     start_ = fbb_.StartTable();
   }
-  flatbuffers::Offset<MessageDetails> Finish() {
+  ::flatbuffers::Offset<MessageDetails> Finish() {
     const auto end = fbb_.EndTable(start_);
-    auto o = flatbuffers::Offset<MessageDetails>(end);
+    auto o = ::flatbuffers::Offset<MessageDetails>(end);
     return o;
   }
 };
 
-inline flatbuffers::Offset<MessageDetails> CreateMessageDetails(
-    flatbuffers::FlatBufferBuilder &_fbb,
-    flatbuffers::Offset<flatbuffers::String> communicationId = 0,
+inline ::flatbuffers::Offset<MessageDetails> CreateMessageDetails(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
+    ::flatbuffers::Offset<::flatbuffers::String> communicationId = 0,
     uint64_t msgId = 0,
     uint16_t mainType = 0,
     uint16_t subType = 0,
     uint32_t msgFeatures = 0,
-    flatbuffers::Offset<flatbuffers::String> subject = 0,
-    flatbuffers::Offset<flatbuffers::String> body = 0,
-    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data = 0) {
+    ::flatbuffers::Offset<::flatbuffers::String> subject = 0,
+    ::flatbuffers::Offset<::flatbuffers::String> body = 0,
+    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data = 0) {
   MessageDetailsBuilder builder_(_fbb);
   builder_.add_msgId(msgId);
   builder_.add_data(data);
@@ -3404,8 +3404,8 @@ inline flatbuffers::Offset<MessageDetails> CreateMessageDetails(
   return builder_.Finish();
 }
 
-inline flatbuffers::Offset<MessageDetails> CreateMessageDetailsDirect(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<MessageDetails> CreateMessageDetailsDirect(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     const char *communicationId = nullptr,
     uint64_t msgId = 0,
     uint16_t mainType = 0,
@@ -3430,22 +3430,22 @@ inline flatbuffers::Offset<MessageDetails> CreateMessageDetailsDirect(
       data__);
 }
 
-struct SendMessageRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+struct SendMessageRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
   typedef SendMessageRequestBuilder Builder;
   enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_MESSAGE = 4,
     VT_NPIDS = 6
   };
-  const flatbuffers::Vector<uint8_t> *message() const {
-    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_MESSAGE);
+  const ::flatbuffers::Vector<uint8_t> *message() const {
+    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_MESSAGE);
   }
   const MessageDetails *message_nested_root() const {
-    return flatbuffers::GetRoot<MessageDetails>(message()->Data());
+    return ::flatbuffers::GetRoot<MessageDetails>(message()->Data());
   }
-  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *npids() const {
-    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_NPIDS);
+  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *npids() const {
+    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_NPIDS);
   }
-  bool Verify(flatbuffers::Verifier &verifier) const {
+  bool Verify(::flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
            VerifyOffset(verifier, VT_MESSAGE) &&
            verifier.VerifyVector(message()) &&
@@ -3459,48 +3459,48 @@ struct SendMessageRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
 
 struct SendMessageRequestBuilder {
   typedef SendMessageRequest Table;
-  flatbuffers::FlatBufferBuilder &fbb_;
-  flatbuffers::uoffset_t start_;
-  void add_message(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> message) {
+  ::flatbuffers::FlatBufferBuilder &fbb_;
+  ::flatbuffers::uoffset_t start_;
+  void add_message(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> message) {
     fbb_.AddOffset(SendMessageRequest::VT_MESSAGE, message);
   }
-  void add_npids(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> npids) {
+  void add_npids(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> npids) {
     fbb_.AddOffset(SendMessageRequest::VT_NPIDS, npids);
   }
-  explicit SendMessageRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+  explicit SendMessageRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
         : fbb_(_fbb) {
     start_ = fbb_.StartTable();
   }
-  flatbuffers::Offset<SendMessageRequest> Finish() {
+  ::flatbuffers::Offset<SendMessageRequest> Finish() {
     const auto end = fbb_.EndTable(start_);
-    auto o = flatbuffers::Offset<SendMessageRequest>(end);
+    auto o = ::flatbuffers::Offset<SendMessageRequest>(end);
     return o;
   }
 };
 
-inline flatbuffers::Offset<SendMessageRequest> CreateSendMessageRequest(
-    flatbuffers::FlatBufferBuilder &_fbb,
-    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> message = 0,
-    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> npids = 0) {
+inline ::flatbuffers::Offset<SendMessageRequest> CreateSendMessageRequest(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
+    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> message = 0,
+    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> npids = 0) {
   SendMessageRequestBuilder builder_(_fbb);
   builder_.add_npids(npids);
   builder_.add_message(message);
   return builder_.Finish();
 }
 
-inline flatbuffers::Offset<SendMessageRequest> CreateSendMessageRequestDirect(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<SendMessageRequest> CreateSendMessageRequestDirect(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     const std::vector<uint8_t> *message = nullptr,
-    const std::vector<flatbuffers::Offset<flatbuffers::String>> *npids = nullptr) {
+    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *npids = nullptr) {
   auto message__ = message ? _fbb.CreateVector<uint8_t>(*message) : 0;
-  auto npids__ = npids ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*npids) : 0;
+  auto npids__ = npids ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*npids) : 0;
   return CreateSendMessageRequest(
       _fbb,
       message__,
       npids__);
 }
 
-struct BoardInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+struct BoardInfo FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
   typedef BoardInfoBuilder Builder;
   enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_RANKLIMIT = 4,
@@ -3524,7 +3524,7 @@ struct BoardInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
   uint32_t uploadSizeLimit() const {
     return GetField<uint32_t>(VT_UPLOADSIZELIMIT, 0);
   }
-  bool Verify(flatbuffers::Verifier &verifier) const {
+  bool Verify(::flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
            VerifyField<uint32_t>(verifier, VT_RANKLIMIT, 4) &&
            VerifyField<uint32_t>(verifier, VT_UPDATEMODE, 4) &&
@@ -3537,8 +3537,8 @@ struct BoardInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
 
 struct BoardInfoBuilder {
   typedef BoardInfo Table;
-  flatbuffers::FlatBufferBuilder &fbb_;
-  flatbuffers::uoffset_t start_;
+  ::flatbuffers::FlatBufferBuilder &fbb_;
+  ::flatbuffers::uoffset_t start_;
   void add_rankLimit(uint32_t rankLimit) {
     fbb_.AddElement<uint32_t>(BoardInfo::VT_RANKLIMIT, rankLimit, 0);
   }
@@ -3554,19 +3554,19 @@ struct BoardInfoBuilder {
   void add_uploadSizeLimit(uint32_t uploadSizeLimit) {
     fbb_.AddElement<uint32_t>(BoardInfo::VT_UPLOADSIZELIMIT, uploadSizeLimit, 0);
   }
-  explicit BoardInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+  explicit BoardInfoBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
         : fbb_(_fbb) {
     start_ = fbb_.StartTable();
   }
-  flatbuffers::Offset<BoardInfo> Finish() {
+  ::flatbuffers::Offset<BoardInfo> Finish() {
     const auto end = fbb_.EndTable(start_);
-    auto o = flatbuffers::Offset<BoardInfo>(end);
+    auto o = ::flatbuffers::Offset<BoardInfo>(end);
     return o;
   }
 };
 
-inline flatbuffers::Offset<BoardInfo> CreateBoardInfo(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<BoardInfo> CreateBoardInfo(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     uint32_t rankLimit = 0,
     uint32_t updateMode = 0,
     uint32_t sortMode = 0,
@@ -3581,7 +3581,7 @@ inline flatbuffers::Offset<BoardInfo> CreateBoardInfo(
   return builder_.Finish();
 }
 
-struct RecordScoreRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+struct RecordScoreRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
   typedef RecordScoreRequestBuilder Builder;
   enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_BOARDID = 4,
@@ -3599,13 +3599,13 @@ struct RecordScoreRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
   int64_t score() const {
     return GetField<int64_t>(VT_SCORE, 0);
   }
-  const flatbuffers::String *comment() const {
-    return GetPointer<const flatbuffers::String *>(VT_COMMENT);
+  const ::flatbuffers::String *comment() const {
+    return GetPointer<const ::flatbuffers::String *>(VT_COMMENT);
   }
-  const flatbuffers::Vector<uint8_t> *data() const {
-    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
+  const ::flatbuffers::Vector<uint8_t> *data() const {
+    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_DATA);
   }
-  bool Verify(flatbuffers::Verifier &verifier) const {
+  bool Verify(::flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
            VerifyField<uint32_t>(verifier, VT_BOARDID, 4) &&
            VerifyField<int32_t>(verifier, VT_PCID, 4) &&
@@ -3620,8 +3620,8 @@ struct RecordScoreRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
 
 struct RecordScoreRequestBuilder {
   typedef RecordScoreRequest Table;
-  flatbuffers::FlatBufferBuilder &fbb_;
-  flatbuffers::uoffset_t start_;
+  ::flatbuffers::FlatBufferBuilder &fbb_;
+  ::flatbuffers::uoffset_t start_;
   void add_boardId(uint32_t boardId) {
     fbb_.AddElement<uint32_t>(RecordScoreRequest::VT_BOARDID, boardId, 0);
   }
@@ -3631,30 +3631,30 @@ struct RecordScoreRequestBuilder {
   void add_score(int64_t score) {
     fbb_.AddElement<int64_t>(RecordScoreRequest::VT_SCORE, score, 0);
   }
-  void add_comment(flatbuffers::Offset<flatbuffers::String> comment) {
+  void add_comment(::flatbuffers::Offset<::flatbuffers::String> comment) {
     fbb_.AddOffset(RecordScoreRequest::VT_COMMENT, comment);
   }
-  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data) {
+  void add_data(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data) {
     fbb_.AddOffset(RecordScoreRequest::VT_DATA, data);
   }
-  explicit RecordScoreRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+  explicit RecordScoreRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
         : fbb_(_fbb) {
     start_ = fbb_.StartTable();
   }
-  flatbuffers::Offset<RecordScoreRequest> Finish() {
+  ::flatbuffers::Offset<RecordScoreRequest> Finish() {
     const auto end = fbb_.EndTable(start_);
-    auto o = flatbuffers::Offset<RecordScoreRequest>(end);
+    auto o = ::flatbuffers::Offset<RecordScoreRequest>(end);
     return o;
   }
 };
 
-inline flatbuffers::Offset<RecordScoreRequest> CreateRecordScoreRequest(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<RecordScoreRequest> CreateRecordScoreRequest(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     uint32_t boardId = 0,
     int32_t pcId = 0,
     int64_t score = 0,
-    flatbuffers::Offset<flatbuffers::String> comment = 0,
-    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data = 0) {
+    ::flatbuffers::Offset<::flatbuffers::String> comment = 0,
+    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data = 0) {
   RecordScoreRequestBuilder builder_(_fbb);
   builder_.add_score(score);
   builder_.add_data(data);
@@ -3664,8 +3664,8 @@ inline flatbuffers::Offset<RecordScoreRequest> CreateRecordScoreRequest(
   return builder_.Finish();
 }
 
-inline flatbuffers::Offset<RecordScoreRequest> CreateRecordScoreRequestDirect(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<RecordScoreRequest> CreateRecordScoreRequestDirect(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     uint32_t boardId = 0,
     int32_t pcId = 0,
     int64_t score = 0,
@@ -3682,7 +3682,7 @@ inline flatbuffers::Offset<RecordScoreRequest> CreateRecordScoreRequestDirect(
       data__);
 }
 
-struct GetScoreRangeRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+struct GetScoreRangeRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
   typedef GetScoreRangeRequestBuilder Builder;
   enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_BOARDID = 4,
@@ -3706,7 +3706,7 @@ struct GetScoreRangeRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table
   bool withGameInfo() const {
     return GetField<uint8_t>(VT_WITHGAMEINFO, 0) != 0;
   }
-  bool Verify(flatbuffers::Verifier &verifier) const {
+  bool Verify(::flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
            VerifyField<uint32_t>(verifier, VT_BOARDID, 4) &&
            VerifyField<uint32_t>(verifier, VT_STARTRANK, 4) &&
@@ -3719,8 +3719,8 @@ struct GetScoreRangeRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table
 
 struct GetScoreRangeRequestBuilder {
   typedef GetScoreRangeRequest Table;
-  flatbuffers::FlatBufferBuilder &fbb_;
-  flatbuffers::uoffset_t start_;
+  ::flatbuffers::FlatBufferBuilder &fbb_;
+  ::flatbuffers::uoffset_t start_;
   void add_boardId(uint32_t boardId) {
     fbb_.AddElement<uint32_t>(GetScoreRangeRequest::VT_BOARDID, boardId, 0);
   }
@@ -3736,19 +3736,19 @@ struct GetScoreRangeRequestBuilder {
   void add_withGameInfo(bool withGameInfo) {
     fbb_.AddElement<uint8_t>(GetScoreRangeRequest::VT_WITHGAMEINFO, static_cast<uint8_t>(withGameInfo), 0);
   }
-  explicit GetScoreRangeRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+  explicit GetScoreRangeRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
         : fbb_(_fbb) {
     start_ = fbb_.StartTable();
   }
-  flatbuffers::Offset<GetScoreRangeRequest> Finish() {
+  ::flatbuffers::Offset<GetScoreRangeRequest> Finish() {
     const auto end = fbb_.EndTable(start_);
-    auto o = flatbuffers::Offset<GetScoreRangeRequest>(end);
+    auto o = ::flatbuffers::Offset<GetScoreRangeRequest>(end);
     return o;
   }
 };
 
-inline flatbuffers::Offset<GetScoreRangeRequest> CreateGetScoreRangeRequest(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<GetScoreRangeRequest> CreateGetScoreRangeRequest(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     uint32_t boardId = 0,
     uint32_t startRank = 0,
     uint32_t numRanks = 0,
@@ -3763,19 +3763,19 @@ inline flatbuffers::Offset<GetScoreRangeRequest> CreateGetScoreRangeRequest(
   return builder_.Finish();
 }
 
-struct ScoreNpIdPcId FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+struct ScoreNpIdPcId FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
   typedef ScoreNpIdPcIdBuilder Builder;
   enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_NPID = 4,
     VT_PCID = 6
   };
-  const flatbuffers::String *npid() const {
-    return GetPointer<const flatbuffers::String *>(VT_NPID);
+  const ::flatbuffers::String *npid() const {
+    return GetPointer<const ::flatbuffers::String *>(VT_NPID);
   }
   int32_t pcId() const {
     return GetField<int32_t>(VT_PCID, 0);
   }
-  bool Verify(flatbuffers::Verifier &verifier) const {
+  bool Verify(::flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
            VerifyOffset(verifier, VT_NPID) &&
            verifier.VerifyString(npid()) &&
@@ -3786,28 +3786,28 @@ struct ScoreNpIdPcId FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
 
 struct ScoreNpIdPcIdBuilder {
   typedef ScoreNpIdPcId Table;
-  flatbuffers::FlatBufferBuilder &fbb_;
-  flatbuffers::uoffset_t start_;
-  void add_npid(flatbuffers::Offset<flatbuffers::String> npid) {
+  ::flatbuffers::FlatBufferBuilder &fbb_;
+  ::flatbuffers::uoffset_t start_;
+  void add_npid(::flatbuffers::Offset<::flatbuffers::String> npid) {
     fbb_.AddOffset(ScoreNpIdPcId::VT_NPID, npid);
   }
   void add_pcId(int32_t pcId) {
     fbb_.AddElement<int32_t>(ScoreNpIdPcId::VT_PCID, pcId, 0);
   }
-  explicit ScoreNpIdPcIdBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+  explicit ScoreNpIdPcIdBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
         : fbb_(_fbb) {
     start_ = fbb_.StartTable();
   }
-  flatbuffers::Offset<ScoreNpIdPcId> Finish() {
+  ::flatbuffers::Offset<ScoreNpIdPcId> Finish() {
     const auto end = fbb_.EndTable(start_);
-    auto o = flatbuffers::Offset<ScoreNpIdPcId>(end);
+    auto o = ::flatbuffers::Offset<ScoreNpIdPcId>(end);
     return o;
   }
 };
 
-inline flatbuffers::Offset<ScoreNpIdPcId> CreateScoreNpIdPcId(
-    flatbuffers::FlatBufferBuilder &_fbb,
-    flatbuffers::Offset<flatbuffers::String> npid = 0,
+inline ::flatbuffers::Offset<ScoreNpIdPcId> CreateScoreNpIdPcId(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
+    ::flatbuffers::Offset<::flatbuffers::String> npid = 0,
     int32_t pcId = 0) {
   ScoreNpIdPcIdBuilder builder_(_fbb);
   builder_.add_pcId(pcId);
@@ -3815,8 +3815,8 @@ inline flatbuffers::Offset<ScoreNpIdPcId> CreateScoreNpIdPcId(
   return builder_.Finish();
 }
 
-inline flatbuffers::Offset<ScoreNpIdPcId> CreateScoreNpIdPcIdDirect(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<ScoreNpIdPcId> CreateScoreNpIdPcIdDirect(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     const char *npid = nullptr,
     int32_t pcId = 0) {
   auto npid__ = npid ? _fbb.CreateString(npid) : 0;
@@ -3826,7 +3826,7 @@ inline flatbuffers::Offset<ScoreNpIdPcId> CreateScoreNpIdPcIdDirect(
       pcId);
 }
 
-struct GetScoreNpIdRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+struct GetScoreNpIdRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
   typedef GetScoreNpIdRequestBuilder Builder;
   enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_BOARDID = 4,
@@ -3837,8 +3837,8 @@ struct GetScoreNpIdRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table
   uint32_t boardId() const {
     return GetField<uint32_t>(VT_BOARDID, 0);
   }
-  const flatbuffers::Vector<flatbuffers::Offset<ScoreNpIdPcId>> *npids() const {
-    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<ScoreNpIdPcId>> *>(VT_NPIDS);
+  const ::flatbuffers::Vector<::flatbuffers::Offset<ScoreNpIdPcId>> *npids() const {
+    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<ScoreNpIdPcId>> *>(VT_NPIDS);
   }
   bool withComment() const {
     return GetField<uint8_t>(VT_WITHCOMMENT, 0) != 0;
@@ -3846,7 +3846,7 @@ struct GetScoreNpIdRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table
   bool withGameInfo() const {
     return GetField<uint8_t>(VT_WITHGAMEINFO, 0) != 0;
   }
-  bool Verify(flatbuffers::Verifier &verifier) const {
+  bool Verify(::flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
            VerifyField<uint32_t>(verifier, VT_BOARDID, 4) &&
            VerifyOffset(verifier, VT_NPIDS) &&
@@ -3860,12 +3860,12 @@ struct GetScoreNpIdRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table
 
 struct GetScoreNpIdRequestBuilder {
   typedef GetScoreNpIdRequest Table;
-  flatbuffers::FlatBufferBuilder &fbb_;
-  flatbuffers::uoffset_t start_;
+  ::flatbuffers::FlatBufferBuilder &fbb_;
+  ::flatbuffers::uoffset_t start_;
   void add_boardId(uint32_t boardId) {
     fbb_.AddElement<uint32_t>(GetScoreNpIdRequest::VT_BOARDID, boardId, 0);
   }
-  void add_npids(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ScoreNpIdPcId>>> npids) {
+  void add_npids(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<ScoreNpIdPcId>>> npids) {
     fbb_.AddOffset(GetScoreNpIdRequest::VT_NPIDS, npids);
   }
   void add_withComment(bool withComment) {
@@ -3874,21 +3874,21 @@ struct GetScoreNpIdRequestBuilder {
   void add_withGameInfo(bool withGameInfo) {
     fbb_.AddElement<uint8_t>(GetScoreNpIdRequest::VT_WITHGAMEINFO, static_cast<uint8_t>(withGameInfo), 0);
   }
-  explicit GetScoreNpIdRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+  explicit GetScoreNpIdRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
         : fbb_(_fbb) {
     start_ = fbb_.StartTable();
   }
-  flatbuffers::Offset<GetScoreNpIdRequest> Finish() {
+  ::flatbuffers::Offset<GetScoreNpIdRequest> Finish() {
     const auto end = fbb_.EndTable(start_);
-    auto o = flatbuffers::Offset<GetScoreNpIdRequest>(end);
+    auto o = ::flatbuffers::Offset<GetScoreNpIdRequest>(end);
     return o;
   }
 };
 
-inline flatbuffers::Offset<GetScoreNpIdRequest> CreateGetScoreNpIdRequest(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<GetScoreNpIdRequest> CreateGetScoreNpIdRequest(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     uint32_t boardId = 0,
-    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ScoreNpIdPcId>>> npids = 0,
+    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<ScoreNpIdPcId>>> npids = 0,
     bool withComment = false,
     bool withGameInfo = false) {
   GetScoreNpIdRequestBuilder builder_(_fbb);
@@ -3899,13 +3899,13 @@ inline flatbuffers::Offset<GetScoreNpIdRequest> CreateGetScoreNpIdRequest(
   return builder_.Finish();
 }
 
-inline flatbuffers::Offset<GetScoreNpIdRequest> CreateGetScoreNpIdRequestDirect(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<GetScoreNpIdRequest> CreateGetScoreNpIdRequestDirect(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     uint32_t boardId = 0,
-    const std::vector<flatbuffers::Offset<ScoreNpIdPcId>> *npids = nullptr,
+    const std::vector<::flatbuffers::Offset<ScoreNpIdPcId>> *npids = nullptr,
     bool withComment = false,
     bool withGameInfo = false) {
-  auto npids__ = npids ? _fbb.CreateVector<flatbuffers::Offset<ScoreNpIdPcId>>(*npids) : 0;
+  auto npids__ = npids ? _fbb.CreateVector<::flatbuffers::Offset<ScoreNpIdPcId>>(*npids) : 0;
   return CreateGetScoreNpIdRequest(
       _fbb,
       boardId,
@@ -3914,7 +3914,7 @@ inline flatbuffers::Offset<GetScoreNpIdRequest> CreateGetScoreNpIdRequestDirect(
       withGameInfo);
 }
 
-struct GetScoreFriendsRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+struct GetScoreFriendsRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
   typedef GetScoreFriendsRequestBuilder Builder;
   enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_BOARDID = 4,
@@ -3938,7 +3938,7 @@ struct GetScoreFriendsRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Tab
   bool withGameInfo() const {
     return GetField<uint8_t>(VT_WITHGAMEINFO, 0) != 0;
   }
-  bool Verify(flatbuffers::Verifier &verifier) const {
+  bool Verify(::flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
            VerifyField<uint32_t>(verifier, VT_BOARDID, 4) &&
            VerifyField<uint8_t>(verifier, VT_INCLUDE_SELF, 1) &&
@@ -3951,8 +3951,8 @@ struct GetScoreFriendsRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Tab
 
 struct GetScoreFriendsRequestBuilder {
   typedef GetScoreFriendsRequest Table;
-  flatbuffers::FlatBufferBuilder &fbb_;
-  flatbuffers::uoffset_t start_;
+  ::flatbuffers::FlatBufferBuilder &fbb_;
+  ::flatbuffers::uoffset_t start_;
   void add_boardId(uint32_t boardId) {
     fbb_.AddElement<uint32_t>(GetScoreFriendsRequest::VT_BOARDID, boardId, 0);
   }
@@ -3968,19 +3968,19 @@ struct GetScoreFriendsRequestBuilder {
   void add_withGameInfo(bool withGameInfo) {
     fbb_.AddElement<uint8_t>(GetScoreFriendsRequest::VT_WITHGAMEINFO, static_cast<uint8_t>(withGameInfo), 0);
   }
-  explicit GetScoreFriendsRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+  explicit GetScoreFriendsRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
         : fbb_(_fbb) {
     start_ = fbb_.StartTable();
   }
-  flatbuffers::Offset<GetScoreFriendsRequest> Finish() {
+  ::flatbuffers::Offset<GetScoreFriendsRequest> Finish() {
     const auto end = fbb_.EndTable(start_);
-    auto o = flatbuffers::Offset<GetScoreFriendsRequest>(end);
+    auto o = ::flatbuffers::Offset<GetScoreFriendsRequest>(end);
     return o;
   }
 };
 
-inline flatbuffers::Offset<GetScoreFriendsRequest> CreateGetScoreFriendsRequest(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<GetScoreFriendsRequest> CreateGetScoreFriendsRequest(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     uint32_t boardId = 0,
     bool include_self = false,
     uint32_t max = 0,
@@ -3995,7 +3995,7 @@ inline flatbuffers::Offset<GetScoreFriendsRequest> CreateGetScoreFriendsRequest(
   return builder_.Finish();
 }
 
-struct ScoreRankData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+struct ScoreRankData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
   typedef ScoreRankDataBuilder Builder;
   enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_NPID = 4,
@@ -4006,11 +4006,11 @@ struct ScoreRankData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
     VT_HASGAMEDATA = 14,
     VT_RECORDDATE = 16
   };
-  const flatbuffers::String *npId() const {
-    return GetPointer<const flatbuffers::String *>(VT_NPID);
+  const ::flatbuffers::String *npId() const {
+    return GetPointer<const ::flatbuffers::String *>(VT_NPID);
   }
-  const flatbuffers::String *onlineName() const {
-    return GetPointer<const flatbuffers::String *>(VT_ONLINENAME);
+  const ::flatbuffers::String *onlineName() const {
+    return GetPointer<const ::flatbuffers::String *>(VT_ONLINENAME);
   }
   int32_t pcId() const {
     return GetField<int32_t>(VT_PCID, 0);
@@ -4027,7 +4027,7 @@ struct ScoreRankData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
   uint64_t recordDate() const {
     return GetField<uint64_t>(VT_RECORDDATE, 0);
   }
-  bool Verify(flatbuffers::Verifier &verifier) const {
+  bool Verify(::flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
            VerifyOffset(verifier, VT_NPID) &&
            verifier.VerifyString(npId()) &&
@@ -4044,12 +4044,12 @@ struct ScoreRankData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
 
 struct ScoreRankDataBuilder {
   typedef ScoreRankData Table;
-  flatbuffers::FlatBufferBuilder &fbb_;
-  flatbuffers::uoffset_t start_;
-  void add_npId(flatbuffers::Offset<flatbuffers::String> npId) {
+  ::flatbuffers::FlatBufferBuilder &fbb_;
+  ::flatbuffers::uoffset_t start_;
+  void add_npId(::flatbuffers::Offset<::flatbuffers::String> npId) {
     fbb_.AddOffset(ScoreRankData::VT_NPID, npId);
   }
-  void add_onlineName(flatbuffers::Offset<flatbuffers::String> onlineName) {
+  void add_onlineName(::flatbuffers::Offset<::flatbuffers::String> onlineName) {
     fbb_.AddOffset(ScoreRankData::VT_ONLINENAME, onlineName);
   }
   void add_pcId(int32_t pcId) {
@@ -4067,21 +4067,21 @@ struct ScoreRankDataBuilder {
   void add_recordDate(uint64_t recordDate) {
     fbb_.AddElement<uint64_t>(ScoreRankData::VT_RECORDDATE, recordDate, 0);
   }
-  explicit ScoreRankDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+  explicit ScoreRankDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
         : fbb_(_fbb) {
     start_ = fbb_.StartTable();
   }
-  flatbuffers::Offset<ScoreRankData> Finish() {
+  ::flatbuffers::Offset<ScoreRankData> Finish() {
     const auto end = fbb_.EndTable(start_);
-    auto o = flatbuffers::Offset<ScoreRankData>(end);
+    auto o = ::flatbuffers::Offset<ScoreRankData>(end);
     return o;
   }
 };
 
-inline flatbuffers::Offset<ScoreRankData> CreateScoreRankData(
-    flatbuffers::FlatBufferBuilder &_fbb,
-    flatbuffers::Offset<flatbuffers::String> npId = 0,
-    flatbuffers::Offset<flatbuffers::String> onlineName = 0,
+inline ::flatbuffers::Offset<ScoreRankData> CreateScoreRankData(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
+    ::flatbuffers::Offset<::flatbuffers::String> npId = 0,
+    ::flatbuffers::Offset<::flatbuffers::String> onlineName = 0,
     int32_t pcId = 0,
     uint32_t rank = 0,
     int64_t score = 0,
@@ -4098,8 +4098,8 @@ inline flatbuffers::Offset<ScoreRankData> CreateScoreRankData(
   return builder_.Finish();
 }
 
-inline flatbuffers::Offset<ScoreRankData> CreateScoreRankDataDirect(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<ScoreRankData> CreateScoreRankDataDirect(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     const char *npId = nullptr,
     const char *onlineName = nullptr,
     int32_t pcId = 0,
@@ -4120,15 +4120,15 @@ inline flatbuffers::Offset<ScoreRankData> CreateScoreRankDataDirect(
       recordDate);
 }
 
-struct ScoreInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+struct ScoreInfo FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
   typedef ScoreInfoBuilder Builder;
   enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_DATA = 4
   };
-  const flatbuffers::Vector<uint8_t> *data() const {
-    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
+  const ::flatbuffers::Vector<uint8_t> *data() const {
+    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_DATA);
   }
-  bool Verify(flatbuffers::Verifier &verifier) const {
+  bool Verify(::flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
            VerifyOffset(verifier, VT_DATA) &&
            verifier.VerifyVector(data()) &&
@@ -4138,32 +4138,32 @@ struct ScoreInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
 
 struct ScoreInfoBuilder {
   typedef ScoreInfo Table;
-  flatbuffers::FlatBufferBuilder &fbb_;
-  flatbuffers::uoffset_t start_;
-  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data) {
+  ::flatbuffers::FlatBufferBuilder &fbb_;
+  ::flatbuffers::uoffset_t start_;
+  void add_data(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data) {
     fbb_.AddOffset(ScoreInfo::VT_DATA, data);
   }
-  explicit ScoreInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+  explicit ScoreInfoBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
         : fbb_(_fbb) {
     start_ = fbb_.StartTable();
   }
-  flatbuffers::Offset<ScoreInfo> Finish() {
+  ::flatbuffers::Offset<ScoreInfo> Finish() {
     const auto end = fbb_.EndTable(start_);
-    auto o = flatbuffers::Offset<ScoreInfo>(end);
+    auto o = ::flatbuffers::Offset<ScoreInfo>(end);
     return o;
   }
 };
 
-inline flatbuffers::Offset<ScoreInfo> CreateScoreInfo(
-    flatbuffers::FlatBufferBuilder &_fbb,
-    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data = 0) {
+inline ::flatbuffers::Offset<ScoreInfo> CreateScoreInfo(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
+    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data = 0) {
   ScoreInfoBuilder builder_(_fbb);
   builder_.add_data(data);
   return builder_.Finish();
 }
 
-inline flatbuffers::Offset<ScoreInfo> CreateScoreInfoDirect(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<ScoreInfo> CreateScoreInfoDirect(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     const std::vector<uint8_t> *data = nullptr) {
   auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
   return CreateScoreInfo(
@@ -4171,7 +4171,7 @@ inline flatbuffers::Offset<ScoreInfo> CreateScoreInfoDirect(
       data__);
 }
 
-struct GetScoreResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+struct GetScoreResponse FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
   typedef GetScoreResponseBuilder Builder;
   enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_RANKARRAY = 4,
@@ -4180,14 +4180,14 @@ struct GetScoreResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
     VT_LASTSORTDATE = 10,
     VT_TOTALRECORD = 12
   };
-  const flatbuffers::Vector<flatbuffers::Offset<ScoreRankData>> *rankArray() const {
-    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<ScoreRankData>> *>(VT_RANKARRAY);
+  const ::flatbuffers::Vector<::flatbuffers::Offset<ScoreRankData>> *rankArray() const {
+    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<ScoreRankData>> *>(VT_RANKARRAY);
   }
-  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *commentArray() const {
-    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_COMMENTARRAY);
+  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *commentArray() const {
+    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_COMMENTARRAY);
   }
-  const flatbuffers::Vector<flatbuffers::Offset<ScoreInfo>> *infoArray() const {
-    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<ScoreInfo>> *>(VT_INFOARRAY);
+  const ::flatbuffers::Vector<::flatbuffers::Offset<ScoreInfo>> *infoArray() const {
+    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<ScoreInfo>> *>(VT_INFOARRAY);
   }
   uint64_t lastSortDate() const {
     return GetField<uint64_t>(VT_LASTSORTDATE, 0);
@@ -4195,7 +4195,7 @@ struct GetScoreResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
   uint32_t totalRecord() const {
     return GetField<uint32_t>(VT_TOTALRECORD, 0);
   }
-  bool Verify(flatbuffers::Verifier &verifier) const {
+  bool Verify(::flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
            VerifyOffset(verifier, VT_RANKARRAY) &&
            verifier.VerifyVector(rankArray()) &&
@@ -4214,15 +4214,15 @@ struct GetScoreResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
 
 struct GetScoreResponseBuilder {
   typedef GetScoreResponse Table;
-  flatbuffers::FlatBufferBuilder &fbb_;
-  flatbuffers::uoffset_t start_;
-  void add_rankArray(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ScoreRankData>>> rankArray) {
+  ::flatbuffers::FlatBufferBuilder &fbb_;
+  ::flatbuffers::uoffset_t start_;
+  void add_rankArray(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<ScoreRankData>>> rankArray) {
     fbb_.AddOffset(GetScoreResponse::VT_RANKARRAY, rankArray);
   }
-  void add_commentArray(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> commentArray) {
+  void add_commentArray(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> commentArray) {
     fbb_.AddOffset(GetScoreResponse::VT_COMMENTARRAY, commentArray);
   }
-  void add_infoArray(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ScoreInfo>>> infoArray) {
+  void add_infoArray(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<ScoreInfo>>> infoArray) {
     fbb_.AddOffset(GetScoreResponse::VT_INFOARRAY, infoArray);
   }
   void add_lastSortDate(uint64_t lastSortDate) {
@@ -4231,22 +4231,22 @@ struct GetScoreResponseBuilder {
   void add_totalRecord(uint32_t totalRecord) {
     fbb_.AddElement<uint32_t>(GetScoreResponse::VT_TOTALRECORD, totalRecord, 0);
   }
-  explicit GetScoreResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+  explicit GetScoreResponseBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
         : fbb_(_fbb) {
     start_ = fbb_.StartTable();
   }
-  flatbuffers::Offset<GetScoreResponse> Finish() {
+  ::flatbuffers::Offset<GetScoreResponse> Finish() {
     const auto end = fbb_.EndTable(start_);
-    auto o = flatbuffers::Offset<GetScoreResponse>(end);
+    auto o = ::flatbuffers::Offset<GetScoreResponse>(end);
     return o;
   }
 };
 
-inline flatbuffers::Offset<GetScoreResponse> CreateGetScoreResponse(
-    flatbuffers::FlatBufferBuilder &_fbb,
-    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ScoreRankData>>> rankArray = 0,
-    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> commentArray = 0,
-    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ScoreInfo>>> infoArray = 0,
+inline ::flatbuffers::Offset<GetScoreResponse> CreateGetScoreResponse(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
+    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<ScoreRankData>>> rankArray = 0,
+    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> commentArray = 0,
+    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<ScoreInfo>>> infoArray = 0,
     uint64_t lastSortDate = 0,
     uint32_t totalRecord = 0) {
   GetScoreResponseBuilder builder_(_fbb);
@@ -4258,16 +4258,16 @@ inline flatbuffers::Offset<GetScoreResponse> CreateGetScoreResponse(
   return builder_.Finish();
 }
 
-inline flatbuffers::Offset<GetScoreResponse> CreateGetScoreResponseDirect(
-    flatbuffers::FlatBufferBuilder &_fbb,
-    const std::vector<flatbuffers::Offset<ScoreRankData>> *rankArray = nullptr,
-    const std::vector<flatbuffers::Offset<flatbuffers::String>> *commentArray = nullptr,
-    const std::vector<flatbuffers::Offset<ScoreInfo>> *infoArray = nullptr,
+inline ::flatbuffers::Offset<GetScoreResponse> CreateGetScoreResponseDirect(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
+    const std::vector<::flatbuffers::Offset<ScoreRankData>> *rankArray = nullptr,
+    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *commentArray = nullptr,
+    const std::vector<::flatbuffers::Offset<ScoreInfo>> *infoArray = nullptr,
     uint64_t lastSortDate = 0,
     uint32_t totalRecord = 0) {
-  auto rankArray__ = rankArray ? _fbb.CreateVector<flatbuffers::Offset<ScoreRankData>>(*rankArray) : 0;
-  auto commentArray__ = commentArray ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*commentArray) : 0;
-  auto infoArray__ = infoArray ? _fbb.CreateVector<flatbuffers::Offset<ScoreInfo>>(*infoArray) : 0;
+  auto rankArray__ = rankArray ? _fbb.CreateVector<::flatbuffers::Offset<ScoreRankData>>(*rankArray) : 0;
+  auto commentArray__ = commentArray ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*commentArray) : 0;
+  auto infoArray__ = infoArray ? _fbb.CreateVector<::flatbuffers::Offset<ScoreInfo>>(*infoArray) : 0;
   return CreateGetScoreResponse(
       _fbb,
       rankArray__,
@@ -4277,7 +4277,7 @@ inline flatbuffers::Offset<GetScoreResponse> CreateGetScoreResponseDirect(
       totalRecord);
 }
 
-struct RecordScoreGameDataRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+struct RecordScoreGameDataRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
   typedef RecordScoreGameDataRequestBuilder Builder;
   enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_BOARDID = 4,
@@ -4293,7 +4293,7 @@ struct RecordScoreGameDataRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers:
   int64_t score() const {
     return GetField<int64_t>(VT_SCORE, 0);
   }
-  bool Verify(flatbuffers::Verifier &verifier) const {
+  bool Verify(::flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
            VerifyField<uint32_t>(verifier, VT_BOARDID, 4) &&
            VerifyField<int32_t>(verifier, VT_PCID, 4) &&
@@ -4304,8 +4304,8 @@ struct RecordScoreGameDataRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers:
 
 struct RecordScoreGameDataRequestBuilder {
   typedef RecordScoreGameDataRequest Table;
-  flatbuffers::FlatBufferBuilder &fbb_;
-  flatbuffers::uoffset_t start_;
+  ::flatbuffers::FlatBufferBuilder &fbb_;
+  ::flatbuffers::uoffset_t start_;
   void add_boardId(uint32_t boardId) {
     fbb_.AddElement<uint32_t>(RecordScoreGameDataRequest::VT_BOARDID, boardId, 0);
   }
@@ -4315,19 +4315,19 @@ struct RecordScoreGameDataRequestBuilder {
   void add_score(int64_t score) {
     fbb_.AddElement<int64_t>(RecordScoreGameDataRequest::VT_SCORE, score, 0);
   }
-  explicit RecordScoreGameDataRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+  explicit RecordScoreGameDataRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
         : fbb_(_fbb) {
     start_ = fbb_.StartTable();
   }
-  flatbuffers::Offset<RecordScoreGameDataRequest> Finish() {
+  ::flatbuffers::Offset<RecordScoreGameDataRequest> Finish() {
     const auto end = fbb_.EndTable(start_);
-    auto o = flatbuffers::Offset<RecordScoreGameDataRequest>(end);
+    auto o = ::flatbuffers::Offset<RecordScoreGameDataRequest>(end);
     return o;
   }
 };
 
-inline flatbuffers::Offset<RecordScoreGameDataRequest> CreateRecordScoreGameDataRequest(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<RecordScoreGameDataRequest> CreateRecordScoreGameDataRequest(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     uint32_t boardId = 0,
     int32_t pcId = 0,
     int64_t score = 0) {
@@ -4338,7 +4338,7 @@ inline flatbuffers::Offset<RecordScoreGameDataRequest> CreateRecordScoreGameData
   return builder_.Finish();
 }
 
-struct GetScoreGameDataRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
+struct GetScoreGameDataRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
   typedef GetScoreGameDataRequestBuilder Builder;
   enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
     VT_BOARDID = 4,
@@ -4348,13 +4348,13 @@ struct GetScoreGameDataRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Ta
   uint32_t boardId() const {
     return GetField<uint32_t>(VT_BOARDID, 0);
   }
-  const flatbuffers::String *npId() const {
-    return GetPointer<const flatbuffers::String *>(VT_NPID);
+  const ::flatbuffers::String *npId() const {
+    return GetPointer<const ::flatbuffers::String *>(VT_NPID);
   }
   int32_t pcId() const {
     return GetField<int32_t>(VT_PCID, 0);
   }
-  bool Verify(flatbuffers::Verifier &verifier) const {
+  bool Verify(::flatbuffers::Verifier &verifier) const {
     return VerifyTableStart(verifier) &&
            VerifyField<uint32_t>(verifier, VT_BOARDID, 4) &&
            VerifyOffset(verifier, VT_NPID) &&
@@ -4366,32 +4366,32 @@ struct GetScoreGameDataRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Ta
 
 struct GetScoreGameDataRequestBuilder {
   typedef GetScoreGameDataRequest Table;
-  flatbuffers::FlatBufferBuilder &fbb_;
-  flatbuffers::uoffset_t start_;
+  ::flatbuffers::FlatBufferBuilder &fbb_;
+  ::flatbuffers::uoffset_t start_;
   void add_boardId(uint32_t boardId) {
     fbb_.AddElement<uint32_t>(GetScoreGameDataRequest::VT_BOARDID, boardId, 0);
   }
-  void add_npId(flatbuffers::Offset<flatbuffers::String> npId) {
+  void add_npId(::flatbuffers::Offset<::flatbuffers::String> npId) {
     fbb_.AddOffset(GetScoreGameDataRequest::VT_NPID, npId);
   }
   void add_pcId(int32_t pcId) {
     fbb_.AddElement<int32_t>(GetScoreGameDataRequest::VT_PCID, pcId, 0);
   }
-  explicit GetScoreGameDataRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
+  explicit GetScoreGameDataRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
         : fbb_(_fbb) {
     start_ = fbb_.StartTable();
   }
-  flatbuffers::Offset<GetScoreGameDataRequest> Finish() {
+  ::flatbuffers::Offset<GetScoreGameDataRequest> Finish() {
     const auto end = fbb_.EndTable(start_);
-    auto o = flatbuffers::Offset<GetScoreGameDataRequest>(end);
+    auto o = ::flatbuffers::Offset<GetScoreGameDataRequest>(end);
     return o;
   }
 };
 
-inline flatbuffers::Offset<GetScoreGameDataRequest> CreateGetScoreGameDataRequest(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<GetScoreGameDataRequest> CreateGetScoreGameDataRequest(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     uint32_t boardId = 0,
-    flatbuffers::Offset<flatbuffers::String> npId = 0,
+    ::flatbuffers::Offset<::flatbuffers::String> npId = 0,
     int32_t pcId = 0) {
   GetScoreGameDataRequestBuilder builder_(_fbb);
   builder_.add_pcId(pcId);
@@ -4400,8 +4400,8 @@ inline flatbuffers::Offset<GetScoreGameDataRequest> CreateGetScoreGameDataReques
   return builder_.Finish();
 }
 
-inline flatbuffers::Offset<GetScoreGameDataRequest> CreateGetScoreGameDataRequestDirect(
-    flatbuffers::FlatBufferBuilder &_fbb,
+inline ::flatbuffers::Offset<GetScoreGameDataRequest> CreateGetScoreGameDataRequestDirect(
+    ::flatbuffers::FlatBufferBuilder &_fbb,
     uint32_t boardId = 0,
     const char *npId = nullptr,
     int32_t pcId = 0) {
diff --git a/rpcs3/Emu/NP/upnp_handler.cpp b/rpcs3/Emu/NP/upnp_handler.cpp
index dca00de98..b30bb2e81 100644
--- a/rpcs3/Emu/NP/upnp_handler.cpp
+++ b/rpcs3/Emu/NP/upnp_handler.cpp
@@ -2,8 +2,8 @@
 #include "upnp_handler.h"
 #include "util/logs.hpp"
 
-#include <miniwget.h>
-#include <upnpcommands.h>
+#include <miniupnpc/miniwget.h>
+#include <miniupnpc/upnpcommands.h>
 
 LOG_CHANNEL(upnp_log, "UPNP");
 
diff --git a/rpcs3/Emu/NP/upnp_handler.h b/rpcs3/Emu/NP/upnp_handler.h
index 40892f744..bb99b88ae 100644
--- a/rpcs3/Emu/NP/upnp_handler.h
+++ b/rpcs3/Emu/NP/upnp_handler.h
@@ -2,7 +2,7 @@
 
 #include <unordered_map>
 
-#include <miniupnpc.h>
+#include <miniupnpc/miniupnpc.h>
 
 #include "upnp_config.h"
 #include "Utilities/mutex.h"
diff --git a/rpcs3/Emu/RSX/VK/VKCommonDecompiler.cpp b/rpcs3/Emu/RSX/VK/VKCommonDecompiler.cpp
index a9005d520..b241a7897 100644
--- a/rpcs3/Emu/RSX/VK/VKCommonDecompiler.cpp
+++ b/rpcs3/Emu/RSX/VK/VKCommonDecompiler.cpp
@@ -13,7 +13,7 @@
 #pragma clang diagnostic ignored "-Winconsistent-missing-override"
 #endif
 #endif
-#include "SPIRV/GlslangToSpv.h"
+#include "glslang/SPIRV/GlslangToSpv.h"
 #ifdef _MSC_VER
 #pragma warning(pop)
 #else
diff --git a/rpcs3/Input/ds4_pad_handler.cpp b/rpcs3/Input/ds4_pad_handler.cpp
index bb4603267..3ac5ab89e 100644
--- a/rpcs3/Input/ds4_pad_handler.cpp
+++ b/rpcs3/Input/ds4_pad_handler.cpp
@@ -643,7 +643,7 @@ int ds4_pad_handler::send_output_report(DS4Device* device)
 		outputBuf[76] = (crcCalc >> 16) & 0xFF;
 		outputBuf[77] = (crcCalc >> 24) & 0xFF;
 
-		return hid_write_control(device->hidDevice, outputBuf.data(), DS4_OUTPUT_REPORT_0x11_SIZE);
+		return hid_write(device->hidDevice, outputBuf.data(), DS4_OUTPUT_REPORT_0x11_SIZE);
 	}
 	else
 	{
diff --git a/rpcs3/Input/hid_pad_handler.h b/rpcs3/Input/hid_pad_handler.h
index 943b6c243..69b80964d 100644
--- a/rpcs3/Input/hid_pad_handler.h
+++ b/rpcs3/Input/hid_pad_handler.h
@@ -4,7 +4,7 @@
 #include "Utilities/CRC.h"
 #include "Utilities/Thread.h"
 
-#include "hidapi.h"
+#include "hidapi/hidapi.h"
 
 #include <algorithm>
 
